module lib:

imports:
  module num
  module list
  module control

module num:

__ max of two values
max: [] pushl pushl dup . dup popr drop | [<= !] . popr swap drop

__ min of two values
min: [] pushl pushl dup . dup popr drop | [> !] . popr swap drop cut


module list:

__ take rightmost value from quote
head: popr swap drop

__ rotate top 3
rot:               __ x y z
  [] pushl         __ x y [z]
    swap pushr     __ x [z y]
    pushl          __ [x z y]
    popr swap      __ y [x z]
    popr swap      __ y z [x]
    popr swap drop __ y z x

module control:

__ if then else
ifte: [] pushl pushl swap pushr [0 == !] [drop drop] | . popr swap drop cut

__ ifte2: rot [swap drop 0 != !] [0 == !] | pushl pushl pushl popr swap drop cut

__ apply a quote to a single input yielding a single output
ap11: pushl popr swap drop

__ apply a quote to two inputs yielding a single output
ap21: pushl pushl popr swap drop

__ apply a quote to a single input yielding two outputs
ap12: pushl popr swap popr swap drop swap

__ apply a quote underneath the top, 1 -> 1
dip11: swap pushr pushl popr swap popr swap drop swap

__ apply a quote underneath the top, 1 -> 2
dip12: swap pushr pushl popr swap pushl [swap] . popr swap popr swap popr swap drop

__ apply a quote underneath the top, 2 -> 1
dip21: swap pushr pushl pushl popr swap popr swap drop swap


module logic:

__ or: swap [dup 0 != !] ap11 swap | cut
__ and: 1 rot rot 0 != ! 0 != ! 0 | cut
__ fix, select disappears: =and 1 rot rot 0 != ! 0 != ! 0 or


__ module loop:

__ mod5: [dup 5 < !] [dup 5 >= swap 5- mod5 swap !] | pushl popr cut swap drop
__ fib: dup 2 < [1 swap drop] [dup 1- fib swap 2- fib +] ifte pushl head
__ loop: dup 1 > [1- loop] [] ifte pushl head
__ fact: dup 1 > [dup 1- fact *] [] ifte pushl head
__ top0 [popr] [0] | pushl popr swap drop cut
