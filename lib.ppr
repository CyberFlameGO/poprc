module lib:

imports:
  module num
  module list
  module stack
  module control


module num:

__ max of two values
max: [] pushl pushl dup . dup popr drop | [<= !] . popr swap drop

__ min of two values
min: [] pushl pushl dup . dup popr drop | [> !] . popr swap drop


module list:

__ take rightmost value from quote
head: popr swap drop


module stack:

__ rotate top 3
rotl:              __ x y z
  [] pushl         __ x y [z]
    swap pushr     __ x [z y]
    pushl          __ [x z y]
    popr swap      __ y [x z]
    popr swap      __ y z [x]
    popr swap drop __ y z x

rotr: rotl rotl

dup2: swap [] pushl pushl dup . popr swap popr swap popr swap popr swap drop

under: swap dup rotr

swap2: [] swap pushr swap pushr pushl popr swap popr swap popr swap drop
swap3: [] swap pushr swap pushr swap pushr pushl popr swap popr swap popr swap popr swap drop
swap4: [] swap pushr swap pushr swap pushr swap pushr pushl popr swap popr swap popr swap popr swap popr swap drop

module control:

imports:
  module stack

__ if then else
ifte: [] pushl pushl swap pushr [0 == !] [drop drop] | . popr swap drop

__ ifte2: rot [swap drop 0 != !] [0 == !] | pushl pushl pushl popr swap drop cut

__ apply a quote underneath the top
dip11: swap [] ap31 swap popr . swap pushr ap02 swap2 drop
dip12: swap [] ap31 swap popr . swap pushr ap03 swap3 drop
dip13: swap [] ap31 swap popr . swap pushr ap04 swap4 drop

dip21: swap [] ap41 swap popr . swap pushr ap02 swap2 drop
dip22: swap [] ap41 swap popr . swap pushr ap03 swap3 drop
dip23: swap [] ap41 swap popr . swap pushr ap04 swap4 drop

dip31: swap [] ap51 swap popr . swap pushr ap02 swap2 drop
dip32: swap [] ap51 swap popr . swap pushr ap03 swap3 drop
dip33: swap [] ap51 swap popr . swap pushr ap04 swap4 drop

module logic:

not: False =:=

or: [not!] [True swap!] | ap21 swap drop
and: [!] [False swap not!] | ap21 swap drop

__ module loop:

__ mod5: [dup 5 < !] [dup 5 >= swap 5- mod5 swap !] | pushl popr cut swap drop
__ fib: dup 2 < [1 swap drop] [dup 1- fib swap 2- fib +] ifte pushl head
__ loop: dup 1 > [1- loop] [] ifte pushl head
__ fact: dup 1 > [dup 1- fact *] [] ifte pushl head
__ top0 [popr] [0] | pushl popr swap drop cut
