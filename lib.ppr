module lib:

imports:
  module num
  module list
  module stack
  module control


module num:

__ max of two values
max: [] pushl pushl dup . dup popr drop | [<= !] . popr swap drop

__ min of two values
min: [] pushl pushl dup . dup popr drop | [> !] . popr swap drop


module list:

__ take rightmost value from quote
head: popr swap drop


module stack:

pull: popr swap
pull2: pull pull
pull3: pull2 pull
pull4: pull3 pull
pull5: pull4 pull

nip: swap drop
tuck: [] ap20 dup . pull3 drop
over: swap tuck

rotl: swap2
rotr: swap2 swap2
dup2: [] ap20 dup . ap04 swap4 drop

swap2: [] swap pushr swap pushr pushl pull3 drop
swap3: [] swap pushr swap pushr swap pushr pushl pull4 drop
swap4: [] swap pushr swap pushr swap pushr swap pushr pushl pull5 drop

module control:

imports:
  module stack
  module logic

__ if then else
ifte: [] ap20 swap pushr [not!] [swap drop!] | . pull drop

__ ifte2: rot [swap drop 0 != !] [0 == !] | pushl pushl pushl popr swap drop cut

__ [1 [2]] 3 -> [1 2 3]
feed: swap popr . swap pushr

__ apply a quote underneath the top
dip11: swap [] ap31 feed ap02 swap2 drop
__ dip11: pushr ap12 swap3 drop
dip12: swap [] ap31 feed ap03 swap3 drop
dip13: swap [] ap31 feed ap04 swap4 drop

dip21: swap [] ap41 feed ap02 swap2 drop
dip22: swap [] ap41 feed ap03 swap3 drop
dip23: swap [] ap41 feed ap04 swap4 drop

dip31: swap [] ap51 feed ap02 swap2 drop
dip32: swap [] ap51 feed ap03 swap3 drop
dip33: swap [] ap51 feed ap04 swap4 drop

__ a [f] -> fa
$: ap11 swap drop

__ a [f] -> a fa
peek: [dup] dip12 $

__ a [f] -> fa a
->: peek swap

__ a [f] [g] -> fa ga
fork: [->] dip22 $

__ a b [f] [g] -> fa gb
para: [dip11] dip32 $

__ a b [f] -> fa fb
twice: dup para

__ a [cond] [f] -> fa
__ f fails if cond does not return True
if: [peek] dip22 swap [$] dip21 !

__ a [f b] -> fa if b, otherwise a
ifdo: dup [dup] swap . [[drop] dip21 not] . | ap12 swap2 drop !

__ a b -> a b [a b]
in2: [] ap20 dup [ap02 swap2 drop] dip12

__ a [fn] [test] -> apply fn to a while a [test] $ is True
iterate:
  in2 [iterate] .  __ a [fn] [test] [[fn] [test] iterate]
    [swap] dip22 . swap __ a [fn [fn] [test] iterate] [test]
    [fork] ap20 ifdo

module logic:

not: False =:=

or: [not!] [True swap!] | ap21 swap drop
and: [!] [False swap not!] | ap21 swap drop
