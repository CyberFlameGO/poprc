module lib:

imports:
  module num
  module list
  module stack
  module control


module num:

__ max of two values
max: [] pushl pushl dup . dup popr drop | [<= !] . popr swap drop

__ min of two values
min: [] pushl pushl dup . dup popr drop | [> !] . popr swap drop

__ is argument odd?
odd: 1 .& 1 ==

module list:

imports:
  module control
  module stack

__ take rightmost value from quote
head: popr swap drop

__ return the length of a list
length: function_t 0 swap length_
length_:
  [] ap20
    [length_step]
    [head is_nil not]
    iterate popr drop head
length_step: [[1+] [popr drop] para] .

__ right fold
__ [... x] y [fn] foldr -> y'
foldr: -swap2 foldr_
foldr_:
  [] ap30 __ fn xs y
    [[foldr_step] .]
    [popr drop head is_nil not]
    iterate head
foldr_step: [popr] dip12 over3 ap21 swap drop

__ left fold
__ [... x] y [fn] foldl -> y'
foldl: swap2 [] foldl_ ap11 swap drop
foldl_:
  [] ap30 __ fn xs y
    [[foldl_step] .]
    [popr drop head is_nil not]
    iterate head
foldl_step: [popr over2 pushl] dip23 .

dropl:
  [] ap20
    [[[popr drop] [1-] para] .]
    [head 0 >]
    iterate popr drop head

__ [a.. x] [b..] -> [a..] [x b..]
movr: [popr] dip12 pushl

__ not working
__ split_at: [[[]] pushl] dip11 [[movr] .] times ap02 swap2 drop

__ index operator
__ [f] index -> x
!!: !!_ head
!!_: dropl

__ a [a -> a] -> [a]
iteratel: [dup [peek] dip22 iteratel swap] ap20

concat: [] [.] foldr

mov_ap: dup -swap2 [. movr] dip32
map: [] swap map_
map_:
  [] ap30
    [[mov_ap] .]
    [popr drop popr drop head is_nil not]
    iterate popr drop head

__ a [b..] [p]
pushif:
  [over] dip23 $
    -swap2 dup [pushl] dip21
    ifte

__ [l] [p] filter -> [..x..] such that for all x, x p == True
filter: [] swap filter_
filter_:
  [] ap30
    [[filter_step] .]
    [popr drop popr drop head is_nil not]
    iterate popr drop head

__ [.. a] [b ..] [p] --> [..] [a b ..] if a p, otherwise [..] [b ..]
filter_step: dup [[[popr] dip12] dip23 pushif] dip32

module stack:

imports:
  module control

__ [x_1 ... x_n] -> [] x_n ... x_1
pull: popr swap
pull2: pull pull
pull3: pull2 pull
pull4: pull3 pull
pull5: pull4 pull
pull6: pull5 pull
pull7: pull6 pull

rev3: [] ap30 pull3 drop

__ a b -> b
nip: swap drop

__ a b  -> b a b
tuck: [] ap20 dup . pull3 drop

__ a b -> a b a
over: swap dup [swap] dip22
over2: swap2 dup [-swap2] dip33
over3: swap3 dup [-swap3] dip44
over4: swap4 dup [-swap4] dip55

dup2: [] ap20 dup . ap04 swap4 drop

__ x_1 x_2 ... x_n -> x_2 ... x_n x_1
swap2: [] swap pushr swap pushr pushl pull3 drop
swap3: [] swap pushr swap pushr swap pushr pushl pull4 drop
swap4: [] swap pushr swap pushr swap pushr swap pushr pushl pull5 drop
swap5: [] swap pushr swap pushr swap pushr swap pushr swap pushr pushl pull6 drop
swap6: [] swap pushr swap pushr swap pushr swap pushr swap pushr swap pushr pushl pull7 drop

__ x_2 ... x_n x_1 -> x_1 x_2 ... x_n
-swap2: swap2 swap2
-swap3: swap3 swap3 swap3
-swap4: swap4 swap4 swap4 swap4
-swap5: swap5 swap5 swap5 swap5 swap5
-swap6: swap6 swap6 swap6 swap6 swap6 swap6

module control:

imports:
  module stack
  module logic
  module list

__ if then else
ifte: [] ap20 swap pushr [not!] [swap drop!] | . pull drop

__ ifte2: rot [swap drop 0 != !] [0 == !] | pushl pushl pushl popr swap drop cut

__ apply a quote underneath the top
dip11: swap pushr ap12 swap2 drop
dip12: swap pushr ap13 swap3 drop
dip13: swap pushr ap14 swap4 drop
dip14: swap pushr ap15 swap5 drop
dip15: swap pushr ap16 swap6 drop

dip21: swap pushr ap22 swap2 drop
dip22: swap pushr ap23 swap3 drop
dip23: swap pushr ap24 swap4 drop
dip24: swap pushr ap25 swap5 drop
dip25: swap pushr ap26 swap6 drop

dip31: swap pushr ap32 swap2 drop
dip32: swap pushr ap33 swap3 drop
dip33: swap pushr ap34 swap4 drop
dip34: swap pushr ap35 swap5 drop
dip35: swap pushr ap36 swap6 drop

dip41: swap pushr ap42 swap2 drop
dip42: swap pushr ap43 swap3 drop
dip43: swap pushr ap44 swap4 drop
dip44: swap pushr ap45 swap5 drop
dip45: swap pushr ap46 swap6 drop

dip51: swap pushr ap52 swap2 drop
dip52: swap pushr ap53 swap3 drop
dip53: swap pushr ap54 swap4 drop
dip54: swap pushr ap55 swap5 drop
dip55: swap pushr ap56 swap6 drop

__ a [f] -> fa
$: ap11 swap drop
$$: ap21 swap drop

__ a [f] -> fa [f]
$keep: dup [$] dip21

__ a [f] -> a fa
peek: [dup] dip12 $

__ a [f] -> fa a
->: peek swap

__ a [f] [g] -> fa ga
fork: [->] dip22 $

__ a b [f] [g] -> fa gb
para: [dip11] dip32 $

__ a b [f] -> fa fb
twice: dup para

__ a [cond] [f] -> fa
__ f fails if cond does not return True
if: [peek] dip22 swap [$] dip21 !

__ a [f b] -> fa if b, otherwise a
ifdo: dup [dup] swap . [[drop] dip21 not] . | ap12 swap2 drop !

__ a b -> a b [a b]
in2: [] ap20 dup [ap02 swap2 drop] dip12

__ a [fn] [test] -> apply fn to a while a [test] $ is True
iterate:
  in2 [iterate] .  __ a [fn] [test] [[fn] [test] iterate]
    [swap] dip22 . swap __ a [fn [fn] [test] iterate] [test]
    [fork] ap20 ifdo

__ apply [f] n times
times: swap times_
times_: __ a [f] n
  [] ap30
    [[times_step] .]
    [head 0 >]
    iterate popr drop popr drop head
times_step: [$keep] dip22 1-

__ m [f] a -> a
maybe:
  rev3 __ a [f] m
    [[drop] dip21 Nothing =:= !]
    [Just =:= ! swap $] | . $$

__ e [f1] [f2] -> a
either:
  [Right =:= !] swap . swap
    [Left =:= !] swap . | . head


module logic:

or: [not!] [True swap!] | ap21 swap drop
and: [!] [False swap not!] | ap21 swap drop

module algorithm:

imports:
  module stack
  module list
  module control
  module num

__ greatest common divisor (using Euclid's algorithm)
gcd:
  [] ap20 __ quote arguments [a b]
    [[tuck %] .] __ step: [a b] -> [b (a % b)]
    [head 0 !=] __ while: b != 0
    iterate popr drop head __ return: a

__ acc x power -> if odd power, acc*x, otherwise acc
acc_odd_power: [[*] dip21 odd] ap20 ifdo

__ x power -> x*x power/2
reduce_power: [dup *] [1 .>>] para

__ acc x power -> acc' x^2 power/2
power_step: in2 [acc_odd_power] dip31 ap02 swap2 drop reduce_power

exponent:
  [] ap30
    [[power_step] .]
    [head 0 !=]
    iterate popr drop popr drop head

__ raise to integer power using binary exponentiation
^: 1 -swap2 exponent

__ sums numbers in a list
sum_: [[+] .] [popr drop is_nil not] iterate head int_t
sum: 0 pushr sum_

__ decreasing list from initial element
iota_: [[dup 1-] .] [head 0 >] iterate
iota: [1-] pushl iota_
