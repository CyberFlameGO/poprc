module staging:

imports:
  module list
  module stack
  module control
  module logic

swash: swap pushr

keep2: [] ap20 dup ap02 stack.swap2 drop

in3: [] ap30 dup [ap03 swap3 drop] dip13

keep3: [] ap30 dup ap03 swap3 drop

dup3: in3 ap03 swap3 drop

__ [f] -> [f [f]]
self: dup [] pushl .

__ [f] g -> [f [f] g]
carry: [dup] dip12 [] ap20 .
__ carry: [self] dip11 [] ap20

check: [|] control.dip21 [dup] swap . . popr !

odd: 1 .& 1 ==

__ acc x power -> if odd power, acc*x, otherwise acc
acc_odd_power: [[*] dip21 odd] ap20 ifdo

__ x power -> x*2 power/2
reduce_power: [dup *] [1 .>>] para

__ acc x power -> acc' x^2 power/2
power_step: in2 [acc_odd_power] dip31 ap02 swap2 drop reduce_power

exp_:
  [] ap30
    [[power_step] .]
    [head 0 !=]
    [popr drop popr drop head]
    binrec

^: 1 rotr exp_
