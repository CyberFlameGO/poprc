___ list.head (1 -> 1) ___
[0] var, type = ?l x1
[1] __primitive.dep 2, type = a x1
[2] __primitive.popr 0 1, type = ?l x1
[3] return [ 1 ], type = r x1

___ num.max (2 -> 1) ___
[0] var, type = ?i x3
[1] var, type = ?i x3
[2] __primitive.lte 1 0, type = ?s x1
[3] __primitive.assert 0 2, type = ?i x1
[4] return [ 3 ], type = r -> 7 x1
[5] __primitive.lte 0 1, type = ?s x1
[6] __primitive.assert 1 5, type = ?i x1
[7] return [ 6 ], type = r x1

___ num.min (2 -> 1) ___
[0] var, type = ?i x3
[1] var, type = ?i x3
[2] __primitive.gt 1 0, type = ?s x1
[3] __primitive.assert 0 2, type = ?i x1
[4] return [ 3 ], type = r -> 7 x1
[5] __primitive.gt 0 1, type = ?s x1
[6] __primitive.assert 1 5, type = ?i x1
[7] return [ 6 ], type = r x1

___ stack.dup2 (2 -> 4) ___
[0] var, type = ?a x2
[1] var, type = ?a x2
[2] return [ 1 0 1 0 ], type = r x1

___ stack.rotl (3 -> 3) ___
[0] var, type = ?a x1
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] return [ 1 0 2 ], type = r x1

___ stack.rotr (3 -> 3) ___
[0] var, type = ?a x1
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] return [ 0 2 1 ], type = r x1

___ stack.under (2 -> 3) ___
[0] var, type = ?a x1
[1] var, type = ?a x2
[2] return [ 1 0 1 ], type = r x1

___ control.ap11 (2 -> 1) ___
[0] var, type = ?l x1
[1] var, type = ?a x1
[2] __primitive.pushl 1 0, type = l x1
[3] __primitive.dep 4, type = a x1
[4] __primitive.popr 2 3, type = ?l x1
[5] return [ 3 ], type = r x1

___ control.ap12 (2 -> 2) ___
[0] var, type = ?l x1
[1] var, type = ?a x1
[2] __primitive.pushl 1 0, type = l x1
[3] __primitive.dep 4, type = a x1
[4] __primitive.popr 2 3, type = ?l x2
[5] __primitive.dep 6, type = a x1
[6] __primitive.popr 4 5, type = ?l x1
[7] return [ 5 3 ], type = r x1

___ control.ap21 (3 -> 1) ___
[0] var, type = ?l x1
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] __primitive.pushl 1 0, type = l x1
[4] __primitive.pushl 2 3, type = l x1
[5] __primitive.dep 6, type = a x1
[6] __primitive.popr 4 5, type = ?l x1
[7] return [ 5 ], type = r x1

___ control.ifte (3 -> 1) ___
[0] var, type = ?a x1
[1] var, type = ?a x1
[2] var, type = ?i x1
[3] val 0, type = i x1
[4] __primitive.eq 2 3, type = ?s x1
[5] __primitive.assert 0 4, type = ?a x1
[6] return [ 5 ], type = r -> 7 x1
[7] return [ 1 ], type = r x1

___ tests.dec (1 -> 1) ___
[0] var, type = ?i x4
[1] val 5, type = i x2
[2] __primitive.lte 0 1, type = ?s x1
[3] __primitive.assert 0 2, type = ?i x1
[4] return [ 3 ], type = r -> 10 x1
[5] __primitive.gt 0 1, type = ?s x1
[6] __primitive.assert 9 5, type = ?0 x1
[7] val 1, type = i x1
[8] __primitive.sub 0 7, type = ?i x1
[9] tests.dec 8, type = ?0 x1
[10] return [ 6 ], type = r x1

___ tests.f6 (3 -> 3) ___
[0] var, type = ?a x1
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] return [ 1 0 2 ], type = r x1

___ tests.fib (1 -> 1) ___
[0] var, type = ?i x4
[1] val 1, type = i x4
[2] __primitive.lte 0 1, type = ?s x1
[3] __primitive.assert 0 2, type = ?i x1
[4] return [ 3 ], type = r -> 12 x1
[5] __primitive.gt 0 1, type = ?s x1
[6] __primitive.assert 11 5, type = ?i x1
[7] __primitive.sub 0 1, type = ?i x2
[8] __primitive.sub 7 1, type = ?i x1
[9] tests.fib 8, type = ?i x1
[10] tests.fib 7, type = ?i x1
[11] __primitive.add 9 10, type = ?i x1
[12] return [ 6 ], type = r x1

___ tests.get2 (1 -> 2) ___
[0] var, type = ?l x1
[1] __primitive.dep 2, type = a x1
[2] __primitive.popr 0 1, type = ?l x2
[3] __primitive.dep 4, type = a x1
[4] __primitive.popr 2 3, type = ?l x1
[5] return [ 3 1 ], type = r x1

___ tests.not (1 -> 1) ___
[0] var, type = ?s x1
[1] val 0, type = s x1
[2] __primitive.eq_s 0 1, type = ?s x1
[3] return [ 2 ], type = r x1

___ tests.pushl2 (3 -> 1) ___
[0] var, type = ?l x1
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] __primitive.pushl 1 0, type = l x1
[4] __primitive.pushl 2 3, type = l x1
[5] return [ 4 ], type = r x1

___ tests.range (2 -> 1) ___
[0] var, type = ?i x4
[1] var, type = ?i x5
[2] __primitive.lte 1 0, type = ?s x4
[3] __primitive.assert 4 2, type = l x0
[4] quote tests.range_4 0 1 -4096, type = l x1
[5] __primitive.assert 1 2, type = ?i x1
[6] return [ 5 ], type = r -> 13 x1
[7] __primitive.assert 8 2, type = l x0
[8] quote tests.range_8 0 1 -4096, type = l x1
[9] __primitive.assert 12 2, type = ?0 x1
[10] val 1, type = i x1
[11] __primitive.add 1 10, type = ?i x1
[12] tests.range 11 0, type = ?0 x1
[13] return [ 9 ], type = r x1

___ tests.range_4 (2 -> 1) ___
[0] var, type = ?i x1
[1] var, type = ?i x0
[2] return [ 0 ], type = r x1

___ tests.range_8 (2 -> 1) ___
[0] var, type = ?0 x1
[1] return [ 0 ], type = r x1

