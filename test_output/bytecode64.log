___ algorithm.__caret__ (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] val 1 :: i x1
[4] algorithm.__caret___r0 3 2 1 :: i x1
[5] return [4]

___ algorithm.__caret___r0 (3 -> 1) x2 rec ___
[1] changing var :: ?i x4
[2] changing var :: ?i x3
[3] changing var :: ?i x2
[4] __primitive.neq &1 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert &3 6 :: i? x1
[8] return [7] -> 16
[9] __primitive.neq &1 5 :: y x1
[10] __primitive.assert 15 9 :: i? x1
[11] __primitive.shiftr &1 12 :: i x1
[12] val 1 :: i x1
[13] algorithm.acc_odd_power 3 &2 1 :: i x1
[14] __primitive.mul &2 2 :: i x1
[15] algorithm.__caret___r0 13 14 11 :: i x1
[16] return [10]

___ algorithm.acc_odd_power (3 -> 1) x2 ___
[1] var :: ?i x2
[2] var :: ?i x1
[3] var :: ?i x2
[4] __primitive.bitand &1 &5 :: i x1
[5] val 1 :: i x4
[6] __primitive.eq 4 &5 :: y x1
[7] __primitive.assert 8 6 :: i? x1
[8] __primitive.mul 3 2 :: i x1
[9] return [7] -> 14
[10] __primitive.bitand 1 &5 :: i x1
[11] __primitive.eq 10 5 :: y x1
[12] __primitive.not 11 :: y x1
[13] __primitive.assert 3 12 :: i? x1
[14] return [13]

___ algorithm.gcd (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] algorithm.gcd_r0 2 1 :: i x1
[4] return [3]

___ algorithm.gcd_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?i x4
[2] changing var :: ?i x2
[3] __primitive.neq &1 &4 :: y x1
[4] val 0 :: i x2
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &2 5 :: i? x1
[7] return [6] -> 12
[8] __primitive.neq &1 4 :: y x1
[9] __primitive.assert 11 8 :: i? x1
[10] __primitive.mod 2 &1 :: i? x1
[11] algorithm.gcd_r0 1 10 :: i x1
[12] return [9]

___ algorithm.iota2 (1 -> 1) ___
[1] var :: ?l x1
[2] algorithm.iota2_r0 1 :: l x1
[3] return [2]

___ algorithm.iota2_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?l x2
[2] __primitive.ap &1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x4
[4] __primitive.gt &3 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert 1 6 :: l? x1
[8] return [7] -> 15
[9] __primitive.gt &3 5 :: y x1
[10] __primitive.assert 14 9 :: l? x1
[11] __primitive.sub &3 12 :: i x1
[12] val 1 :: i x1
[13] __primitive.pushr 2 3 11 :: l x1
[14] algorithm.iota2_r0 13 :: l x1
[15] return [10]

___ algorithm.power_step (3 -> 3) ___
[1] var :: ?i x2
[2] var :: ?i x3
[3] var :: ?i x1
[4] __primitive.shiftr &1 5 :: i x1
[5] val 1 :: i x1
[6] __primitive.mul &2 &2 :: i x1
[7] algorithm.acc_odd_power 3 2 1 :: i x1
[8] return [7 6 4]

___ algorithm.reduce_power (2 -> 2) ___
[1] var :: ?i x1
[2] var :: ?i x2
[3] __primitive.shiftr 1 4 :: i x1
[4] val 1 :: i x1
[5] __primitive.mul &2 2 :: i x1
[6] return [5 3]

___ algorithm.sum (1 -> 1) ___
[1] var :: ?l x1
[2] val 0 :: i x1
[3] algorithm.sum_r0 2 1 :: i x1
[4] return [3]

___ algorithm.sum_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?l x1
[2] changing var :: ?i x2
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: i x3
[5] __primitive.seq 7 &4 :: v x1
[6] __primitive.add 4 2 :: i x1
[7] algorithm.sum_r0 6 3 :: v x1
[8] return [5] -> 10
[9] __primitive.otherwise 4 2 :: i x1
[10] return [9]

___ control.!! (3 -> 2) ___
[1] var :: ?y x2
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.assert 2 &1 :: l? x1
[5] __primitive.assert 3 1 :: a x1
[6] return [5 4]

___ control.!!! (4 -> 3) ___
[1] var :: ?y x3
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.assert 2 &1 :: l? x1
[6] __primitive.assert 3 &1 :: a x1
[7] __primitive.assert 4 1 :: a x1
[8] return [7 6 5]

___ control.$ (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] __primitive.ap 2 1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [4]

___ control.$$ (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 2 1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] return [5]

___ control.$$- (3 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 2 1 -> 6 5 :: v? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.dep 4 :: a x1
[7] return [6 5]

___ control.$- (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] __primitive.ap 2 1 -> 5 4 :: v? x2
[4] __primitive.dep 3 :: a x1
[5] __primitive.dep 3 :: a x1
[6] return [5 4]

___ control.$keep (2 -> 2) ___
[1] var :: ?l x2
[2] var :: ?a x1
[3] __primitive.ap 2 &1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [4 1]

___ control.-> (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x2
[3] __primitive.ap &2 1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [4 2]

___ control.bitree (4 -> 1) x2 rec ___
[1] var :: ?l x3
[2] var :: ?l x3
[3] var :: ?l x3
[4] changing var :: ?a x2
[5] __primitive.ap &4 &3 -> 6 8 :: v? x2
[6] __primitive.dep 5 :: a x1
[7] control.bitree 6 &3 &2 &1 :: v x1
[8] __primitive.dep 5 :: a x1
[9] control.bitree 8 3 &2 &1 :: v x1
[10] __primitive.ap 7 9 1 -> 11 :: v? x1
[11] __primitive.dep 10 :: a x2
[12] return [11] -> 16
[13] __primitive.otherwise 11 15 :: a x1
[14] __primitive.ap 4 2 -> 15 :: v? x1
[15] __primitive.dep 14 :: a x1
[16] return [13]

___ control.both (3 -> 2) ___
[1] var :: ?l x2
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 2 &1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 3 1 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [7 5]

___ control.diamond (4 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x2
[3] var :: ?l x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 -> 6 9 :: v? x2
[6] __primitive.dep 5 :: a x1
[7] __primitive.ap 6 &2 -> 8 :: v? x1
[8] __primitive.dep 7 :: a x1
[9] __primitive.dep 5 :: a x1
[10] __primitive.ap 9 2 -> 11 :: v? x1
[11] __primitive.dep 10 :: a x1
[12] __primitive.ap 8 11 1 -> 13 :: v? x1
[13] __primitive.dep 12 :: a x1
[14] return [13]

___ control.dip11 (3 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 5 :: v x1
[5] __primitive.dep 4 :: a x1
[6] return [5 2]

___ control.dip12 (3 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 6 5 :: v x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.dep 4 :: a x1
[7] return [6 5 2]

___ control.dip13 (3 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 7 6 5 :: v x3
[5] __primitive.dep 4 :: a x1
[6] __primitive.dep 4 :: a x1
[7] __primitive.dep 4 :: a x1
[8] return [7 6 5 2]

___ control.dip14 (3 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 9 8 7 6 :: v x4
[6] __primitive.dep 4 :: a x1
[7] __primitive.dep 4 :: a x1
[8] __primitive.dep 4 :: a x1
[9] __primitive.dep 4 :: a x1
[10] return [9 8 7 6 2]

___ control.dip15 (3 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 10 9 8 7 6 :: v x5
[6] __primitive.dep 4 :: a x1
[7] __primitive.dep 4 :: a x1
[8] __primitive.dep 4 :: a x1
[9] __primitive.dep 4 :: a x1
[10] __primitive.dep 4 :: a x1
[11] return [10 9 8 7 6 2]

___ control.dip21 (4 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 1 -> 6 :: v x1
[6] __primitive.dep 5 :: a x1
[7] return [6 2]

___ control.dip22 (4 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 1 -> 7 6 :: v x2
[6] __primitive.dep 5 :: a x1
[7] __primitive.dep 5 :: a x1
[8] return [7 6 2]

___ control.dip23 (4 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 1 -> 9 8 7 :: v x3
[7] __primitive.dep 5 :: a x1
[8] __primitive.dep 5 :: a x1
[9] __primitive.dep 5 :: a x1
[10] return [9 8 7 2]

___ control.dip24 (4 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 1 -> 10 9 8 7 :: v x4
[7] __primitive.dep 5 :: a x1
[8] __primitive.dep 5 :: a x1
[9] __primitive.dep 5 :: a x1
[10] __primitive.dep 5 :: a x1
[11] return [10 9 8 7 2]

___ control.dip25 (4 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 1 -> 11 10 9 8 7 :: v x5
[7] __primitive.dep 5 :: a x1
[8] __primitive.dep 5 :: a x1
[9] __primitive.dep 5 :: a x1
[10] __primitive.dep 5 :: a x1
[11] __primitive.dep 5 :: a x1
[12] return [11 10 9 8 7 2]

___ control.dip31 (5 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 4 3 1 -> 7 :: v x1
[7] __primitive.dep 6 :: a x1
[8] return [7 2]

___ control.dip32 (5 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 4 3 1 -> 9 8 :: v x2
[8] __primitive.dep 6 :: a x1
[9] __primitive.dep 6 :: a x1
[10] return [9 8 2]

___ control.dip33 (5 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 4 3 1 -> 10 9 8 :: v x3
[8] __primitive.dep 6 :: a x1
[9] __primitive.dep 6 :: a x1
[10] __primitive.dep 6 :: a x1
[11] return [10 9 8 2]

___ control.dip34 (5 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 4 3 1 -> 11 10 9 8 :: v x4
[8] __primitive.dep 6 :: a x1
[9] __primitive.dep 6 :: a x1
[10] __primitive.dep 6 :: a x1
[11] __primitive.dep 6 :: a x1
[12] return [11 10 9 8 2]

___ control.dip35 (5 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 4 3 1 -> 12 11 10 9 8 :: v x5
[8] __primitive.dep 6 :: a x1
[9] __primitive.dep 6 :: a x1
[10] __primitive.dep 6 :: a x1
[11] __primitive.dep 6 :: a x1
[12] __primitive.dep 6 :: a x1
[13] return [12 11 10 9 8 2]

___ control.dip41 (6 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 9 :: v x1
[9] __primitive.dep 7 :: a x1
[10] return [9 2]

___ control.dip42 (6 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 10 9 :: v x2
[9] __primitive.dep 7 :: a x1
[10] __primitive.dep 7 :: a x1
[11] return [10 9 2]

___ control.dip43 (6 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 11 10 9 :: v x3
[9] __primitive.dep 7 :: a x1
[10] __primitive.dep 7 :: a x1
[11] __primitive.dep 7 :: a x1
[12] return [11 10 9 2]

___ control.dip44 (6 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 12 11 10 9 :: v x4
[9] __primitive.dep 7 :: a x1
[10] __primitive.dep 7 :: a x1
[11] __primitive.dep 7 :: a x1
[12] __primitive.dep 7 :: a x1
[13] return [12 11 10 9 2]

___ control.dip45 (6 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 13 12 11 10 9 :: v x5
[9] __primitive.dep 7 :: a x1
[10] __primitive.dep 7 :: a x1
[11] __primitive.dep 7 :: a x1
[12] __primitive.dep 7 :: a x1
[13] __primitive.dep 7 :: a x1
[14] return [13 12 11 10 9 2]

___ control.dip51 (7 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 10 :: v x1
[10] __primitive.dep 8 :: a x1
[11] return [10 2]

___ control.dip52 (7 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 11 10 :: v x2
[10] __primitive.dep 8 :: a x1
[11] __primitive.dep 8 :: a x1
[12] return [11 10 2]

___ control.dip53 (7 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 12 11 10 :: v x3
[10] __primitive.dep 8 :: a x1
[11] __primitive.dep 8 :: a x1
[12] __primitive.dep 8 :: a x1
[13] return [12 11 10 2]

___ control.dip54 (7 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 13 12 11 10 :: v x4
[10] __primitive.dep 8 :: a x1
[11] __primitive.dep 8 :: a x1
[12] __primitive.dep 8 :: a x1
[13] __primitive.dep 8 :: a x1
[14] return [13 12 11 10 2]

___ control.dip55 (7 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 14 13 12 11 10 :: v x5
[10] __primitive.dep 8 :: a x1
[11] __primitive.dep 8 :: a x1
[12] __primitive.dep 8 :: a x1
[13] __primitive.dep 8 :: a x1
[14] __primitive.dep 8 :: a x1
[15] return [14 13 12 11 10 2]

___ control.either (3 -> 1) x2 ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?l x2
[4] __primitive.ap &3 -> 9 5 :: v? x2
[5] __primitive.dep 4 :: y x1
[6] __primitive.eq_s 5 7 :: y x1
[7] val Right :: y x1
[8] __primitive.assert 9 6 :: a? x1
[9] __primitive.dep 4 :: a x1
[10] __primitive.ap 8 1 -> 11 :: v? x1
[11] __primitive.dep 10 :: a x1
[12] return [11] -> 21
[13] __primitive.ap 3 -> 18 14 :: v? x2
[14] __primitive.dep 13 :: y x1
[15] __primitive.eq_s 14 16 :: y x1
[16] val Left :: y x1
[17] __primitive.assert 18 15 :: a? x1
[18] __primitive.dep 13 :: a x1
[19] __primitive.ap 17 2 -> 20 :: v? x1
[20] __primitive.dep 19 :: a x1
[21] return [20]

___ control.fork (3 -> 2) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?a x2
[4] __primitive.ap &3 1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 3 2 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [7 5]

___ control.if (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?a x2
[4] __primitive.ap &3 2 -> 5 :: v? x1
[5] __primitive.dep 4 :: y x1
[6] __primitive.assert 8 5 :: a? x1
[7] __primitive.ap 3 1 -> 8 :: v? x1
[8] __primitive.dep 7 :: a x1
[9] return [6]

___ control.ifdo (2 -> 1) x2 ___
[1] var :: ?l x2
[2] var :: ?a x3
[3] __primitive.ap &2 &1 -> 6 4 :: v? x2
[4] __primitive.dep 3 :: y x1
[5] __primitive.assert 6 4 :: a? x1
[6] __primitive.dep 3 :: a x1
[7] return [5] -> 14
[8] __primitive.ap &2 2 1 -> 10 X 11 :: v x2
[10] __primitive.dep 8 :: a x1
[11] __primitive.dep 8 :: y x1
[12] __primitive.not 11 :: y x1
[13] __primitive.assert 10 12 :: a? x1
[14] return [13]

___ control.ifte (3 -> 1) x2 ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?y x2
[4] __primitive.not &3 :: y x1
[5] __primitive.assert 1 4 :: a? x1
[6] return [5] -> 8
[7] __primitive.assert 2 3 :: a? x1
[8] return [7]

___ control.in2 (2 -> 3) ___
[1] var :: ?a x2
[2] var :: ?a x2
[3] __primitive.quote &2 &1 :: l x1
[4] return [2 1 3]

___ control.in3 (3 -> 4) ___
[1] var :: ?a x2
[2] var :: ?a x2
[3] var :: ?a x2
[4] __primitive.quote &3 &2 &1 :: l x1
[5] return [3 2 1 4]

___ control.iterate (3 -> 1) x2 rec ___
[1] var :: ?l x3
[2] var :: ?l x2
[3] changing var :: ?a x4
[4] __primitive.ap &3 &1 -> 5 :: v? x1
[5] __primitive.dep 4 :: y x1
[6] __primitive.ap &3 &1 -> 7 :: v? x1
[7] __primitive.dep 6 :: y x1
[8] __primitive.not 7 :: y x1
[9] __primitive.assert &3 8 :: a? x1
[10] return [9] -> 15
[11] __primitive.assert 14 5 :: a? x1
[12] __primitive.ap 3 &2 -> 13 :: v x1
[13] __primitive.dep 12 :: a x1
[14] control.iterate 13 2 1 :: a x1
[15] return [11]

___ control.maybe (3 -> 1) x2 ___
[1] var :: ?a x2
[2] var :: ?a x2
[3] var :: ?l x2
[4] __primitive.ap &1 &2 &3 -> 6 19 15 :: v x3
[6] __primitive.dep 4 :: l x1
[7] __primitive.ap 1 2 3 -> 13 X 9 :: v x2
[9] __primitive.dep 7 :: y x1
[10] __primitive.eq_s 9 11 :: y x1
[11] val Nothing :: y x1
[12] __primitive.assert 13 10 :: a? x1
[13] __primitive.dep 7 :: a x1
[14] return [12] -> 22
[15] __primitive.dep 4 :: y x1
[16] __primitive.eq_s 15 17 :: y x1
[17] val Just :: y x1
[18] __primitive.assert 19 16 :: a? x1
[19] __primitive.dep 4 :: a x1
[20] __primitive.ap 18 6 -> 21 :: v? x1
[21] __primitive.dep 20 :: a x1
[22] return [21]

___ control.para (4 -> 2) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 3 1 -> 6 :: v? x1
[6] __primitive.dep 5 :: a x1
[7] __primitive.ap 4 2 -> 8 :: v? x1
[8] __primitive.dep 7 :: a x1
[9] return [8 6]

___ control.peek (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x2
[3] __primitive.ap &2 1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [2 4]

___ control.seq2 (3 -> 2) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.seq 2 1 :: l x2
[5] __primitive.seq 3 &4 :: a x1
[6] return [5 4]

___ control.times (3 -> 1) ___
[1] var :: ?i x1
[2] var :: ?l x1
[3] var :: ?a x1
[4] control.times_r0 3 2 1 :: l x1
[5] return [4]

___ control.times_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] var :: ?l x2
[3] changing var :: ?a x2
[4] __primitive.gt &1 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert &3 6 :: l? x1
[8] return [7] -> 16
[9] __primitive.gt &1 5 :: y x1
[10] __primitive.assert 15 9 :: l? x1
[11] __primitive.sub 1 12 :: i x1
[12] val 1 :: i x1
[13] __primitive.ap 3 &2 -> 14 :: v? x1
[14] __primitive.dep 13 :: a x1
[15] control.times_r0 14 2 11 :: l x1
[16] return [10]

___ control.times_step (3 -> 3) ___
[1] var :: ?i x1
[2] var :: ?l x2
[3] var :: ?a x1
[4] __primitive.sub 1 5 :: i x1
[5] val 1 :: i x1
[6] __primitive.ap 3 &2 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [7 2 4]

___ control.while (2 -> 1) x2 rec ___
[1] var :: ?l x2
[2] changing var :: ?a x2
[3] __primitive.ap &2 &1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x3
[5] __primitive.seq 6 &4 :: v x1
[6] control.while 4 1 :: v x1
[7] return [5] -> 9
[8] __primitive.otherwise 4 2 :: a x1
[9] return [8]

___ gen_ed.count_lines (2 -> 3) ___
[1] var :: ?o x1
[2] var :: ?y x1
[3] val 0 :: i x1
[4] gen_ed.count_lines_r0 2 1 3 -> 7 6 :: y x3
[6] __primitive.dep 4 :: a x1
[7] __primitive.dep 4 :: a x1
[8] return [4 7 6]

___ gen_ed.count_lines_r0 (3 -> 3) x2 rec ___
[1] changing var :: ?i x2
[2] changing var :: ?o x1
[3] changing var :: ?y x1
[4] __primitive.read 3 2 -> 12 5 :: y x3
[5] __primitive.dep 4 :: s x2
[6] __primitive.eq_str &5 &7 :: y x1
[7] val "" :: s x2
[8] __primitive.not 6 :: y x4
[9] __primitive.not &8 :: y x3
[10] __primitive.assert &1 &9 :: i? x1
[11] __primitive.assert 14 &9 :: o x1
[12] __primitive.dep 4 :: o x1.
[13] __primitive.unread 4 12 5 -> 14 :: y x3.
[14] __primitive.dep 13 :: o x2.
[15] __primitive.assert 13 9 :: y x1
[16] return [15 11 10] -> 29
[17] __primitive.assert 23 &8 :: y? x1
[18] io.getline_loop 13 14 7 -> 20 X :: y x2
[20] __primitive.dep 18 :: o x1
[21] __primitive.add 1 22 :: i x1
[22] val 1 :: i x1
[23] gen_ed.count_lines_r0 18 20 21 -> 26 28 :: y x3
[25] __primitive.assert 26 &8 :: o x1
[26] __primitive.dep 23 :: o x1
[27] __primitive.assert 28 8 :: i x1
[28] __primitive.dep 23 :: i x1
[29] return [17 25 27]

___ gen_ed.count_lines_test (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.open 1 3 -> 4 :: y x2
[3] val "stream,in:std" :: s x1
[4] __primitive.dep 2 :: o x1
[5] io.getline_loop 2 4 7 -> 8 10 :: y x3
[7] val "" :: s x1
[8] __primitive.dep 5 :: o x1
[9] __primitive.close 5 8 :: y x1
[10] __primitive.dep 5 :: s x1
[11] __primitive.strcat 12 10 :: s x1
[12] val "in:" :: s x1
[13] __primitive.open 9 11 -> 14 :: y x2
[14] __primitive.dep 13 :: o x1
[15] gen_ed.count_lines_r0 13 14 17 -> 18 23 :: y x3
[17] val 0 :: i x1
[18] __primitive.dep 15 :: o x1
[19] __primitive.close 15 18 :: y x1
[20] __primitive.open 19 21 -> 22 :: y x2
[21] val "stream,out:std" :: s x1
[22] __primitive.dep 20 :: o x1
[23] __primitive.dep 15 :: i x1
[24] __primitive.to_string 23 :: s x1
[25] __primitive.write 20 22 24 -> 26 :: y x2
[26] __primitive.dep 25 :: o x1
[27] __primitive.close 25 26 :: y x1
[28] return [27]

___ gen_ed.dl_test (1 -> 1) ___
[1] var :: ?i x1
[2] __primitive.add 1 3 :: i x1
[3] val 3 :: i x1
[4] gen_ed.dl_test_r0 2 :: i x1
[5] return [4]

___ gen_ed.dl_test_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] __primitive.lt &1 3 :: y x2
[3] val 10 :: i x1
[4] __primitive.not &2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 11
[7] __primitive.assert 10 2 :: i? x1
[8] __primitive.add 1 9 :: i x1
[9] val 3 :: i x1
[10] gen_ed.dl_test_r0 8 :: i x1
[11] return [7]

___ gen_ed.dl_test2 (1 -> 1) ___
[1] var :: ?i x1
[2] __primitive.add 1 3 :: i x1
[3] val 3 :: i x1
[4] gen_ed.dl_test2_r0 2 :: i x1
[5] return [4]

___ gen_ed.dl_test2_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] __primitive.lt &1 3 :: y x2
[3] val 10 :: i x1
[4] __primitive.not &2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 11
[7] __primitive.assert 10 2 :: i? x1
[8] __primitive.add 1 9 :: i x1
[9] val 3 :: i x1
[10] gen_ed.dl_test2_r0 8 :: i x1
[11] return [7]

___ gen_ed.dl_test3 (2 -> 3) ___
[1] var :: ?o x1
[2] var :: ?y x1
[3] __primitive.read 2 1 -> 6 4 :: y x3
[4] __primitive.dep 3 :: s x1
[5] val "" :: s x1
[6] __primitive.dep 3 :: o x1
[7] gen_ed.dl_test3_r0 3 6 5 4 -> 10 9 :: y x3
[9] __primitive.dep 7 :: a x1
[10] __primitive.dep 7 :: a x1
[11] return [7 10 9]

___ gen_ed.dl_test3_r0 (4 -> 3) x2 rec ___
[1] changing var :: ?s x2
[2] changing var :: ?s x1
[3] changing var :: ?o x2
[4] changing var :: ?y x2
[5] __primitive.eq_str &1 6 :: y x1
[6] val "" :: s x1
[7] __primitive.not 5 :: y x4
[8] __primitive.not &7 :: y x3
[9] __primitive.assert &10 &8 :: s? x1
[10] __primitive.strcat 2 1 :: s x2.
[11] __primitive.assert 3 &8 :: o x1
[12] __primitive.assert 4 8 :: y x1
[13] return [12 11 9] -> 24
[14] __primitive.assert 18 &7 :: y? x1
[15] __primitive.read 4 3 -> 17 16 :: y x3
[16] __primitive.dep 15 :: s x1
[17] __primitive.dep 15 :: o x1
[18] gen_ed.dl_test3_r0 15 17 10 16 -> 21 23 :: y x3
[20] __primitive.assert 21 &7 :: o x1
[21] __primitive.dep 18 :: o x1
[22] __primitive.assert 23 7 :: s x1
[23] __primitive.dep 18 :: s x1
[24] return [14 20 22]

___ gen_ed.do_linear (3 -> 1) ___
[1] var :: ?a x1
[2] var :: ?l x2
[3] var :: ?a x1
[4] __primitive.ap 3 &2 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] gen_ed.iterate_linear 5 2 1 :: l x1
[7] return [6]

___ gen_ed.dupu (2 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x2
[3] return [&2 2 1]

___ gen_ed.il_test (1 -> 1) ___
[1] var :: ?i x1
[2] gen_ed.il_test_r0 1 :: i x1
[3] return [2]

___ gen_ed.il_test_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] __primitive.lt &1 3 :: y x2
[3] val 10 :: i x1
[4] __primitive.not &2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 11
[7] __primitive.assert 10 2 :: i? x1
[8] __primitive.add 1 9 :: i x1
[9] val 3 :: i x1
[10] gen_ed.il_test_r0 8 :: i x1
[11] return [7]

___ gen_ed.iterate_linear (3 -> 1) x2 rec ___
[1] var :: ?l x2
[2] var :: ?l x2
[3] changing var :: ?a x1
[4] __primitive.ap 3 &1 -> 8 5 :: v? x2
[5] __primitive.dep 4 :: y x2
[6] __primitive.not &5 :: y x1
[7] __primitive.assert &8 6 :: l? x1
[8] __primitive.dep 4 :: a x2.
[9] return [7] -> 14
[10] __primitive.assert 13 5 :: l x1
[11] __primitive.ap 8 &2 -> 12 :: v? x1
[12] __primitive.dep 11 :: a x1
[13] gen_ed.iterate_linear 12 2 1 :: l x1
[14] return [10]

___ gen_ed.read_list (2 -> 3) ___
[1] var :: ?o x1
[2] var :: ?y x1
[3] [] :: l x1
[4] gen_ed.read_list_r0 2 1 3 -> 7 6 :: y x3
[6] __primitive.dep 4 :: a x1
[7] __primitive.dep 4 :: a x1
[8] return [4 7 6]

___ gen_ed.read_list_r0 (3 -> 3) x2 rec ___
[1] changing var :: ?l x2
[2] changing var :: ?o x1
[3] changing var :: ?y x1
[4] __primitive.read 3 2 -> 12 5 :: y x3
[5] __primitive.dep 4 :: s x2
[6] __primitive.eq_str &5 &7 :: y x1
[7] val "" :: s x2
[8] __primitive.not 6 :: y x4
[9] __primitive.not &8 :: y x3
[10] __primitive.assert &1 &9 :: l? x1
[11] __primitive.assert 14 &9 :: o x1
[12] __primitive.dep 4 :: o x1.
[13] __primitive.unread 4 12 5 -> 14 :: y x3.
[14] __primitive.dep 13 :: o x2.
[15] __primitive.assert 13 9 :: y x1
[16] return [15 11 10] -> 29
[17] __primitive.assert 23 &8 :: y? x1
[18] io.getline_loop 13 14 7 -> 20 21 :: y x3
[20] __primitive.dep 18 :: o x1
[21] __primitive.dep 18 :: s x1
[22] __primitive.ap 21 1 :: l x1
[23] gen_ed.read_list_r0 18 20 22 -> 26 28 :: y x3
[25] __primitive.assert 26 &8 :: o x1
[26] __primitive.dep 23 :: o x1
[27] __primitive.assert 28 8 :: l x1
[28] __primitive.dep 23 :: l x1
[29] return [17 25 27]

___ gen_ed.reverse_list (3 -> 3) ___
[1] var :: ?o x1
[2] var :: ?o x1
[3] var :: ?y x1
[4] gen_ed.read_list_r0 3 2 &6 -> 11 7 :: y x3
[6] [] :: l x2
[7] __primitive.dep 4 :: l x1
[8] list.reverse_r0 6 7 :: l x1
[9] gen_ed.write_list_r0 4 1 8 -> 10 :: y x2
[10] __primitive.dep 9 :: o x1
[11] __primitive.dep 4 :: o x1
[12] return [9 11 10]

___ gen_ed.sum_lines (2 -> 3) ___
[1] var :: ?o x1
[2] var :: ?y x1
[3] val 0 :: i x1
[4] gen_ed.sum_lines_r0 2 1 3 -> 7 6 :: y x3
[6] __primitive.dep 4 :: a x1
[7] __primitive.dep 4 :: a x1
[8] return [4 7 6]

___ gen_ed.sum_lines_r0 (3 -> 3) x2 rec ___
[1] changing var :: ?i x2
[2] changing var :: ?o x1
[3] changing var :: ?y x1
[4] __primitive.read 3 2 -> 12 5 :: y x3
[5] __primitive.dep 4 :: s x2
[6] __primitive.eq_str &5 &7 :: y x1
[7] val "" :: s x2
[8] __primitive.not 6 :: y x4
[9] __primitive.not &8 :: y x3
[10] __primitive.assert &1 &9 :: i? x1
[11] __primitive.assert 14 &9 :: o x1
[12] __primitive.dep 4 :: o x1.
[13] __primitive.unread 4 12 5 -> 14 :: y x3.
[14] __primitive.dep 13 :: o x2.
[15] __primitive.assert 13 9 :: y x1
[16] return [15 11 10] -> 30
[17] __primitive.assert 24 &8 :: y? x1
[18] io.getline_loop 13 14 7 -> 20 21 :: y x3
[20] __primitive.dep 18 :: o x1
[21] __primitive.dep 18 :: s x1
[22] __primitive.from_string 21 :: i? x1
[23] __primitive.add 22 1 :: i x1
[24] gen_ed.sum_lines_r0 18 20 23 -> 27 29 :: y x3
[26] __primitive.assert 27 &8 :: o x1
[27] __primitive.dep 24 :: o x1
[28] __primitive.assert 29 8 :: i x1
[29] __primitive.dep 24 :: i x1
[30] return [17 26 28]

___ gen_ed.sum_lines_test (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.open 1 3 -> 4 :: y x2
[3] val "stream,in:std" :: s x1
[4] __primitive.dep 2 :: o x1
[5] io.getline_loop 2 4 7 -> 8 10 :: y x3
[7] val "" :: s x1
[8] __primitive.dep 5 :: o x1
[9] __primitive.close 5 8 :: y x1
[10] __primitive.dep 5 :: s x1
[11] __primitive.strcat 12 10 :: s x1
[12] val "in:" :: s x1
[13] __primitive.open 9 11 -> 14 :: y x2
[14] __primitive.dep 13 :: o x1
[15] gen_ed.sum_lines_r0 13 14 17 -> 18 23 :: y x3
[17] val 0 :: i x1
[18] __primitive.dep 15 :: o x1
[19] __primitive.close 15 18 :: y x1
[20] __primitive.open 19 21 -> 22 :: y x2
[21] val "stream,out:std" :: s x1
[22] __primitive.dep 20 :: o x1
[23] __primitive.dep 15 :: i x1
[24] __primitive.to_string 23 :: s x1
[25] __primitive.write 20 22 24 -> 26 :: y x2
[26] __primitive.dep 25 :: o x1
[27] __primitive.close 25 26 :: y x1
[28] return [27]

___ gen_ed.write_list (3 -> 2) ___
[1] var :: ?l x1
[2] var :: ?o x1
[3] var :: ?y x1
[4] gen_ed.write_list_r0 3 2 1 -> 5 :: y x2
[5] __primitive.dep 4 :: a x1
[6] return [4 5]

___ gen_ed.write_list_r0 (3 -> 2) x2 rec ___
[1] changing var :: ?l x1
[2] changing var :: ?o x2
[3] changing var :: ?y x2
[4] __primitive.ap 1 -> 5 :: l? x2
[5] __primitive.dep 4 :: s x4
[6] __primitive.seq 13 &5 :: v x2
[7] __primitive.write &3 &2 &5 -> 8 :: y x2
[8] __primitive.dep 7 :: o x1
[9] __primitive.write 7 8 10 -> 11 :: y x2
[10] val "\n" :: s x1
[11] __primitive.dep 9 :: o x1
[12] gen_ed.write_list_r0 9 11 4 -> 13 :: v x2
[13] __primitive.dep 12 :: v x1
[14] __primitive.otherwise &5 2 :: o x1
[15] __primitive.otherwise 5 3 :: y x1
[16] return [15 14] -> 18
[17] __primitive.seq 12 &6 :: v x1
[18] return [17 6]

___ io.getline (2 -> 3) ___
[1] var :: ?o x1
[2] var :: ?y x1
[3] io.getline_loop 2 1 5 -> 7 6 :: y x3
[5] val "" :: s x1
[6] __primitive.dep 3 :: s x1
[7] __primitive.dep 3 :: o x1
[8] return [3 7 6]

___ io.getline_loop (3 -> 3) x3 rec ___
[1] changing var :: ?s x3
[2] changing var :: ?o x1
[3] changing var :: ?y x1
[4] __primitive.read 3 2 -> 10 5 :: y x5
[5] __primitive.dep 4 :: s x3
[6] __primitive.strsplit &5 7 -> 11 :: s? x9
[7] val "\n" :: s x1
[8] __primitive.seq &6 6 :: s x3
[9] __primitive.seq 14 &8 :: o x1
[10] __primitive.dep 4 :: o x3.
[11] __primitive.dep 6 :: s x1
[12] __primitive.strcat 1 11 :: s x1
[13] __primitive.unread 4 10 12 -> 14 :: y x2
[14] __primitive.dep 13 :: o x1
[15] __primitive.seq 13 &8 :: y x1
[16] return [15 9 8] -> 37
[17] __primitive.otherwise &6 21 :: y x1
[18] __primitive.eq_str &5 19 :: y x4
[19] val "" :: s x1
[20] __primitive.not &18 :: y x3
[21] __primitive.assert 23 &20 :: y? x1
[22] __primitive.strcat &1 5 :: s x1
[23] io.getline_loop &4 &10 22 -> 29 34 :: y x3
[25] __primitive.otherwise &6 26 :: y x1
[26] __primitive.assert 4 &18 :: y x1
[27] __primitive.otherwise &6 28 :: o x1
[28] __primitive.assert 29 &20 :: o x1
[29] __primitive.dep 23 :: o x1
[30] __primitive.otherwise &6 31 :: o x1
[31] __primitive.assert 10 &18 :: o x1
[32] __primitive.otherwise &6 33 :: s x1
[33] __primitive.assert 34 20 :: s x1
[34] __primitive.dep 23 :: s x1
[35] __primitive.otherwise 6 36 :: s x1
[36] __primitive.assert 1 18 :: s x1
[37] return [17 27 32] -> 38
[38] return [25 30 35]

___ io.getline_std (1 -> 2) ___
[1] var :: ?y x1
[2] __primitive.open 1 3 -> 4 :: y x2
[3] val "stream,in:std" :: s x1
[4] __primitive.dep 2 :: o x1
[5] io.getline_loop 2 4 7 -> 9 8 :: y x3
[7] val "" :: s x1
[8] __primitive.dep 5 :: s x1
[9] __primitive.dep 5 :: o x1
[10] __primitive.close 5 9 :: y x1
[11] return [10 8]

___ io.is_eof (2 -> 3) ___
[1] var :: ?o x1
[2] var :: ?y x1
[3] __primitive.read 2 1 -> 7 4 :: y x3
[4] __primitive.dep 3 :: s x2
[5] __primitive.eq_str &4 6 :: y x1
[6] val "" :: s x1
[7] __primitive.dep 3 :: o x1
[8] __primitive.unread 3 7 4 -> 9 :: y x2
[9] __primitive.dep 8 :: o x1
[10] return [8 9 5]

___ io.read_std (1 -> 2) ___
[1] var :: ?y x1
[2] __primitive.open 1 3 -> 4 :: y x2
[3] val "stream,in:std" :: s x1
[4] __primitive.dep 2 :: o x1
[5] __primitive.read 2 4 -> 7 6 :: y x3
[6] __primitive.dep 5 :: s x1
[7] __primitive.dep 5 :: o x1
[8] __primitive.close 5 7 :: y x1
[9] return [8 6]

___ io.unread_std (2 -> 1) ___
[1] var :: ?s x1
[2] var :: ?y x1
[3] __primitive.open 2 4 -> 5 :: y x2
[4] val "stream,in:std" :: s x1
[5] __primitive.dep 3 :: o x1
[6] __primitive.unread 3 5 1 -> 7 :: y x2
[7] __primitive.dep 6 :: o x1
[8] __primitive.close 6 7 :: y x1
[9] return [8]

___ io.write_std (2 -> 1) ___
[1] var :: ?s x1
[2] var :: ?y x1
[3] __primitive.open 2 4 -> 5 :: y x2
[4] val "stream,out:std" :: s x1
[5] __primitive.dep 3 :: o x1
[6] __primitive.write 3 5 1 -> 7 :: y x2
[7] __primitive.dep 6 :: o x1
[8] __primitive.close 6 7 :: y x1
[9] return [8]

___ list.@ (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] list.dropl_r0 2 1 :: l x1
[4] __primitive.ap 3 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] return [5]

___ list.assoc (2 -> 1) x2 rec ___
[1] var :: ?s x2
[2] changing var :: ?l x1
[3] __primitive.ap 2 -> 4 :: l? x2
[4] __primitive.dep 3 :: l x1
[5] __primitive.ap 4 -> 9 6 :: v? x2
[6] __primitive.dep 5 :: s x1
[7] __primitive.eq_str 6 &1 :: y x2
[8] __primitive.assert 9 &7 :: a? x1
[9] __primitive.dep 5 :: a x1
[10] return [8] -> 14
[11] __primitive.not 7 :: y x1
[12] __primitive.assert 13 11 :: a? x1
[13] list.assoc 3 1 :: a x1
[14] return [12]

___ list.assoc_step (2 -> 3) ___
[1] var :: ?s x1
[2] var :: ?l x1
[3] __primitive.ap 2 -> 4 :: l? x2
[4] __primitive.dep 3 :: l x1
[5] __primitive.ap 4 -> 8 6 :: v? x2
[6] __primitive.dep 5 :: s x1
[7] __primitive.eq_str 6 1 :: y x1
[8] __primitive.dep 5 :: a x1
[9] return [3 8 7]

___ list.dropl (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?l x1
[3] list.dropl_r0 2 1 :: l x1
[4] return [3]

___ list.dropl_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] changing var :: ?l x2
[3] __primitive.gt &1 &4 :: y x1
[4] val 0 :: i x2
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &2 5 :: l? x1
[7] return [6] -> 14
[8] __primitive.gt &1 4 :: y x1
[9] __primitive.assert 13 8 :: l? x1
[10] __primitive.sub 1 11 :: i x1
[11] val 1 :: i x1
[12] __primitive.ap 2 -> X :: l? x1
[13] list.dropl_r0 12 10 :: l x1
[14] return [9]

___ list.filter (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] [] :: l x1
[4] list.filter_r0 1 2 3 :: l x1
[5] return [4]

___ list.filter_r0 (3 -> 1) x3 rec ___
[1] changing var :: ?l x2
[2] changing var :: ?l x2
[3] var :: ?l x3
[4] __primitive.ap &2 -> 5 :: l? x3
[5] __primitive.dep 4 :: a x4
[6] __primitive.seq 11 &5 :: v x2
[7] __primitive.ap &5 &3 -> 8 :: v? x1
[8] __primitive.dep 7 :: y x2
[9] __primitive.not &8 :: y x1
[10] __primitive.assert &1 9 :: l? x1
[11] list.filter_r0 3 4 10 :: v x1
[12] return [6] -> 17
[13] __primitive.assert 15 8 :: l? x1
[14] __primitive.seq 16 6 :: v x1
[15] __primitive.ap 5 1 :: l x1
[16] list.filter_r0 3 4 13 :: v x1
[17] return [14] -> 19
[18] __primitive.otherwise 5 2 :: l x1
[19] return [18]

___ list.filter_step (3 -> 2) x2 ___
[1] var :: ?l x1
[2] var :: ?l x2
[3] var :: ?l x1
[4] __primitive.ap 3 -> 5 :: l? x3
[5] __primitive.dep 4 :: a x2
[6] __primitive.ap &5 1 -> 7 :: v? x1
[7] __primitive.dep 6 :: y x2
[8] __primitive.not &7 :: y x1
[9] __primitive.assert &2 8 :: l? x1
[10] return [4 9] -> 13
[11] __primitive.assert 12 7 :: l? x1
[12] __primitive.ap 5 2 :: l x1
[13] return [4 11]

___ list.foldl (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?l x1
[4] [] :: l x1
[5] list.foldl_r0 1 3 4 :: l x1
[6] __primitive.ap 2 5 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [7]

___ list.foldl_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?l x2
[2] changing var :: ?l x1
[3] var :: ?l x2
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x3
[6] __primitive.seq 9 &5 :: v x1
[7] __primitive.ap 5 &3 :: l x1
[8] __primitive.compose 7 1 :: l x1
[9] list.foldl_r0 3 4 8 :: v x1
[10] return [6] -> 12
[11] __primitive.otherwise 5 1 :: l x1
[12] return [11]

___ list.foldl_step (3 -> 3) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?l x2
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 5 &3 :: l x1
[7] __primitive.compose 6 1 :: l x1
[8] return [3 4 7]

___ list.foldr (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?l x1
[4] list.foldr_r0 1 3 2 :: l x1
[5] return [4]

___ list.foldr_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?a x2
[2] changing var :: ?l x1
[3] var :: ?l x2
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x3
[6] __primitive.seq 9 &5 :: v x1
[7] __primitive.ap &5 &1 &3 -> 8 :: v? x1
[8] __primitive.dep 7 :: a x1
[9] list.foldr_r0 3 4 8 :: v x1
[10] return [6] -> 12
[11] __primitive.otherwise 5 1 :: l x1
[12] return [11]

___ list.foldr_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?a x2
[2] changing var :: ?l x1
[3] var :: ?l x2
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x3
[6] __primitive.seq 9 &5 :: v x1
[7] __primitive.ap &5 &1 &3 -> 8 :: v? x1
[8] __primitive.dep 7 :: a x1
[9] list.foldr_r0 3 4 8 :: v x1
[10] return [6] -> 12
[11] __primitive.otherwise 5 1 :: l x1
[12] return [11]

___ list.foldr_step (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?l x1
[3] var :: ?l x2
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 5 1 &3 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [3 4 7]

___ list.half_rem (1 -> 2) ___
[1] var :: ?i x2
[2] __primitive.div &1 3 :: i? x2
[3] val 2 :: i x1
[4] __primitive.sub 1 &2 :: i x1
[5] return [4 2]

___ list.head (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: v? x1
[3] __primitive.dep 2 :: a x1
[4] return [3]

___ list.iteratel (2 -> 1) ___
[1] var :: ?l x2
[2] var :: ?a x2
[3] __primitive.ap &2 &1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] list.iteratel_q0 2 1 4 :: l x1
[6] return [5]

___ list.iteratel_q0 (3 -> 1) ___
[1] var :: ?a x1
[2] var :: ?l x1
[3] var :: ?a x1
[4] list.iteratel 1 2 :: v x1
[5] __primitive.ap 4 3 6 :: l x1
[6] [] :: l x1
[7] return [5]

___ list.length (1 -> 1) ___
[1] var :: ?l x1
[2] val 0 :: i x1
[3] list.length_r0 2 1 :: i x1
[4] return [3]

___ list.length_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?l x1
[2] changing var :: ?i x2
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x2
[5] __primitive.seq 8 4 :: v x1
[6] __primitive.add 2 7 :: i x1
[7] val 1 :: i x1
[8] list.length_r0 6 3 :: v x1
[9] return [5] -> 11
[10] __primitive.otherwise 4 2 :: i x1
[11] return [10]

___ list.listdup (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] [] :: l x1
[4] list.listdup_r0 2 1 3 :: l x1
[5] return [4]

___ list.listdup_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?l x2
[2] var :: ?i x2
[3] changing var :: ?i x3
[4] __primitive.gt &3 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert &1 6 :: l? x1
[8] return [7] -> 15
[9] __primitive.gt &3 5 :: y x1
[10] __primitive.assert 14 9 :: l? x1
[11] __primitive.sub 3 12 :: i x1
[12] val 1 :: i x1
[13] __primitive.ap &2 1 :: l x1
[14] list.listdup_r0 11 2 13 :: l x1
[15] return [10]

___ list.map (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] [] :: l x1
[4] list.map_r0 2 3 1 :: l x1
[5] return [4]

___ list.map_r0 (3 -> 1) x2 rec ___
[1] var :: ?l x2
[2] changing var :: ?l x2
[3] changing var :: ?l x1
[4] __primitive.ap 3 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x3
[6] __primitive.seq 9 &5 :: v x1
[7] __primitive.ap 5 &1 :: l x1
[8] __primitive.compose 7 2 :: l x1
[9] list.map_r0 4 8 1 :: v x1
[10] return [6] -> 12
[11] __primitive.otherwise 5 2 :: l x1
[12] return [11]

___ list.merge (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] list.merge_loop 2 1 4 :: l x1
[4] [] :: l x1
[5] return [3]

___ list.merge_loop (3 -> 1) x4 rec ___
[1] changing var :: ?l x4
[2] changing var :: ?l x5
[3] changing var :: ?l x3
[4] __primitive.ap &3 -> 5 :: l? x2
[5] __primitive.dep 4 :: i x3
[6] __primitive.ap &2 -> 7 :: v? x1
[7] __primitive.dep 6 :: i x1
[8] __primitive.lte &5 7 :: y x4
[9] __primitive.assert 4 &8 :: l? x1
[10] __primitive.assert &2 &8 :: l? x1
[11] __primitive.assert &5 &8 :: i? x2
[12] __primitive.seq 13 &11 :: l x1
[13] __primitive.ap 11 1 :: l x1
[14] list.merge_loop 9 10 12 :: v x1
[15] return [14] -> 25
[16] __primitive.not 8 :: y x3
[17] __primitive.assert 19 &16 :: a? x2
[18] __primitive.ap &2 -> 19 :: l? x2
[19] __primitive.dep 18 :: a x1
[20] __primitive.seq 23 &17 :: l x1
[21] __primitive.assert 18 &16 :: l? x1
[22] __primitive.assert &3 16 :: l? x1
[23] __primitive.ap 17 1 :: l x1
[24] list.merge_loop 22 21 20 :: v x1
[25] return [24] -> 28
[26] __primitive.otherwise 5 27 :: l x1
[27] list.merge_loop_q0 1 2 :: l x1
[28] return [26] -> 33
[29] __primitive.ap 2 -> 30 :: v? x1
[30] __primitive.dep 29 :: a x1
[31] __primitive.otherwise 30 32 :: l x1
[32] list.merge_loop_q0 1 3 :: l x1
[33] return [31]

___ list.merge_loop_q0 (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] __primitive.compose 1 2 :: l x1
[4] return [3]

___ list.merge_step (3 -> 3) x2 ___
[1] var :: ?l x2
[2] var :: ?l x3
[3] var :: ?l x2
[4] __primitive.ap &3 -> 5 :: l? x2
[5] __primitive.dep 4 :: i x2
[6] __primitive.ap &2 -> 7 :: v? x1
[7] __primitive.dep 6 :: i x1
[8] __primitive.lte &5 7 :: y x4
[9] __primitive.assert 5 &8 :: i? x2
[10] __primitive.seq 13 &9 :: l x1
[11] __primitive.assert &2 &8 :: l? x1
[12] __primitive.assert 4 &8 :: l? x1
[13] __primitive.ap 9 1 :: l x1
[14] return [12 11 10] -> 23
[15] __primitive.not 8 :: y x3
[16] __primitive.assert 18 &15 :: a? x2
[17] __primitive.ap 2 -> 18 :: l? x2
[18] __primitive.dep 17 :: a x1
[19] __primitive.seq 22 &16 :: l x1
[20] __primitive.assert 17 &15 :: l? x1
[21] __primitive.assert 3 15 :: l? x1
[22] __primitive.ap 16 1 :: l x1
[23] return [21 20 19]

___ list.mov_ap (3 -> 3) ___
[1] var :: ?l x2
[2] var :: ?l x1
[3] var :: ?l x1
[4] __primitive.ap 3 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 5 &1 :: l x1
[7] __primitive.compose 6 2 :: l x1
[8] return [4 7 1]

___ list.movr (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] __primitive.ap 2 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x1
[5] __primitive.ap 4 1 :: l x1
[6] return [3 5]

___ list.pop_min (2 -> 3) x2 ___
[1] var :: ?l x3
[2] var :: ?l x2
[3] __primitive.ap &2 -> 4 :: l? x2
[4] __primitive.dep 3 :: i x2
[5] __primitive.ap &1 -> 6 :: v? x1
[6] __primitive.dep 5 :: i x1
[7] __primitive.lte &4 6 :: y x4
[8] __primitive.assert 4 &7 :: l? x1
[9] __primitive.assert 1 &7 :: l x1
[10] __primitive.assert 3 7 :: l x1
[11] return [10 9 8] -> 18
[12] __primitive.not 7 :: y x3
[13] __primitive.assert 2 &12 :: l x1
[14] __primitive.assert 16 &12 :: a x1
[15] __primitive.ap 1 -> 16 :: l? x2
[16] __primitive.dep 15 :: a x1
[17] __primitive.assert 15 12 :: l x1
[18] return [13 17 14]

___ list.pop_par (2 -> 4) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x1
[5] __primitive.ap 2 -> 6 :: l? x2
[6] __primitive.dep 5 :: a x1
[7] return [5 3 6 4]

___ list.pushif (3 -> 1) x2 ___
[1] var :: ?l x1
[2] var :: ?l x2
[3] var :: ?a x2
[4] __primitive.ap &3 1 -> 5 :: v? x1
[5] __primitive.dep 4 :: y x2
[6] __primitive.not &5 :: y x1
[7] __primitive.assert &2 6 :: l? x1
[8] return [7] -> 11
[9] __primitive.assert 10 5 :: l? x1
[10] __primitive.ap 3 2 :: l x1
[11] return [9]

___ list.pushl_seq (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x2
[3] __primitive.seq 4 &2 :: l x1
[4] __primitive.ap 2 1 :: l x1
[5] return [3]

___ list.reverse (1 -> 1) ___
[1] var :: ?l x1
[2] [] :: l x1
[3] list.reverse_r0 2 1 :: l x1
[4] return [3]

___ list.reverse_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?l x1
[2] changing var :: ?l x2
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x3
[5] __primitive.seq 7 &4 :: v x1
[6] __primitive.pushr 2 4 :: l x1
[7] list.reverse_r0 6 3 :: v x1
[8] return [5] -> 10
[9] __primitive.otherwise 4 2 :: l x1
[10] return [9]

___ list.reverse_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?l x1
[2] changing var :: ?l x2
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x3
[5] __primitive.seq 7 &4 :: v x1
[6] __primitive.pushr 2 4 :: l x1
[7] list.reverse_r0 6 3 :: v x1
[8] return [5] -> 10
[9] __primitive.otherwise 4 2 :: l x1
[10] return [9]

___ list.seq_list (1 -> 1) ___
[1] var :: ?l x2
[2] val True :: y x1
[3] list.seq_list_r0 2 &1 :: y x1
[4] __primitive.seq 1 3 :: l x1
[5] return [4]

___ list.seq_list_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?l x1
[2] changing var :: ?y x2
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: y x3
[5] __primitive.seq 7 &4 :: v x1
[6] __primitive.seq 4 2 :: y x1
[7] list.seq_list_r0 6 3 :: v x1
[8] return [5] -> 10
[9] __primitive.otherwise 4 2 :: y x1
[10] return [9]

___ list.sort (1 -> 1) ___
[1] var :: ?a x1
[2] [] :: l x1
[3] list.sort_r0 2 1 :: a x1
[4] return [3]

___ list.sort_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?a x3
[2] var :: ?l x3
[3] list.length_r0 4 &1 :: i x2
[4] val 0 :: i x1
[5] __primitive.div &3 6 :: i? x1
[6] val 2 :: i x1
[7] __primitive.gt 3 8 :: y x2
[8] val 1 :: i x1
[9] __primitive.assert 10 &7 :: l? x1
[10] list.split_at_r0 &1 &11 5 -> 14 :: l x2
[11] [] :: l x2
[12] list.sort_r0 &2 9 :: v x1
[13] __primitive.assert 14 7 :: l? x1
[14] __primitive.dep 10 :: l x1
[15] list.sort_r0 2 13 :: v x1
[16] list.merge_loop 12 15 11 :: l x2
[17] list.seq_list_r0 18 &16 :: y x1
[18] val True :: y x1
[19] __primitive.seq 16 17 :: l x2
[20] return [19] -> 24
[21] __primitive.otherwise 19 23 :: a x1
[22] __primitive.ap 1 2 -> 23 :: v? x1
[23] __primitive.dep 22 :: a x1
[24] return [21]

___ list.split_at (2 -> 2) ___
[1] var :: ?i x1
[2] var :: ?l x1
[3] [] :: l x1
[4] list.split_at_r0 2 3 1 -> 5 :: l x2
[5] __primitive.dep 4 :: a x1
[6] return [4 5]

___ list.split_at_r0 (3 -> 2) x2 rec ___
[1] changing var :: ?i x3
[2] changing var :: ?l x2
[3] changing var :: ?l x2
[4] __primitive.gt &1 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x2
[7] __primitive.assert &2 &6 :: l? x1
[8] __primitive.assert 3 6 :: l x1
[9] return [8 7] -> 20
[10] __primitive.gt &1 5 :: y x2
[11] __primitive.assert 17 &10 :: l? x1
[12] __primitive.sub 1 13 :: i x1
[13] val 1 :: i x1
[14] __primitive.ap 3 -> 15 :: l? x2
[15] __primitive.dep 14 :: a x1
[16] __primitive.ap 15 2 :: l x1
[17] list.split_at_r0 14 16 12 -> 19 :: l x2
[18] __primitive.assert 19 10 :: l x1
[19] __primitive.dep 17 :: l x1
[20] return [11 18]

___ list.split_list (1 -> 3) ___
[1] var :: ?a x2
[2] list.length_r0 3 &1 :: i x2
[3] val 0 :: i x1
[4] __primitive.div &2 5 :: i? x1
[5] val 2 :: i x1
[6] list.split_at_r0 1 7 4 -> 8 :: l x2
[7] [] :: l x1
[8] __primitive.dep 6 :: l x1
[9] return [6 8 2]

___ list.top (1 -> 2) ___
[1] var :: ?l x2
[2] __primitive.ap &1 -> 3 :: v? x1
[3] __primitive.dep 2 :: a x1
[4] return [1 3]

___ list.top_par (2 -> 4) ___
[1] var :: ?l x2
[2] var :: ?l x2
[3] __primitive.ap &1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] __primitive.ap &2 -> 6 :: v? x1
[6] __primitive.dep 5 :: a x1
[7] return [2 1 6 4]

___ logic.and (2 -> 1) x2 ___
[1] var :: ?y x2
[2] var :: ?a x1
[3] __primitive.assert 2 &1 :: a? x1
[4] return [3] -> 8
[5] __primitive.not 1 :: y x1
[6] __primitive.assert 7 5 :: y? x1
[7] val False :: y x1
[8] return [6]

___ logic.default (2 -> 1) x2 ___
[1] var :: ?a x1
[2] var :: ?a x2
[3] return [2] -> 5
[4] __primitive.otherwise 2 1 :: a x1
[5] return [4]

___ logic.implies (2 -> 1) x2 ___
[1] var :: ?a x1
[2] var :: ?y x1
[3] __primitive.not 2 :: y x2
[4] __primitive.not &3 :: y x1
[5] __primitive.assert 1 4 :: a? x1
[6] return [5] -> 9
[7] __primitive.assert 8 3 :: y? x1
[8] val True :: y x1
[9] return [7]

___ logic.or (2 -> 1) x2 ___
[1] var :: ?y x2
[2] var :: ?a x1
[3] __primitive.not &1 :: y x1
[4] __primitive.assert 2 3 :: a? x1
[5] return [4] -> 8
[6] __primitive.assert 7 1 :: y? x1
[7] val True :: y x1
[8] return [6]

___ logic.otherwise2 (4 -> 2) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x2
[5] __primitive.otherwise &4 6 :: l x1
[6] __primitive.otherwise 3 1 :: l x1
[7] __primitive.otherwise 4 2 :: a x1
[8] return [7 5]

___ logic.valid (1 -> 1) x2 ___
[1] var :: ?a x2
[2] __primitive.seq 3 1 :: y x1
[3] val True :: y x1
[4] return [2] -> 7
[5] __primitive.otherwise 1 6 :: y x1
[6] val False :: y x1
[7] return [5]

___ logic.vifte (3 -> 1) x2 ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x2
[4] __primitive.seq 2 3 :: a x1
[5] return [4] -> 7
[6] __primitive.otherwise 3 1 :: a x1
[7] return [6]

___ num.even (1 -> 1) ___
[1] var :: ?i x1
[2] __primitive.bitand 1 3 :: i x1
[3] val 1 :: i x1
[4] __primitive.eq 2 5 :: y x1
[5] val 0 :: i x1
[6] return [4]

___ num.max (2 -> 1) x2 ___
[1] var :: ?i x3
[2] var :: ?i x3
[3] __primitive.lte &2 &1 :: y x1
[4] __primitive.assert &1 3 :: i? x1
[5] return [4] -> 8
[6] __primitive.lte 1 &2 :: y x1
[7] __primitive.assert 2 6 :: i? x1
[8] return [7]

___ num.min (2 -> 1) x2 ___
[1] var :: ?i x3
[2] var :: ?i x3
[3] __primitive.gt &2 &1 :: y x1
[4] __primitive.assert &1 3 :: i? x1
[5] return [4] -> 8
[6] __primitive.gt 1 &2 :: y x1
[7] __primitive.assert 2 6 :: i? x1
[8] return [7]

___ num.odd (1 -> 1) ___
[1] var :: ?i x1
[2] __primitive.bitand 1 &3 :: i x1
[3] val 1 :: i x2
[4] __primitive.eq 2 3 :: y x1
[5] return [4]

___ stack.-swap2 (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] return [1 3 2]

___ stack.-swap3 (4 -> 4) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] return [1 4 3 2]

___ stack.-swap4 (5 -> 5) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] return [1 5 4 3 2]

___ stack.-swap5 (6 -> 6) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] return [1 6 5 4 3 2]

___ stack.-swap6 (7 -> 7) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] return [1 7 6 5 4 3 2]

___ stack.dup2 (2 -> 4) ___
[1] var :: ?a x2
[2] var :: ?a x2
[3] return [&2 &1 2 1]

___ stack.exch2 (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] return [1 2 3]

___ stack.exch3 (4 -> 4) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] return [1 3 2 4]

___ stack.exch4 (5 -> 5) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] return [1 4 3 2 5]

___ stack.get2 (1 -> 2) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 3 :: v? x2
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] return [4 3]

___ stack.get3 (1 -> 3) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 5 4 3 :: v? x3
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] return [5 4 3]

___ stack.get4 (1 -> 4) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 6 5 4 3 :: v? x4
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] return [6 5 4 3]

___ stack.get5 (1 -> 5) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 8 7 6 5 4 :: v? x5
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] __primitive.dep 2 :: a x1
[8] __primitive.dep 2 :: a x1
[9] return [8 7 6 5 4]

___ stack.get6 (1 -> 6) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 9 8 7 6 5 4 :: v? x6
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] __primitive.dep 2 :: a x1
[8] __primitive.dep 2 :: a x1
[9] __primitive.dep 2 :: a x1
[10] return [9 8 7 6 5 4]

___ stack.nip (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?v x0
[3] return [1]

___ stack.nip2 (3 -> 2) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?v x0
[4] return [2 1]

___ stack.over (2 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x2
[3] return [&2 1 2]

___ stack.over2 (3 -> 4) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x2
[4] return [&3 2 1 3]

___ stack.over3 (4 -> 5) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x2
[5] return [&4 3 2 1 4]

___ stack.over4 (5 -> 6) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x2
[6] return [&5 4 3 2 1 5]

___ stack.pull (1 -> 2) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: a x1
[4] return [3 2]

___ stack.pull2 (1 -> 3) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 :: l? x3
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] return [4 3 2]

___ stack.pull3 (1 -> 4) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 5 :: l? x4
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] return [5 4 3 2]

___ stack.pull4 (1 -> 5) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 5 6 :: l? x5
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] return [6 5 4 3 2]

___ stack.pull5 (1 -> 6) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 5 6 7 8 :: l? x6
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] __primitive.dep 2 :: a x1
[8] __primitive.dep 2 :: a x1
[9] return [8 7 6 5 4 2]

___ stack.pull6 (1 -> 7) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 5 6 7 8 9 :: l? x7
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] __primitive.dep 2 :: a x1
[8] __primitive.dep 2 :: a x1
[9] __primitive.dep 2 :: a x1
[10] return [9 8 7 6 5 4 2]

___ stack.pull7 (1 -> 8) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 5 6 7 8 9 10 :: l? x8
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] __primitive.dep 2 :: a x1
[8] __primitive.dep 2 :: a x1
[9] __primitive.dep 2 :: a x1
[10] __primitive.dep 2 :: a x1
[11] return [10 9 8 7 6 5 4 2]

___ stack.rev3 (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] return [1 2 3]

___ stack.swap2 (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] return [2 1 3]

___ stack.swap3 (4 -> 4) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] return [3 2 1 4]

___ stack.swap4 (5 -> 5) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] return [4 3 2 1 5]

___ stack.swap5 (6 -> 6) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] return [5 4 3 2 1 6]

___ stack.swap6 (7 -> 7) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] return [6 5 4 3 2 1 7]

___ stack.tail (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> X :: l? x1
[3] return [2]

___ stack.tail2 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> X X :: l? x1
[3] return [2]

___ stack.tuck (2 -> 3) ___
[1] var :: ?a x2
[2] var :: ?a x1
[3] return [&1 2 1]

___ tests.after0 (1 -> 1) ___
[1] var :: ?l x1
[2] tests.after0_r0 1 :: l x1
[3] return [2]

___ tests.after0_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?l x2
[2] __primitive.ap &1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x2
[4] __primitive.neq &3 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert 9 6 :: l? x1
[8] __primitive.ap 1 -> 9 X :: v? x1
[9] __primitive.dep 8 :: a x1
[10] return [7] -> 14
[11] __primitive.neq 3 5 :: y x1
[12] __primitive.assert 13 11 :: l? x1
[13] tests.after0_r0 2 :: l x1
[14] return [12]

___ tests.alt_list (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] tests.alt_list_q0 1 2 :: l x1
[4] return [3]

___ tests.alt_list_q0 (2 -> 1) x2 ___
[1] var :: ?a x2
[2] var :: ?a x2
[3] __primitive.ap &1 1 4 :: l x1
[4] [] :: l x2
[5] return [3] -> 7
[6] __primitive.ap &2 2 4 :: l x1
[7] return [6]

___ tests.alt_seq (1 -> 1) x2 ___
[1] var :: ?y x2
[2] __primitive.assert 3 &1 :: i? x1
[3] val 1 :: i x1
[4] return [2] -> 8
[5] __primitive.not 1 :: y x1
[6] __primitive.assert 7 5 :: i? x1
[7] val 2 :: i x1
[8] return [6]

___ tests.altf_loop (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] tests.altf_loop_r0 2 1 :: l x1
[4] return [3]

___ tests.altf_loop_r0 (2 -> 1) x3 rec ___
[1] changing var :: ?i x4
[2] var :: ?a x3
[3] __primitive.gt &1 &4 :: y x1
[4] val 1 :: i x4
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &2 5 :: l? x1
[7] return [6] -> 12
[8] __primitive.gt &1 &4 :: y x2
[9] __primitive.assert 11 &8 :: l? x1
[10] __primitive.sub 1 4 :: i x1
[11] tests.altf_loop_r0 2 10 :: l x1
[12] return [9] -> 16
[13] __primitive.assert 15 8 :: l x1
[14] __primitive.sub 1 4 :: i x1
[15] tests.altf_loop_r0 2 14 :: l x1
[16] return [13]

___ tests.ap_loop (2 -> 1) rec ___
[1] var :: ?l x2
[2] changing var :: ?a x1
[3] __primitive.ap 2 &1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] tests.ap_loop 4 1 :: v x1
[6] return [5]

___ tests.ap_loop1 (1 -> 1) ___
[1] var :: ?i x1
[2] tests.ap_loop1_r0 1 :: v x1
[3] return [2]

___ tests.ap_loop1_r0 (1 -> 1) rec ___
[1] changing var :: ?i x1
[2] __primitive.add 1 3 :: i x1
[3] val 1 :: i x1
[4] tests.ap_loop1_r0 2 :: v x1
[5] return [4]

___ tests.ap_loop2 (1 -> 1) ___
[1] var :: ?l x1
[2] tests.ap_loop2_r0 1 :: v x1
[3] return [2]

___ tests.ap_loop2_r0 (1 -> 1) rec ___
[1] changing var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x1
[4] __primitive.add 3 5 :: i x1
[5] val 1 :: i x1
[6] __primitive.pushr 2 4 :: l x1
[7] tests.ap_loop2_r0 6 :: v x1
[8] return [7]

___ tests.ap_loop3 (1 -> 1) ___
[1] var :: ?i x1
[2] tests.ap_loop3_r0 1 :: v x1
[3] return [2]

___ tests.ap_loop3_r0 (1 -> 1) rec ___
[1] changing var :: ?i x1
[2] __primitive.add 1 3 :: i x1
[3] val 1 :: i x1
[4] tests.ap_loop3_r0 2 :: v x1
[5] return [4]

___ tests.ap_loop4 (1 -> 1) ___
[1] var :: ?a x1
[2] [] :: l x1
[3] tests.ap_loop4_r0 2 1 :: v x1
[4] return [3]

___ tests.ap_loop4_r0 (2 -> 1) rec ___
[1] changing var :: ?a x1
[2] var :: ?l x2
[3] __primitive.ap 4 &2 -> 5 :: v? x1
[4] __primitive.quote 1 :: l x1
[5] __primitive.dep 3 :: l x1
[6] __primitive.ap 5 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] tests.ap_loop4_r0 2 7 :: v x1
[9] return [8]

___ tests.asq (2 -> 2) ___
[1] var :: ?y x2
[2] var :: ?l x1
[3] __primitive.assert &5 &1 :: l? x1
[4] __primitive.ap 1 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x2
[6] __primitive.pushr 4 5 :: l x1
[7] return [6 3]

___ tests.asq2 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: y x2
[4] __primitive.assert 5 &3 :: l? x1
[5] __primitive.ap 3 2 :: l x1
[6] return [4]

___ tests.asq2_loop (1 -> 1) rec ___
[1] changing var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: y x2
[4] __primitive.assert 5 &3 :: l? x1
[5] __primitive.ap 3 2 :: l x1
[6] tests.asq2_loop 4 :: v x1
[7] return [6]

___ tests.assert_nready (2 -> 1) ___
[1] var :: ?y x1
[2] var :: ?i x1
[3] __primitive.assert 4 1 :: i? x1
[4] __primitive.add 2 5 :: i x1
[5] val 1 :: i x1
[6] return [3]

___ tests.assert_otherwise_quote (2 -> 1) ___
[1] var :: ?y x1
[2] var :: ?a x1
[3] __primitive.assert 4 1 :: l? x1
[4] val Something :: y x1
[5] __primitive.otherwise 3 2 :: a x1
[6] return [5]

___ tests.assert_seq (2 -> 1) ___
[1] var :: ?y x1
[2] var :: ?a x1
[3] __primitive.assert 2 1 :: i? x1
[4] return [3]

___ tests.binrec (4 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] control.iterate 4 3 2 :: a x1
[6] __primitive.ap 5 1 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [7]

___ tests.box (0 -> 1) ___
[1] tests.box_q0 :: l x1
[2] return [1]

___ tests.box_q0 (0 -> 1) ___
[1] tests.box :: v x1
[2] __primitive.ap 1 3 :: l x1
[3] [] :: l x1
[4] return [2]

___ tests.br10 (1 -> 1) ___
[1] var :: ?i x1
[2] tests.br10_r0 1 :: i x1
[3] return [2]

___ tests.br10_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x4
[2] __primitive.lt &1 &3 :: y x1
[3] val 10 :: i x2
[4] __primitive.not 2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 12
[7] __primitive.lt &1 3 :: y x1
[8] __primitive.assert 11 7 :: i? x1
[9] __primitive.add 1 10 :: i x1
[10] val 1 :: i x1
[11] tests.br10_r0 9 :: i x1
[12] return [8]

___ tests.calc (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.quote 3 :: l x1
[3] val 0 :: i x1
[4] tests.calc_loop 1 2 :: y x1
[5] return [4]

___ tests.calc_loop (2 -> 1) x15 rec ___
[1] changing var :: ?l x10
[2] changing var :: ?y x1
[3] __primitive.open 2 4 -> 5 :: y x2
[4] val "stream,out:std" :: s x1
[5] __primitive.dep 3 :: o x1
[6] __primitive.ap &1 -> 7 :: l? x4
[7] __primitive.dep 6 :: i x5
[8] __primitive.to_string &7 :: s x1
[9] __primitive.strcat 8 10 :: s x1
[10] val "\n" :: s x1
[11] __primitive.write 3 5 9 -> 12 :: y x2
[12] __primitive.dep 11 :: o x1
[13] __primitive.close 11 12 :: y x1
[14] __primitive.open 13 15 -> 16 :: y x2
[15] val "stream,in:std" :: s x1
[16] __primitive.dep 14 :: o x1
[17] io.getline_loop 14 16 19 -> 24 20 :: y x3
[19] val "" :: s x1
[20] __primitive.dep 17 :: s x1
[21] __primitive.strtrim 20 :: s x14
[22] __primitive.from_string &21 :: i? x3
[23] __primitive.seq 27 &22 :: v x1
[24] __primitive.dep 17 :: o x1.
[25] __primitive.close 17 24 :: y x15.
[26] __primitive.pushr 1 22 :: l x1
[27] tests.calc_loop 25 26 :: v x1
[28] return [23] -> 65
[29] __primitive.eq_str &21 30 :: y x3
[30] val "+" :: s x1
[31] __primitive.eq_str &21 32 :: y x3
[32] val "-" :: s x1
[33] __primitive.eq_str &21 34 :: y x3
[34] val "*" :: s x1
[35] __primitive.eq_str &21 36 :: y x3
[36] val "/" :: s x1
[37] __primitive.eq_str &21 38 :: y x3
[38] val "gcd" :: s x1
[39] __primitive.eq_str &21 40 :: y x3
[40] val "^" :: s x1
[41] __primitive.eq_str &21 42 :: y x3
[42] val "fib" :: s x1
[43] __primitive.eq_str &21 44 :: y x3
[44] val "fact" :: s x1
[45] __primitive.eq_str &21 46 :: y x3
[46] val "len" :: s x1
[47] __primitive.eq_str &21 48 :: y x2
[48] val "sum" :: s x1
[49] __primitive.eq_str &21 50 :: y x4
[50] val "swap" :: s x1
[51] __primitive.eq_str &21 52 :: y x4
[52] val "dup" :: s x1
[53] __primitive.eq_str 21 54 :: y x3
[54] val "drop" :: s x1
[55] __primitive.assert &59 &29 :: i x2
[56] __primitive.ap &1 -> 57 58 :: l? x3
[57] __primitive.dep 56 :: i x1
[58] __primitive.dep 56 :: i x1
[59] __primitive.add 57 58 :: i x2
[60] __primitive.seq 64 55 :: v x1
[61] __primitive.assert 59 &29 :: i x1
[62] __primitive.assert 56 29 :: l x1
[63] __primitive.pushr 62 61 :: l x1
[64] tests.calc_loop 25 63 :: v x1
[65] return [60] -> 76
[66] __primitive.assert &70 &31 :: i x2
[67] __primitive.ap &1 -> 68 69 :: l? x3
[68] __primitive.dep 67 :: i x1
[69] __primitive.dep 67 :: i x1
[70] __primitive.sub 68 69 :: i x2
[71] __primitive.seq 75 66 :: v x1
[72] __primitive.assert 70 &31 :: i x1
[73] __primitive.assert 67 31 :: l x1
[74] __primitive.pushr 73 72 :: l x1
[75] tests.calc_loop 25 74 :: v x1
[76] return [71] -> 87
[77] __primitive.assert &81 &33 :: i x2
[78] __primitive.ap &1 -> 79 80 :: l? x3
[79] __primitive.dep 78 :: i x1
[80] __primitive.dep 78 :: i x1
[81] __primitive.mul 79 80 :: i x2
[82] __primitive.seq 86 77 :: v x1
[83] __primitive.assert 81 &33 :: i x1
[84] __primitive.assert 78 33 :: l x1
[85] __primitive.pushr 84 83 :: l x1
[86] tests.calc_loop 25 85 :: v x1
[87] return [82] -> 98
[88] __primitive.assert &92 &35 :: i x2
[89] __primitive.ap &1 -> 90 91 :: l? x3
[90] __primitive.dep 89 :: i x1
[91] __primitive.dep 89 :: i x1
[92] __primitive.div 90 91 :: i? x2
[93] __primitive.seq 97 88 :: v x1
[94] __primitive.assert 92 &35 :: i x1
[95] __primitive.assert 89 35 :: l x1
[96] __primitive.pushr 95 94 :: l x1
[97] tests.calc_loop 25 96 :: v x1
[98] return [93] -> 109
[99] __primitive.assert &103 &37 :: i x2
[100] __primitive.ap &1 -> 102 101 :: l? x3
[101] __primitive.dep 100 :: i x1
[102] __primitive.dep 100 :: i x1
[103] algorithm.gcd_r0 102 101 :: i x2
[104] __primitive.seq 108 99 :: v x1
[105] __primitive.assert 103 &37 :: i x1
[106] __primitive.assert 100 37 :: l x1
[107] __primitive.pushr 106 105 :: l x1
[108] tests.calc_loop 25 107 :: v x1
[109] return [104] -> 121
[110] __primitive.assert &114 &39 :: i x2
[111] __primitive.ap &1 -> 113 112 :: l? x3
[112] __primitive.dep 111 :: i x1
[113] __primitive.dep 111 :: i x1
[114] algorithm.__caret___r0 115 113 112 :: i x2
[115] val 1 :: i x3
[116] __primitive.seq 120 110 :: v x1
[117] __primitive.assert 114 &39 :: i x1
[118] __primitive.assert 111 39 :: l x1
[119] __primitive.pushr 118 117 :: l x1
[120] tests.calc_loop 25 119 :: v x1
[121] return [116] -> 131
[122] __primitive.assert &124 &41 :: i x2
[123] __primitive.sub 7 &115 :: i x1
[124] tests.fibl_r0 123 125 115 :: i x2
[125] val 0 :: i x3
[126] __primitive.seq 130 122 :: v x1
[127] __primitive.assert 124 &41 :: i x1
[128] __primitive.assert 6 41 :: l x1
[129] __primitive.pushr 128 127 :: l x1
[130] tests.calc_loop 25 129 :: v x1
[131] return [126] -> 139
[132] __primitive.assert &133 &43 :: i x2
[133] tests.fact 7 :: i x2
[134] __primitive.seq 138 132 :: v x1
[135] __primitive.assert 133 &43 :: i x1
[136] __primitive.assert 6 43 :: l x1
[137] __primitive.pushr 136 135 :: l x1
[138] tests.calc_loop 25 137 :: v x1
[139] return [134] -> 147
[140] __primitive.assert &141 &45 :: i x2
[141] list.length_r0 125 &1 :: i x2
[142] __primitive.seq 146 140 :: v x1
[143] __primitive.assert 141 &45 :: i x1
[144] __primitive.assert 1 45 :: l x4.
[145] __primitive.pushr 144 143 :: l x1
[146] tests.calc_loop 25 145 :: v x1
[147] return [142] -> 154
[148] __primitive.assert &149 &47 :: i x2
[149] algorithm.sum_r0 125 144 :: i x2
[150] __primitive.seq 153 148 :: v x1
[151] __primitive.assert 149 47 :: i x1
[152] __primitive.quote 151 :: l x1
[153] tests.calc_loop 25 152 :: v x1
[154] return [150] -> 165
[155] __primitive.assert &157 &49 :: a x2
[156] __primitive.ap &144 -> 157 159 :: l? x3
[157] __primitive.dep 156 :: a x2
[158] __primitive.seq 164 155 :: v x1
[159] __primitive.dep 156 :: a x1
[160] __primitive.assert 157 &49 :: a x1
[161] __primitive.assert 159 &49 :: a x1
[162] __primitive.assert 156 49 :: l x1
[163] __primitive.pushr 162 161 160 :: l x1
[164] tests.calc_loop 25 163 :: v x1
[165] return [158] -> 173
[166] __primitive.assert &7 &51 :: i x2
[167] __primitive.seq 172 166 :: v x1
[168] __primitive.assert 7 &51 :: i x1
[169] __primitive.assert 168 &51 :: i x2
[170] __primitive.assert 6 51 :: l x1
[171] __primitive.pushr 170 &169 169 :: l x1
[172] tests.calc_loop 25 171 :: v x1
[173] return [167] -> 182
[174] __primitive.assert &176 &53 :: a x2
[175] __primitive.ap 144 -> 176 X :: l? x2
[176] __primitive.dep 175 :: a x2
[177] __primitive.seq 181 174 :: v x1
[178] __primitive.assert 176 &53 :: a x1
[179] __primitive.assert 175 53 :: l x1
[180] __primitive.pushr 179 178 :: l x1
[181] tests.calc_loop 25 180 :: v x1
[182] return [177] -> 197
[183] __primitive.otherwise 22 25 :: y x1
[184] __primitive.otherwise 55 183 :: y x1
[185] __primitive.otherwise 66 184 :: y x1
[186] __primitive.otherwise 77 185 :: y x1
[187] __primitive.otherwise 88 186 :: y x1
[188] __primitive.otherwise 99 187 :: y x1
[189] __primitive.otherwise 110 188 :: y x1
[190] __primitive.otherwise 122 189 :: y x1
[191] __primitive.otherwise 132 190 :: y x1
[192] __primitive.otherwise 140 191 :: y x1
[193] __primitive.otherwise 148 192 :: y x1
[194] __primitive.otherwise 155 193 :: y x1
[195] __primitive.otherwise 166 194 :: y x1
[196] __primitive.otherwise 174 195 :: y x1
[197] return [196]

___ tests.calc_step (2 -> 1) x14 ___
[1] var :: ?s x1
[2] var :: ?l x14
[3] __primitive.strtrim 1 :: s x14
[4] tests.calc_step_q0 3 2 :: l x1
[5] return [4] -> 10
[6] __primitive.eq_str &3 7 :: y x1
[7] val "+" :: s x1
[8] __primitive.assert 9 6 :: l? x1
[9] tests.calc_step_q1 2 :: l x1
[10] return [8] -> 15
[11] __primitive.eq_str &3 12 :: y x1
[12] val "-" :: s x1
[13] __primitive.assert 14 11 :: l? x1
[14] tests.calc_step_q2 2 :: l x1
[15] return [13] -> 20
[16] __primitive.eq_str &3 17 :: y x1
[17] val "*" :: s x1
[18] __primitive.assert 19 16 :: l? x1
[19] tests.calc_step_q3 2 :: l x1
[20] return [18] -> 25
[21] __primitive.eq_str &3 22 :: y x1
[22] val "/" :: s x1
[23] __primitive.assert 24 21 :: l? x1
[24] tests.calc_step_q4 2 :: l x1
[25] return [23] -> 30
[26] __primitive.eq_str &3 27 :: y x1
[27] val "gcd" :: s x1
[28] __primitive.assert 29 26 :: l? x1
[29] tests.calc_step_q5 2 :: l x1
[30] return [28] -> 35
[31] __primitive.eq_str &3 32 :: y x1
[32] val "^" :: s x1
[33] __primitive.assert 34 31 :: l? x1
[34] tests.calc_step_q6 2 :: l x1
[35] return [33] -> 40
[36] __primitive.eq_str &3 37 :: y x1
[37] val "fib" :: s x1
[38] __primitive.assert 39 36 :: l? x1
[39] tests.calc_step_q7 2 :: l x1
[40] return [38] -> 45
[41] __primitive.eq_str &3 42 :: y x1
[42] val "fact" :: s x1
[43] __primitive.assert 44 41 :: l? x1
[44] tests.calc_step_q8 2 :: l x1
[45] return [43] -> 50
[46] __primitive.eq_str &3 47 :: y x1
[47] val "len" :: s x1
[48] __primitive.assert 49 46 :: l? x1
[49] tests.calc_step_q9 2 :: l x1
[50] return [48] -> 55
[51] __primitive.eq_str &3 52 :: y x1
[52] val "sum" :: s x1
[53] __primitive.assert 54 51 :: l? x1
[54] tests.calc_step_q10 2 :: l x1
[55] return [53] -> 60
[56] __primitive.eq_str &3 57 :: y x1
[57] val "swap" :: s x1
[58] __primitive.assert 59 56 :: l? x1
[59] tests.calc_step_q11 2 :: l x1
[60] return [58] -> 65
[61] __primitive.eq_str &3 62 :: y x1
[62] val "dup" :: s x1
[63] __primitive.assert 64 61 :: l? x1
[64] tests.calc_step_q12 2 :: l x1
[65] return [63] -> 70
[66] __primitive.eq_str 3 67 :: y x1
[67] val "drop" :: s x1
[68] __primitive.assert 69 66 :: l? x1
[69] tests.calc_step_q13 2 :: l x1
[70] return [68]

___ tests.calc_step_q0 (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?s x1
[3] __primitive.from_string 2 :: i? x1
[4] __primitive.compose 1 3 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.calc_step_q1 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 :: l? x3
[3] __primitive.dep 2 :: i x1
[4] __primitive.dep 2 :: i x1
[5] __primitive.add 3 4 :: i x1
[6] __primitive.compose 2 5 7 :: l x1
[7] [] :: l x1
[8] return [6]

___ tests.calc_step_q2 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 :: l? x3
[3] __primitive.dep 2 :: i x1
[4] __primitive.dep 2 :: i x1
[5] __primitive.sub 3 4 :: i x1
[6] __primitive.compose 2 5 7 :: l x1
[7] [] :: l x1
[8] return [6]

___ tests.calc_step_q3 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 :: l? x3
[3] __primitive.dep 2 :: i x1
[4] __primitive.dep 2 :: i x1
[5] __primitive.mul 3 4 :: i x1
[6] __primitive.compose 2 5 7 :: l x1
[7] [] :: l x1
[8] return [6]

___ tests.calc_step_q4 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 :: l? x3
[3] __primitive.dep 2 :: i x1
[4] __primitive.dep 2 :: i x1
[5] __primitive.div 3 4 :: i? x1
[6] __primitive.compose 2 5 7 :: l x1
[7] [] :: l x1
[8] return [6]

___ tests.calc_step_q5 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 3 :: l? x3
[3] __primitive.dep 2 :: i x1
[4] __primitive.dep 2 :: i x1
[5] algorithm.gcd_r0 4 3 :: i x1
[6] __primitive.compose 2 5 7 :: l x1
[7] [] :: l x1
[8] return [6]

___ tests.calc_step_q6 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 3 :: l? x3
[3] __primitive.dep 2 :: i x1
[4] __primitive.dep 2 :: i x1
[5] algorithm.__caret___r0 6 4 3 :: i x1
[6] val 1 :: i x1
[7] __primitive.compose 2 5 8 :: l x1
[8] [] :: l x1
[9] return [7]

___ tests.calc_step_q7 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x1
[4] __primitive.sub 3 &5 :: i x1
[5] val 1 :: i x2
[6] tests.fibl_r0 4 7 5 :: i x1
[7] val 0 :: i x1
[8] __primitive.compose 2 6 9 :: l x1
[9] [] :: l x1
[10] return [8]

___ tests.calc_step_q8 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x1
[4] tests.fact 3 :: i x1
[5] __primitive.compose 2 4 6 :: l x1
[6] [] :: l x1
[7] return [5]

___ tests.calc_step_q9 (1 -> 1) ___
[1] var :: ?l x2
[2] list.length_r0 3 &1 :: i x1
[3] val 0 :: i x1
[4] __primitive.compose 1 2 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.calc_step_q10 (1 -> 1) ___
[1] var :: ?l x1
[2] algorithm.sum_r0 3 1 :: i x1
[3] val 0 :: i x1
[4] __primitive.ap 2 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.calc_step_q11 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 3 :: l? x3
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] __primitive.compose 2 3 4 6 :: l x1
[6] [] :: l x1
[7] return [5]

___ tests.calc_step_q12 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: a x2
[4] __primitive.compose 2 &3 3 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.calc_step_q13 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 X :: l? x2
[3] __primitive.dep 2 :: a x1
[4] __primitive.compose 2 3 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.calc_step_dummy (2 -> 1) ___
[1] var :: ?s x1
[2] var :: ?l x1
[3] __primitive.ap 2 -> 4 :: l? x2
[4] __primitive.dep 3 :: i x1
[5] __primitive.strtrim 1 :: s x1
[6] __primitive.from_string 5 :: i? x1
[7] __primitive.add 4 6 :: i x1
[8] tests.calc_step_dummy_q0 7 3 :: l x1
[9] return [8]

___ tests.calc_step_dummy_q0 (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?i x1
[3] __primitive.compose 1 2 4 :: l x1
[4] [] :: l x1
[5] return [3]

___ tests.calc_step_push (2 -> 1) x2 ___
[1] var :: ?s x1
[2] var :: ?l x2
[3] __primitive.strtrim 1 :: s x1
[4] __primitive.pushr 2 5 :: l x1
[5] val 1 :: i x1
[6] return [4] -> 15
[7] __primitive.eq_str 3 8 :: y x1
[8] val "+" :: s x1
[9] __primitive.assert 14 7 :: l? x1
[10] __primitive.ap 2 -> 11 12 :: l? x3
[11] __primitive.dep 10 :: i x1
[12] __primitive.dep 10 :: i x1
[13] __primitive.add 11 12 :: i x1
[14] tests.calc_step_push_q0 13 10 :: l x1
[15] return [9]

___ tests.calc_step_push_q0 (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?i x1
[3] __primitive.compose 1 2 4 :: l x1
[4] [] :: l x1
[5] return [3]

___ tests.calc_step_simple (2 -> 1) x2 ___
[1] var :: ?s x1
[2] var :: ?l x2
[3] __primitive.strtrim 1 :: s x2
[4] tests.calc_step_simple_q0 3 2 :: l x1
[5] return [4] -> 10
[6] __primitive.eq_str 3 7 :: y x1
[7] val "+" :: s x1
[8] __primitive.assert 9 6 :: l? x1
[9] tests.calc_step_simple_q1 2 :: l x1
[10] return [8]

___ tests.calc_step_simple_q0 (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?s x1
[3] __primitive.from_string 2 :: i? x1
[4] __primitive.compose 1 3 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.calc_step_simple_q1 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 :: l? x3
[3] __primitive.dep 2 :: i x1
[4] __primitive.dep 2 :: i x1
[5] __primitive.add 3 4 :: i x1
[6] __primitive.compose 2 5 7 :: l x1
[7] [] :: l x1
[8] return [6]

___ tests.collatz (1 -> 1) ___
[1] var :: ?i x1
[2] val 0 :: i x1
[3] tests.collatz_r0 2 1 :: i x1
[4] return [3]

___ tests.collatz_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] changing var :: ?i x2
[3] __primitive.gt &1 &4 :: y x1
[4] val 1 :: i x3
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &2 5 :: i? x1
[7] return [6] -> 13
[8] __primitive.gt &1 &4 :: y x1
[9] __primitive.assert 12 8 :: i? x1
[10] tests.collatz_step 1 :: i x1
[11] __primitive.add 2 4 :: i x1
[12] tests.collatz_r0 11 10 :: i x1
[13] return [9]

___ tests.collatz_step (1 -> 1) x2 ___
[1] var :: ?i x4
[2] __primitive.bitand &1 &3 :: i x1
[3] val 1 :: i x4
[4] __primitive.eq 2 5 :: y x1
[5] val 0 :: i x1
[6] __primitive.assert 7 4 :: i? x1
[7] __primitive.div &1 8 :: i? x1
[8] val 2 :: i x1
[9] return [6] -> 16
[10] __primitive.bitand &1 &3 :: i x1
[11] __primitive.eq 10 &3 :: y x1
[12] __primitive.assert 15 11 :: i? x1
[13] __primitive.mul 1 14 :: i x1
[14] val 3 :: i x1
[15] __primitive.add 13 3 :: i x1
[16] return [12]

___ tests.compose_alt (1 -> 1) x2 ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: v? x1
[3] __primitive.dep 2 :: i x2
[4] __primitive.add 3 5 :: i x1
[5] val 1 :: i x1
[6] return [4] -> 7
[7] return [3]

___ tests.count (1 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] __primitive.eq &1 &3 :: y x1
[3] val 0 :: i x3
[4] __primitive.assert &3 2 :: i? x1
[5] return [4] -> 12
[6] __primitive.gt &1 3 :: y x1
[7] __primitive.assert 11 6 :: i? x1
[8] __primitive.sub 1 &9 :: i x1
[9] val 1 :: i x2
[10] tests.count 8 :: i x1
[11] __primitive.add 10 9 :: i x1
[12] return [7]

___ tests.dec (1 -> 1) x2 rec ___
[1] changing var :: ?i x4
[2] __primitive.lte &1 &3 :: y x1
[3] val 5 :: i x2
[4] __primitive.assert &1 2 :: i? x1
[5] return [4] -> 11
[6] __primitive.gt &1 3 :: y x1
[7] __primitive.assert 10 6 :: i? x1
[8] __primitive.sub 1 9 :: i x1
[9] val 1 :: i x1
[10] tests.dec 8 :: i x1
[11] return [7]

___ tests.decel (1 -> 1) ___
[1] var :: ?i x1
[2] val 0 :: i x1
[3] tests.decel_r0 2 1 :: i x1
[4] return [3]

___ tests.decel_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] changing var :: ?i x2
[3] __primitive.gt &1 &4 :: y x1
[4] val 1 :: i x3
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &2 5 :: i? x1
[7] return [6] -> 13
[8] __primitive.gt &1 &4 :: y x1
[9] __primitive.assert 12 8 :: i? x1
[10] tests.decel_step 1 :: i x1
[11] __primitive.add 2 4 :: i x1
[12] tests.decel_r0 11 10 :: i x1
[13] return [9]

___ tests.decel_step (1 -> 1) x2 ___
[1] var :: ?i x4
[2] __primitive.lte &1 &3 :: y x1
[3] val 5 :: i x3
[4] __primitive.assert 5 2 :: i? x1
[5] __primitive.sub 1 6 :: i x1
[6] val 1 :: i x1
[7] return [4] -> 11
[8] __primitive.gt &1 &3 :: y x1
[9] __primitive.assert 10 8 :: i? x1
[10] __primitive.sub 1 3 :: i x1
[11] return [9]

___ tests.default_max (2 -> 1) x2 ___
[1] var :: ?i x2
[2] var :: ?i x2
[3] __primitive.lt &2 &1 :: y x1
[4] __primitive.assert 1 3 :: i? x2
[5] return [4] -> 7
[6] __primitive.otherwise 4 2 :: i x1
[7] return [6]

___ tests.del (0 -> 1) x2 ___
[1] val 1 :: i x1
[2] return [1] -> 4
[3] val 2 :: i x1
[4] return [3]

___ tests.drop_loop (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] tests.drop_loop_r0 2 1 :: l x1
[4] return [3]

___ tests.drop_loop_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] var :: ?a x2
[3] __primitive.gt &1 &4 :: y x1
[4] val 0 :: i x2
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &2 5 :: l? x1
[7] return [6] -> 13
[8] __primitive.gt &1 4 :: y x1
[9] __primitive.assert 12 8 :: l? x1
[10] __primitive.sub 1 11 :: i x1
[11] val 1 :: i x1
[12] tests.drop_loop_r0 2 10 :: l x1
[13] return [9]

___ tests.drop_loop1 (1 -> 1) ___
[1] var :: ?i x1
[2] tests.drop_loop1_r0 1 :: i x1
[3] return [2]

___ tests.drop_loop1_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x4
[2] __primitive.gt &1 &3 :: y x1
[3] val 0 :: i x2
[4] __primitive.not 2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 12
[7] __primitive.gt &1 3 :: y x1
[8] __primitive.assert 11 7 :: i? x1
[9] __primitive.sub 1 10 :: i x1
[10] val 1 :: i x1
[11] tests.drop_loop1_r0 9 :: i x1
[12] return [8]

___ tests.drop_loop2 (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] tests.drop_loop2_r0 2 1 :: l x1
[4] return [3]

___ tests.drop_loop2_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] var :: ?a x2
[3] val 0 :: i x1
[4] __primitive.quote 2 1 :: l x1
[5] return [4] -> 11
[6] __primitive.gt &1 3 :: y x1
[7] __primitive.assert 10 6 :: l? x1
[8] __primitive.sub 1 9 :: i x1
[9] val 1 :: i x1
[10] tests.drop_loop2_r0 2 8 :: l x1
[11] return [7]

___ tests.drop_loop3 (3 -> 2) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] tests.drop_loop3_r0 3 2 1 -> 5 :: a x2
[5] __primitive.dep 4 :: a x1
[6] return [4 5]

___ tests.drop_loop3_r0 (3 -> 2) x2 rec ___
[1] changing var :: ?i x3
[2] var :: ?a x2
[3] var :: ?a x2
[4] __primitive.gt &1 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x2
[7] __primitive.assert &2 &6 :: l? x1
[8] __primitive.assert 3 6 :: a x1
[9] return [8 7] -> 17
[10] __primitive.gt &1 5 :: y x2
[11] __primitive.assert 14 &10 :: l? x1
[12] __primitive.sub 1 13 :: i x1
[13] val 1 :: i x1
[14] tests.drop_loop3_r0 3 2 12 -> 16 :: a x2
[15] __primitive.assert 16 10 :: l x1
[16] __primitive.dep 14 :: l x1
[17] return [11 15]

___ tests.drop_loop4 (4 -> 3) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] tests.drop_loop4_r0 4 3 2 1 -> 7 8 :: a x3
[7] __primitive.dep 5 :: a x1
[8] __primitive.dep 5 :: a x1
[9] return [8 7 5]

___ tests.drop_loop4_r0 (4 -> 3) x2 rec ___
[1] changing var :: ?i x3
[2] var :: ?a x2
[3] var :: ?a x2
[4] var :: ?a x2
[5] __primitive.gt &1 &6 :: y x1
[6] val 0 :: i x2
[7] __primitive.not 5 :: y x3
[8] __primitive.assert &2 &7 :: l? x1
[9] __primitive.assert 3 &7 :: a x1
[10] __primitive.assert 4 7 :: a x1
[11] return [10 9 8] -> 22
[12] __primitive.gt &1 6 :: y x3
[13] __primitive.assert 16 &12 :: l? x1
[14] __primitive.sub 1 15 :: i x1
[15] val 1 :: i x1
[16] tests.drop_loop4_r0 4 3 2 14 -> 19 21 :: a x3
[18] __primitive.assert 19 &12 :: a x1
[19] __primitive.dep 16 :: a x1
[20] __primitive.assert 21 12 :: l x1
[21] __primitive.dep 16 :: l x1
[22] return [13 18 20]

___ tests.drop_loop5 (1 -> 1) ___
[1] var :: ?i x1
[2] tests.drop_loop5_r0 1 :: i x1
[3] return [2]

___ tests.drop_loop5_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x4
[2] __primitive.gt &1 &3 :: y x1
[3] val 0 :: i x2
[4] __primitive.not 2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 12
[7] __primitive.gt &1 3 :: y x1
[8] __primitive.assert 11 7 :: i? x1
[9] __primitive.sub 1 10 :: i x1
[10] val 1 :: i x1
[11] tests.drop_loop5_r0 9 :: i x1
[12] return [8]

___ tests.drop_loop6 (1 -> 1) ___
[1] var :: ?i x1
[2] val 7 :: i x1
[3] tests.drop_loop6_r0 1 2 :: i x1
[4] return [3]

___ tests.drop_loop6_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?i x4
[2] var :: ?i x2
[3] __primitive.gt &1 &4 :: y x1
[4] val 0 :: i x2
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &1 5 :: i? x1
[7] return [6] -> 12
[8] __primitive.gt &1 4 :: y x1
[9] __primitive.assert 11 8 :: i? x1
[10] __primitive.sub 1 &2 :: i x1
[11] tests.drop_loop6_r0 2 10 :: i x1
[12] return [9]

___ tests.either_test (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?v x0
[3] __primitive.ap 1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [4]

___ tests.empty_assert (3 -> 1) ___
[1] var :: ?y x1
[2] var :: ?v x0
[3] var :: ?a x1
[4] __primitive.assert 3 1 :: l? x1
[5] return [4]

___ tests.ext_cos (1 -> 1) ___
[1] var :: ?d x1
[2] __primitive.external 1 3 :: d x1
[3] val "@math.h:cos" :: s x1
[4] return [2]

___ tests.f11 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: l x1
[4] __primitive.ap 2 3 :: l x1
[5] return [4]

___ tests.f2 (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 2 1 -> 5 6 :: l? x3
[5] __primitive.dep 4 :: i x1
[6] __primitive.dep 4 :: i x1
[7] __primitive.add 6 8 :: i x1
[8] val 1 :: i x1
[9] __primitive.ap 7 4 -> 10 :: v x1
[10] __primitive.dep 9 :: i x1
[11] __primitive.add 5 10 :: i x1
[12] return [11]

___ tests.f6 (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] return [2 1 3]

___ tests.f7c (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] tests.f7c_r0 1 2 :: i x1
[4] return [3]

___ tests.f7c_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?i x2
[2] changing var :: ?i x3
[3] __primitive.gt &2 &4 :: y x1
[4] val 0 :: i x2
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &1 5 :: i? x1
[7] return [6] -> 14
[8] __primitive.gt &2 4 :: y x1
[9] __primitive.assert 13 8 :: i? x1
[10] __primitive.add 1 &11 :: i x1
[11] val 1 :: i x2
[12] __primitive.sub 2 11 :: i x1
[13] tests.f7c_r0 12 10 :: i x1
[14] return [9]

___ tests.f8 (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?v x0
[3] var :: ?v x0
[4] __primitive.ap 1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] return [5]

___ tests.f9 (2 -> 1) x3 ___
[1] var :: ?a x2
[2] var :: ?a x2
[3] return [2] -> 4
[4] return [1] -> 8
[5] __primitive.otherwise 2 7 :: a x1
[6] __primitive.otherwise 1 5 :: i x1
[7] val 3 :: i x1
[8] return [6]

___ tests.fact (1 -> 1) x2 rec ___
[1] changing var :: ?i x4
[2] __primitive.eq &1 &3 :: y x1
[3] val 1 :: i x4
[4] __primitive.assert &3 2 :: i? x1
[5] return [4] -> 11
[6] __primitive.gt &1 &3 :: y x1
[7] __primitive.assert 10 6 :: i? x1
[8] __primitive.sub &1 3 :: i x1
[9] tests.fact 8 :: i x1
[10] __primitive.mul 1 9 :: i x1
[11] return [7]

___ tests.failthru (3 -> 2) x2 ___
[1] var :: ?l x1
[2] var :: ?a x3
[3] var :: ?a x2
[4] __primitive.ap &3 &2 1 -> 6 5 :: v? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.dep 4 :: a x1
[7] return [6 5] -> 9
[8] __primitive.otherwise &2 3 :: a x1
[9] return [8 2]

___ tests.fib (1 -> 1) x2 rec ___
[1] changing var :: ?i x4
[2] __primitive.lte &1 &3 :: y x1
[3] val 1 :: i x4
[4] __primitive.assert &1 2 :: i? x1
[5] return [4] -> 13
[6] __primitive.gt &1 &3 :: y x1
[7] __primitive.assert 12 6 :: i? x1
[8] __primitive.sub 1 &3 :: i x2
[9] __primitive.sub &8 3 :: i x1
[10] tests.fib 9 :: i x1
[11] tests.fib 8 :: i x1
[12] __primitive.add 10 11 :: i x1
[13] return [7]

___ tests.fibl (1 -> 1) ___
[1] var :: ?i x1
[2] __primitive.sub 1 &3 :: i x1
[3] val 1 :: i x2
[4] val 0 :: i x1
[5] tests.fibl_r0 2 4 3 :: i x1
[6] return [5]

___ tests.fibl_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] changing var :: ?i x1
[3] changing var :: ?i x3
[4] __primitive.gt &3 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert &1 6 :: i? x1
[8] return [7] -> 15
[9] __primitive.gt &3 5 :: y x1
[10] __primitive.assert 14 9 :: i? x1
[11] __primitive.sub 3 12 :: i x1
[12] val 1 :: i x1
[13] __primitive.add 2 &1 :: i x1
[14] tests.fibl_r0 11 1 13 :: i x1
[15] return [10]

___ tests.hello (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.open 1 &3 -> 4 :: y x2
[3] val "stream,out:std" :: s x2
[4] __primitive.dep 2 :: o x1
[5] __primitive.write 2 4 6 -> 7 :: y x2
[6] val "What's your name? " :: s x1
[7] __primitive.dep 5 :: o x1
[8] __primitive.close 5 7 :: y x1
[9] __primitive.open 8 10 -> 11 :: y x2
[10] val "stream,in:std" :: s x1
[11] __primitive.dep 9 :: o x1
[12] io.getline_loop 9 11 14 -> 15 19 :: y x3
[14] val "" :: s x1
[15] __primitive.dep 12 :: o x1
[16] __primitive.close 12 15 :: y x1
[17] __primitive.open 16 3 -> 18 :: y x2
[18] __primitive.dep 17 :: o x1
[19] __primitive.dep 12 :: s x1
[20] __primitive.strcat 21 19 :: s x1
[21] val "Hello " :: s x1
[22] __primitive.strcat 20 23 :: s x1
[23] val "!\n" :: s x1
[24] __primitive.write 17 18 22 -> 25 :: y x2
[25] __primitive.dep 24 :: o x1
[26] __primitive.close 24 25 :: y x1
[27] return [26]

___ tests.id_quote_compose (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: a x1
[4] tests.id_quote_compose_q0 3 2 :: l x1
[5] return [4]

___ tests.id_quote_compose_q0 (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] __primitive.compose 1 2 4 :: l x1
[4] [] :: l x1
[5] return [3]

___ tests.imbalanced_assert (2 -> 2) ___
[1] var :: ?y x1
[2] var :: ?y x2
[3] __primitive.assert 4 &2 :: i? x1
[4] __primitive.assert 5 1 :: i? x1
[5] val 3 :: i x1
[6] val 2 :: i x1
[7] __primitive.assert 6 2 :: i x1
[8] return [7 3]

___ tests.inl_loop (1 -> 1) ___
[1] var :: ?i x1
[2] tests.inl_loop_r0 1 :: i x1
[3] return [2]

___ tests.inl_loop_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x4
[2] __primitive.lt &1 &3 :: y x1
[3] val 10 :: i x2
[4] __primitive.not 2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 12
[7] __primitive.lt &1 3 :: y x1
[8] __primitive.assert 11 7 :: i? x1
[9] __primitive.add 1 10 :: i x1
[10] val 3 :: i x1
[11] tests.inl_loop_r0 9 :: i x1
[12] return [8]

___ tests.inl_loop2 (3 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] var :: ?i x1
[4] tests.inl_loop2_r0 1 2 3 :: i x1
[5] return [4]

___ tests.inl_loop2_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?i x4
[2] var :: ?i x2
[3] var :: ?i x3
[4] __primitive.lt &1 &3 :: y x1
[5] __primitive.not 4 :: y x1
[6] __primitive.assert &1 5 :: i? x1
[7] return [6] -> 12
[8] __primitive.lt &1 &3 :: y x1
[9] __primitive.assert 11 8 :: i? x1
[10] __primitive.add 1 &2 :: i x1
[11] tests.inl_loop2_r0 3 2 10 :: i x1
[12] return [9]

___ tests.inl_loop3 (1 -> 1) ___
[1] var :: ?i x1
[2] tests.inl_loop3_r0 1 :: i x1
[3] __primitive.mul 2 4 :: i x1
[4] val 8 :: i x1
[5] return [3]

___ tests.inl_loop3_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x4
[2] __primitive.lt &1 &3 :: y x1
[3] val 10 :: i x2
[4] __primitive.not 2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 12
[7] __primitive.lt &1 3 :: y x1
[8] __primitive.assert 11 7 :: i? x1
[9] __primitive.add 1 10 :: i x1
[10] val 3 :: i x1
[11] tests.inl_loop3_r0 9 :: i x1
[12] return [8]

___ tests.inl_loop4 (1 -> 1) ___
[1] var :: ?i x1
[2] __primitive.add 1 3 :: i x1
[3] val 4 :: i x1
[4] tests.inl_loop4_r0 2 :: i x1
[5] __primitive.mul 4 6 :: i x1
[6] val 2 :: i x1
[7] return [5]

___ tests.inl_loop4_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x4
[2] __primitive.lt &1 &3 :: y x1
[3] val 10 :: i x2
[4] __primitive.not 2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 12
[7] __primitive.lt &1 3 :: y x1
[8] __primitive.assert 11 7 :: i? x1
[9] __primitive.add 1 10 :: i x1
[10] val 3 :: i x1
[11] tests.inl_loop4_r0 9 :: i x1
[12] return [8]

___ tests.input_times (3 -> 1) ___
[1] var :: ?i x1
[2] var :: ?l x1
[3] var :: ?y x1
[4] tests.input_times_r0 1 3 2 :: l x1
[5] return [4]

___ tests.input_times_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?l x2
[2] changing var :: ?y x2
[3] changing var :: ?i x2
[4] val 0 :: i x1
[5] __primitive.quote 2 1 :: l x1
[6] return [5] -> 22
[7] __primitive.gt &3 4 :: y x1
[8] __primitive.assert 21 7 :: l? x1
[9] __primitive.open 2 10 -> 11 :: y x2
[10] val "stream,in:std" :: s x1
[11] __primitive.dep 9 :: o x1
[12] io.getline_loop 9 11 14 -> 15 19 :: y x3
[14] val "" :: s x1
[15] __primitive.dep 12 :: o x1
[16] __primitive.close 12 15 :: y x1
[17] __primitive.sub 3 18 :: i x1
[18] val 1 :: i x1
[19] __primitive.dep 12 :: s x1
[20] __primitive.ap 19 1 :: l x1
[21] tests.input_times_r0 17 16 20 :: l x1
[22] return [8]

___ tests.it10 (1 -> 1) ___
[1] var :: ?i x1
[2] tests.it10_r0 1 :: i x1
[3] return [2]

___ tests.it10_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x4
[2] __primitive.lt &1 &3 :: y x1
[3] val 10 :: i x2
[4] __primitive.not 2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 12
[7] __primitive.lt &1 3 :: y x1
[8] __primitive.assert 11 7 :: i? x1
[9] __primitive.add 1 10 :: i x1
[10] val 1 :: i x1
[11] tests.it10_r0 9 :: i x1
[12] return [8]

___ tests.it10b (1 -> 1) ___
[1] var :: ?l x1
[2] tests.it10b_r0 1 :: i x1
[3] return [2]

___ tests.it10b_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x4
[4] __primitive.lt &3 &5 :: y x1
[5] val 10 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert &3 6 :: i? x1
[8] return [7] -> 15
[9] __primitive.lt &3 5 :: y x1
[10] __primitive.assert 14 9 :: i? x1
[11] __primitive.add 3 12 :: i x1
[12] val 1 :: i x1
[13] __primitive.pushr 2 11 :: l x1
[14] tests.it10b_r0 13 :: i x1
[15] return [10]

___ tests.ldmult (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] list.listdup_r0 2 1 4 :: l x1
[4] [] :: l x1
[5] algorithm.sum_r0 6 3 :: i x1
[6] val 0 :: i x1
[7] return [5]

___ tests.leak (1 -> 1) ___
[1] var :: ?i x1
[2] val 0 :: i x1
[3] tests.leak_r0 2 1 :: i x1
[4] return [3]

___ tests.leak_r0 (2 -> 1) x2 rec ___
[1] var :: ?i x3
[2] changing var :: ?i x2
[3] __primitive.gt &1 &4 :: y x1
[4] val 1 :: i x2
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &2 5 :: i? x1
[7] return [6] -> 13
[8] __primitive.gt &1 4 :: y x1
[9] __primitive.assert 12 8 :: i? x1
[10] __primitive.add 2 11 :: i x1
[11] val 3 :: i x1
[12] tests.leak_r0 10 1 :: i x1
[13] return [9]

___ tests.oseq (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] __primitive.seq 2 1 :: a x1
[4] return [3]

___ tests.ow_assert (1 -> 1) ___
[1] var :: ?a x1
[2] __primitive.otherwise 1 3 :: y x1
[3] val True :: y x1
[4] return [2]

___ tests.ow_assert2 (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] __primitive.otherwise 1 2 :: y x1
[4] return [3]

___ tests.ow_assert3 (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] __primitive.otherwise 1 2 :: y x1
[4] return [3]

___ tests.ow_not (1 -> 1) ___
[1] var :: ?a x1
[2] __primitive.otherwise 1 3 :: y x1
[3] val True :: y x1
[4] return [2]

___ tests.pct (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?d x1
[3] __primitive.to_float 1 :: d x1
[4] __primitive.div_float 3 5 :: d? x1
[5] val 100 :: d x1
[6] __primitive.add_float 4 7 :: d x1
[7] val 1 :: d x1
[8] __primitive.mul_float 2 6 :: d x1
[9] return [8]

___ tests.pop_min_test (2 -> 1) x2 ___
[1] var :: ?y x2
[2] var :: ?a x2
[3] __primitive.assert &2 &1 :: l? x1
[4] return [3] -> 7
[5] __primitive.not 1 :: y x1
[6] __primitive.assert 2 5 :: a x1
[7] return [6]

___ tests.popar (2 -> 4) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x1
[5] __primitive.ap 2 -> 6 :: l? x2
[6] __primitive.dep 5 :: a x1
[7] return [5 3 6 4]

___ tests.popr_quote_compose (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: l x1
[4] __primitive.ap 3 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x1
[6] tests.popr_quote_compose_q0 5 4 2 :: l x1
[7] return [6]

___ tests.popr_quote_compose_q0 (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?a x1
[4] __primitive.compose 1 2 3 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.push_input (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?y x1
[3] __primitive.open 2 4 -> 5 :: y x2
[4] val "stream,in:std" :: s x1
[5] __primitive.dep 3 :: o x1
[6] io.getline_loop 3 5 8 -> 9 11 :: y x3
[8] val "" :: s x1
[9] __primitive.dep 6 :: o x1
[10] __primitive.close 6 9 :: y x1
[11] __primitive.dep 6 :: s x1
[12] __primitive.ap 11 1 :: l x1
[13] return [10 12]

___ tests.pushl2 (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 2 1 :: l x1
[5] return [4]

___ tests.pushl_assert (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?v x0
[3] __primitive.quote 1 :: l x1
[4] return [3]

___ tests.pushl_swap_assert (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?y x1
[4] __primitive.assert 5 3 :: l? x1
[5] __primitive.ap 2 1 :: l x1
[6] return [4]

___ tests.qdec (1 -> 1) x2 rec ___
[1] changing var :: ?l x2
[2] __primitive.ap &1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x3
[4] __primitive.lte &3 &5 :: y x1
[5] val 5 :: i x2
[6] __primitive.assert 1 4 :: l? x1
[7] return [6] -> 14
[8] __primitive.gt &3 5 :: y x1
[9] __primitive.assert 13 8 :: l? x1
[10] __primitive.sub 3 11 :: i x1
[11] val 1 :: i x1
[12] __primitive.pushr 2 10 :: l x1
[13] tests.qdec 12 :: l x1
[14] return [9]

___ tests.qtest (1 -> 1) rec ___
[1] changing var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x1
[4] __primitive.add 3 5 :: i x1
[5] val 1 :: i x1
[6] __primitive.pushr 2 4 :: l x1
[7] tests.qtest 6 :: v x1
[8] return [7]

___ tests.quote_str (1 -> 1) ___
[1] var :: ?s x1
[2] __primitive.strcat &3 1 :: s x1
[3] val "'" :: s x2
[4] __primitive.strcat 2 3 :: s x1
[5] return [4]

___ tests.reverse_reverse (1 -> 1) ___
[1] var :: ?a x1
[2] list.reverse_r0 &3 1 :: l x1
[3] [] :: l x2
[4] list.reverse_r0 3 2 :: l x1
[5] return [4]

___ tests.rpr (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] list.reverse_r0 &4 1 :: l x1
[4] [] :: l x2
[5] __primitive.ap 2 3 :: l x1
[6] list.reverse_r0 4 5 :: l x1
[7] return [6]

___ tests.spaces (1 -> 1) x2 ___
[1] var :: ?s x1
[2] tests.spaces_r0 1 :: s x1
[3] __primitive.eq_str 2 4 :: y x2
[4] val "" :: s x1
[5] __primitive.assert 6 &3 :: y? x1
[6] val True :: y x1
[7] return [5] -> 12
[8] val Something :: y x1
[9] __primitive.assert 8 3 :: y x1
[10] __primitive.otherwise 9 11 :: y x1
[11] val False :: y x1
[12] return [10]

___ tests.spaces_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?s x4
[2] __primitive.eq_str &1 &3 :: y x1
[3] val "" :: s x3
[4] __primitive.not 2 :: y x1
[5] __primitive.not 4 :: y x1
[6] __primitive.assert &1 5 :: s? x1
[7] return [6] -> 17
[8] __primitive.eq_str &1 &3 :: y x1
[9] __primitive.not 8 :: y x1
[10] __primitive.assert 16 9 :: s? x1
[11] __primitive.strsplit 1 12 -> 15 :: s? x2
[12] val " " :: s x1
[13] __primitive.eq_str 11 3 :: y x1
[14] __primitive.assert 15 13 :: s? x1
[15] __primitive.dep 11 :: s x1
[16] tests.spaces_r0 14 :: s x1
[17] return [10]

___ tests.spilling (1 -> 2) ___
[1] var :: ?y x1
[2] __primitive.not 1 :: y x2
[3] tests.spilling_q0 &2 :: l x1
[4] return [2 3]

___ tests.spilling_q0 (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.not 1 :: y x1
[3] __primitive.ap 2 4 :: l x1
[4] [] :: l x1
[5] return [3]

___ tests.spilling2 (1 -> 2) ___
[1] var :: ?y x1
[2] __primitive.not 1 :: y x2
[3] tests.spilling2_q0 &2 :: l x1
[4] tests.spilling2_q1 2 :: l x1
[5] return [4 3]

___ tests.spilling2_q0 (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.ap 1 3 :: l x1
[3] [] :: l x1
[4] return [2]

___ tests.spilling2_q1 (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.not 1 :: y x1
[3] __primitive.ap 2 4 :: l x1
[4] [] :: l x1
[5] return [3]

___ tests.spilling3 (1 -> 3) ___
[1] var :: ?y x1
[2] __primitive.not 1 :: y x2
[3] __primitive.not &2 :: y x2
[4] tests.spilling3_q0 &3 :: l x1
[5] tests.spilling3_q0 3 :: l x1
[6] __primitive.not 2 :: y x1
[7] tests.spilling3_q0 6 :: l x1
[8] return [7 5 4]

___ tests.spilling3_q0 (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.ap 1 3 :: l x1
[3] [] :: l x1
[4] return [2]

___ tests.stream (1 -> 2) ___
[1] var :: ?a x2
[2] tests.stream_q0 &1 :: l x1
[3] return [2 1]

___ tests.stream_q0 (1 -> 1) ___
[1] var :: ?a x1
[2] tests.stream 1 -> 3 :: v x2
[3] __primitive.dep 2 :: v x1
[4] __primitive.ap 2 3 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.sum3 (3 -> 1) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.quote 3 2 1 :: l x1
[5] algorithm.sum_r0 6 4 :: i x1
[6] val 0 :: i x1
[7] return [5]

___ tests.sum_times2 (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?y x1
[3] val 0 :: i x1
[4] tests.sum_times2_r0 1 2 3 :: i x1
[5] return [4]

___ tests.sum_times2_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?i x2
[2] changing var :: ?y x1
[3] changing var :: ?i x3
[4] __primitive.gt &3 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert &1 6 :: i? x1
[8] return [7] -> 25
[9] __primitive.gt &3 5 :: y x1
[10] __primitive.assert 24 9 :: i? x1
[11] __primitive.open 2 12 -> 13 :: y x2
[12] val "stream,in:std" :: s x1
[13] __primitive.dep 11 :: o x1
[14] __primitive.sub 3 15 :: i x1
[15] val 1 :: i x1
[16] io.getline_loop 11 13 18 -> 22 19 :: y x3
[18] val "" :: s x1
[19] __primitive.dep 16 :: s x1
[20] __primitive.from_string 19 :: i? x1
[21] __primitive.add 20 1 :: i x1
[22] __primitive.dep 16 :: o x1
[23] __primitive.close 16 22 :: y x1
[24] tests.sum_times2_r0 14 23 21 :: i x1
[25] return [10]

___ tests.sum_times2v (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?y x1
[3] val 0 :: i x1
[4] tests.sum_times2v_r0 1 2 3 :: i x1
[5] return [4]

___ tests.sum_times2v_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?i x2
[2] changing var :: ?y x1
[3] changing var :: ?i x3
[4] __primitive.gt &3 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert &1 6 :: i? x1
[8] return [7] -> 34
[9] __primitive.gt &3 5 :: y x1
[10] __primitive.assert 33 9 :: i? x1
[11] __primitive.open 2 12 -> 13 :: y x2
[12] val "stream,in:std" :: s x1
[13] __primitive.dep 11 :: o x1
[14] __primitive.sub 3 15 :: i x1
[15] val 1 :: i x1
[16] io.getline_loop 11 13 18 -> 22 19 :: y x3
[18] val "" :: s x1
[19] __primitive.dep 16 :: s x2
[20] __primitive.from_string &19 :: i? x1
[21] __primitive.add 20 1 :: i x1
[22] __primitive.dep 16 :: o x1
[23] __primitive.close 16 22 :: y x1
[24] __primitive.open 23 25 -> 26 :: y x2
[25] val "stream,out:std" :: s x1
[26] __primitive.dep 24 :: o x1
[27] __primitive.strcat &28 19 :: s x1
[28] val "'" :: s x2
[29] __primitive.strcat 27 28 :: s x1
[30] __primitive.write 24 26 29 -> 31 :: y x2
[31] __primitive.dep 30 :: o x1
[32] __primitive.close 30 31 :: y x1
[33] tests.sum_times2v_r0 14 32 21 :: i x1
[34] return [10]

___ tests.test_ap11 (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] __primitive.ap 2 1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [4]

___ tests.test_ap12 (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] __primitive.ap 2 1 -> 5 4 :: v? x2
[4] __primitive.dep 3 :: a x1
[5] __primitive.dep 3 :: a x1
[6] return [5 4]

___ tests.test_ap21 (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 2 1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] return [5]

___ tests.vifte_collatz (1 -> 1) x2 rec ___
[1] changing var :: ?i x2
[2] tests.vifte_collatz_step 1 :: i x3
[3] __primitive.seq 4 &2 :: v x1
[4] tests.vifte_collatz 2 :: v x1
[5] return [3] -> 7
[6] __primitive.otherwise 2 1 :: i x1
[7] return [6]

___ tests.vifte_collatz_step (1 -> 1) x2 ___
[1] var :: ?i x4
[2] __primitive.bitand &1 &3 :: i x1
[3] val 1 :: i x6
[4] __primitive.eq 2 &3 :: y x1
[5] __primitive.assert 8 4 :: i? x2
[6] __primitive.mul &1 7 :: i x1
[7] val 3 :: i x1
[8] __primitive.add 6 &3 :: i x1
[9] __primitive.gt &5 &3 :: y x1
[10] __primitive.assert 5 9 :: i? x1
[11] return [10] -> 20
[12] __primitive.bitand &1 &3 :: i x1
[13] __primitive.eq 12 14 :: y x1
[14] val 0 :: i x1
[15] __primitive.assert 16 13 :: i? x2
[16] __primitive.div 1 17 :: i? x1
[17] val 2 :: i x1
[18] __primitive.gt &15 3 :: y x1
[19] __primitive.assert 15 18 :: i? x1
[20] return [19]

___ tests.vifte_quote (1 -> 1) x2 ___
[1] var :: ?i x3
[2] __primitive.seq 3 &1 :: i x1
[3] __primitive.add 1 4 :: i x1
[4] val 1 :: i x1
[5] return [2] -> 8
[6] __primitive.otherwise 1 7 :: i x1
[7] val 0 :: i x1
[8] return [6]

___ tests.while_length (1 -> 1) ___
[1] var :: ?l x1
[2] val 0 :: i x1
[3] tests.while_length_r0 2 1 :: v x1
[4] return [3]

___ tests.while_length_r0 (2 -> 1) rec ___
[1] changing var :: ?l x1
[2] changing var :: ?i x1
[3] __primitive.add 2 4 :: i x1
[4] val 1 :: i x1
[5] __primitive.ap 1 -> X :: l? x1
[6] tests.while_length_r0 3 5 :: v x1
[7] return [6]

___ tests.zip (3 -> 1) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] tests.zip_r0 3 2 1 :: l x1
[5] return [4]

___ tests.zip_r0 (3 -> 1) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.quote 3 2 1 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.zip1 (4 -> 4) ___
[1] var :: ?l x1
[2] var :: ?l x2
[3] var :: ?l x1
[4] var :: ?l x1
[5] __primitive.ap 4 -> 6 :: l? x2
[6] __primitive.dep 5 :: a x1
[7] __primitive.ap 3 -> 8 :: l? x2
[8] __primitive.dep 7 :: a x1
[9] __primitive.ap 6 8 &2 :: l x1
[10] __primitive.compose 9 1 :: l x1
[11] return [5 7 2 10]

