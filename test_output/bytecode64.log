___ algorithm.__caret__ (2 -> 1) ___
[1] var, type = ?i x1
[2] var, type = ?i x1
[3] algorithm.exponent_r0 5 2 1 -> X X, type = a x1
[5] val 1, type = i x1
[6] return [ 3 ], type = r x1

___ algorithm.acc_odd_power (3 -> 1) x2 ___
[1] var, type = ?i x2
[2] var, type = ?i x1
[3] var, type = ?i x2
[4] __primitive.bitand 1 5, type = i x1
[5] val 1, type = i x4
[6] __primitive.eq 4 5, type = s x1
[7] __primitive.assert 8 6, type = i x1
[8] __primitive.mul 3 2, type = i x1
[9] return [ 7 ], type = r -> 14 x1
[10] __primitive.bitand 1 5, type = i x1
[11] __primitive.eq 10 5, type = s x1
[12] __primitive.not 11, type = s x1
[13] __primitive.assert 3 12, type = i x1
[14] return [ 13 ], type = r x1

___ algorithm.exponent (3 -> 1) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] algorithm.exponent_r0 3 2 1 -> X X, type = a x1
[6] return [ 4 ], type = r x1

___ algorithm.exponent_r0 (3 -> 3) x3 rec ___
[1] var, type = ?*i x6
[2] var, type = ?*i x4
[3] var, type = ?*i x3
[4] __primitive.neq 1 5, type = s x1
[5] val 0, type = i x2
[6] __primitive.not 4, type = s x3
[7] __primitive.assert 1 6, type = i x1
[8] __primitive.assert 2 6, type = i x1
[9] __primitive.assert 3 6, type = i x1
[10] return [ 9 8 7 ], type = r -> 30 x1
[11] __primitive.neq 1 5, type = s x6
[12] __primitive.assert 22 11, type = a x1
[13] __primitive.bitand 1 14, type = i x1
[14] val 1, type = i x5
[15] __primitive.eq 13 14, type = s x1
[16] __primitive.assert 17 15, type = i x1
[17] __primitive.mul 3 2, type = i x1
[18] __primitive.mul 2 2, type = i x2
[19] __primitive.shiftr 1 14, type = i x2
[20] algorithm.exponent_r0 16 18 19 -> 28 22, type = a x3
[22] __primitive.dep 20, type = a x1
[23] __primitive.bitand 1 14, type = i x1
[24] __primitive.eq 23 14, type = s x1
[25] __primitive.not 24, type = s x1
[26] __primitive.assert 3 25, type = i x1
[27] __primitive.assert 28 11, type = a x1
[28] __primitive.dep 20, type = a x1
[29] __primitive.assert 20 11, type = a x1
[30] return [ 29 27 12 ], type = r -> 38 x1
[31] __primitive.assert 34 11, type = a x1
[32] algorithm.exponent_r0 26 18 19 -> 34 36, type = a x3
[34] __primitive.dep 32, type = a x1
[35] __primitive.assert 36 11, type = a x1
[36] __primitive.dep 32, type = a x1
[37] __primitive.assert 32 11, type = a x1
[38] return [ 37 31 35 ], type = r x1

___ algorithm.gcd (2 -> 1) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] algorithm.gcd_r0 2 1 -> X, type = a x1
[4] return [ 3 ], type = r x1

___ algorithm.gcd_r0 (2 -> 2) x2 rec ___
[1] var, type = ?*i x5
[2] var, type = ?*i x2
[3] __primitive.neq 1 4, type = s x1
[4] val 0, type = i x2
[5] __primitive.not 3, type = s x2
[6] __primitive.assert 1 5, type = i x1
[7] __primitive.assert 2 5, type = i x1
[8] return [ 7 6 ], type = r -> 15 x1
[9] __primitive.neq 1 4, type = s x2
[10] __primitive.assert 12 9, type = a x1
[11] __primitive.mod 2 1, type = i x1
[12] algorithm.gcd_r0 1 11 -> 14, type = a x2
[13] __primitive.assert 14 9, type = a x1
[14] __primitive.dep 12, type = a x1
[15] return [ 10 13 ], type = r x1

___ algorithm.iota2 (1 -> 1) ___
[1] var, type = ?f x1
[2] algorithm.iota2_r0 1, type = a x1
[3] return [ 2 ], type = r x1

___ algorithm.iota2_r0 (1 -> 1) x2 rec ___
[1] var, type = ?*f x4
[2] __primitive.ap 1 -> 3, type = f x1
[3] __primitive.dep 2, type = i x1
[4] __primitive.gt 3 5, type = s x1
[5] val 0, type = i x2
[6] __primitive.not 4, type = s x1
[7] __primitive.assert 1 6, type = f x1
[8] return [ 7 ], type = r -> 19 x1
[9] __primitive.ap 1 -> 10, type = f x1
[10] __primitive.dep 9, type = i x1
[11] __primitive.gt 10 5, type = s x1
[12] __primitive.assert 18 11, type = a x1
[13] __primitive.ap 1 -> 14, type = f x2
[14] __primitive.dep 13, type = i x2
[15] __primitive.sub 14 16, type = i x1
[16] val 1, type = i x1
[17] algorithm.iota2_r0_q0 15 14 13, type = f x1
[18] algorithm.iota2_r0 17, type = a x1
[19] return [ 12 ], type = r x1

___ algorithm.iota2_r0_q0 (3 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?i x1
[3] var, type = ?i x1
[4] __primitive.compose 1 2 3 [], type = f x1
[5] return [ 4 ], type = r x1

___ algorithm.power_step (3 -> 3) x2 ___
[1] var, type = ?i x3
[2] var, type = ?i x3
[3] var, type = ?i x2
[4] __primitive.shiftr 1 5, type = i x2
[5] val 1, type = i x5
[6] __primitive.mul 2 2, type = i x2
[7] __primitive.bitand 1 5, type = i x1
[8] __primitive.eq 7 5, type = s x1
[9] __primitive.assert 10 8, type = i x1
[10] __primitive.mul 3 2, type = i x1
[11] return [ 9 6 4 ], type = r -> 16 x1
[12] __primitive.bitand 1 5, type = i x1
[13] __primitive.eq 12 5, type = s x1
[14] __primitive.not 13, type = s x1
[15] __primitive.assert 3 14, type = i x1
[16] return [ 15 6 4 ], type = r x1

___ algorithm.reduce_power (2 -> 2) ___
[1] var, type = ?i x1
[2] var, type = ?i x2
[3] __primitive.shiftr 1 4, type = i x1
[4] val 1, type = i x1
[5] __primitive.mul 2 2, type = i x1
[6] return [ 5 3 ], type = r x1

___ control.$ (2 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] __primitive.ap 2 1 -> 4, type = f x1
[4] __primitive.dep 3, type = a x1
[5] return [ 4 ], type = r x1

___ control.$$ (3 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] __primitive.ap 3 2 1 -> 5, type = f x1
[5] __primitive.dep 4, type = a x1
[6] return [ 5 ], type = r x1

___ control.$keep (2 -> 2) ___
[1] var, type = ?f x2
[2] var, type = ?a x1
[3] __primitive.ap 2 1 -> 4, type = f x1
[4] __primitive.dep 3, type = a x1
[5] return [ 4 1 ], type = r x1

___ control.-> (2 -> 2) ___
[1] var, type = ?f x1
[2] var, type = ?a x2
[3] __primitive.ap 2 1 -> 4, type = f x1
[4] __primitive.dep 3, type = a x1
[5] return [ 4 2 ], type = r x1

___ control.both (3 -> 2) ___
[1] var, type = ?f x2
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] __primitive.ap 2 1 -> 5, type = f x1
[5] __primitive.dep 4, type = a x1
[6] __primitive.ap 3 1 -> 7, type = f x1
[7] __primitive.dep 6, type = a x1
[8] return [ 7 5 ], type = r x1

___ control.dip11 (3 -> 2) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] __primitive.ap 3 1 -> 5, type = f x1
[5] __primitive.dep 4, type = a x1
[6] return [ 5 2 ], type = r x1

___ control.dip12 (3 -> 3) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] __primitive.ap 3 1 -> 6 5, type = f x2
[5] __primitive.dep 4, type = a x1
[6] __primitive.dep 4, type = a x1
[7] return [ 6 5 2 ], type = r x1

___ control.dip13 (3 -> 4) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] __primitive.ap 3 1 -> 7 6 5, type = f x3
[5] __primitive.dep 4, type = a x1
[6] __primitive.dep 4, type = a x1
[7] __primitive.dep 4, type = a x1
[8] return [ 7 6 5 2 ], type = r x1

___ control.dip14 (3 -> 5) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] __primitive.ap 3 1 -> 9 8 7 6, type = f x4
[6] __primitive.dep 4, type = a x1
[7] __primitive.dep 4, type = a x1
[8] __primitive.dep 4, type = a x1
[9] __primitive.dep 4, type = a x1
[10] return [ 9 8 7 6 2 ], type = r x1

___ control.dip15 (3 -> 6) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] __primitive.ap 3 1 -> 10 9 8 7 6, type = f x5
[6] __primitive.dep 4, type = a x1
[7] __primitive.dep 4, type = a x1
[8] __primitive.dep 4, type = a x1
[9] __primitive.dep 4, type = a x1
[10] __primitive.dep 4, type = a x1
[11] return [ 10 9 8 7 6 2 ], type = r x1

___ control.dip21 (4 -> 2) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] __primitive.ap 4 3 1 -> 6, type = f x1
[6] __primitive.dep 5, type = a x1
[7] return [ 6 2 ], type = r x1

___ control.dip22 (4 -> 3) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] __primitive.ap 4 3 1 -> 7 6, type = f x2
[6] __primitive.dep 5, type = a x1
[7] __primitive.dep 5, type = a x1
[8] return [ 7 6 2 ], type = r x1

___ control.dip23 (4 -> 4) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] __primitive.ap 4 3 1 -> 9 8 7, type = f x3
[7] __primitive.dep 5, type = a x1
[8] __primitive.dep 5, type = a x1
[9] __primitive.dep 5, type = a x1
[10] return [ 9 8 7 2 ], type = r x1

___ control.dip24 (4 -> 5) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] __primitive.ap 4 3 1 -> 10 9 8 7, type = f x4
[7] __primitive.dep 5, type = a x1
[8] __primitive.dep 5, type = a x1
[9] __primitive.dep 5, type = a x1
[10] __primitive.dep 5, type = a x1
[11] return [ 10 9 8 7 2 ], type = r x1

___ control.dip25 (4 -> 6) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] __primitive.ap 4 3 1 -> 11 10 9 8 7, type = f x5
[7] __primitive.dep 5, type = a x1
[8] __primitive.dep 5, type = a x1
[9] __primitive.dep 5, type = a x1
[10] __primitive.dep 5, type = a x1
[11] __primitive.dep 5, type = a x1
[12] return [ 11 10 9 8 7 2 ], type = r x1

___ control.dip31 (5 -> 2) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] __primitive.ap 5 4 3 1 -> 7, type = f x1
[7] __primitive.dep 6, type = a x1
[8] return [ 7 2 ], type = r x1

___ control.dip32 (5 -> 3) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] __primitive.ap 5 4 3 1 -> 9 8, type = f x2
[8] __primitive.dep 6, type = a x1
[9] __primitive.dep 6, type = a x1
[10] return [ 9 8 2 ], type = r x1

___ control.dip33 (5 -> 4) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] __primitive.ap 5 4 3 1 -> 10 9 8, type = f x3
[8] __primitive.dep 6, type = a x1
[9] __primitive.dep 6, type = a x1
[10] __primitive.dep 6, type = a x1
[11] return [ 10 9 8 2 ], type = r x1

___ control.dip34 (5 -> 5) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] __primitive.ap 5 4 3 1 -> 11 10 9 8, type = f x4
[8] __primitive.dep 6, type = a x1
[9] __primitive.dep 6, type = a x1
[10] __primitive.dep 6, type = a x1
[11] __primitive.dep 6, type = a x1
[12] return [ 11 10 9 8 2 ], type = r x1

___ control.dip35 (5 -> 6) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] __primitive.ap 5 4 3 1 -> 12 11 10 9 8, type = f x5
[8] __primitive.dep 6, type = a x1
[9] __primitive.dep 6, type = a x1
[10] __primitive.dep 6, type = a x1
[11] __primitive.dep 6, type = a x1
[12] __primitive.dep 6, type = a x1
[13] return [ 12 11 10 9 8 2 ], type = r x1

___ control.dip41 (6 -> 2) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] var, type = ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 9, type = f x1
[9] __primitive.dep 7, type = a x1
[10] return [ 9 2 ], type = r x1

___ control.dip42 (6 -> 3) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] var, type = ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 10 9, type = f x2
[9] __primitive.dep 7, type = a x1
[10] __primitive.dep 7, type = a x1
[11] return [ 10 9 2 ], type = r x1

___ control.dip43 (6 -> 4) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] var, type = ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 11 10 9, type = f x3
[9] __primitive.dep 7, type = a x1
[10] __primitive.dep 7, type = a x1
[11] __primitive.dep 7, type = a x1
[12] return [ 11 10 9 2 ], type = r x1

___ control.dip44 (6 -> 5) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] var, type = ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 12 11 10 9, type = f x4
[9] __primitive.dep 7, type = a x1
[10] __primitive.dep 7, type = a x1
[11] __primitive.dep 7, type = a x1
[12] __primitive.dep 7, type = a x1
[13] return [ 12 11 10 9 2 ], type = r x1

___ control.dip45 (6 -> 6) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] var, type = ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 13 12 11 10 9, type = f x5
[9] __primitive.dep 7, type = a x1
[10] __primitive.dep 7, type = a x1
[11] __primitive.dep 7, type = a x1
[12] __primitive.dep 7, type = a x1
[13] __primitive.dep 7, type = a x1
[14] return [ 13 12 11 10 9 2 ], type = r x1

___ control.dip51 (7 -> 2) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] var, type = ?a x1
[7] var, type = ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 10, type = f x1
[10] __primitive.dep 8, type = a x1
[11] return [ 10 2 ], type = r x1

___ control.dip52 (7 -> 3) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] var, type = ?a x1
[7] var, type = ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 11 10, type = f x2
[10] __primitive.dep 8, type = a x1
[11] __primitive.dep 8, type = a x1
[12] return [ 11 10 2 ], type = r x1

___ control.dip53 (7 -> 4) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] var, type = ?a x1
[7] var, type = ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 12 11 10, type = f x3
[10] __primitive.dep 8, type = a x1
[11] __primitive.dep 8, type = a x1
[12] __primitive.dep 8, type = a x1
[13] return [ 12 11 10 2 ], type = r x1

___ control.dip54 (7 -> 5) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] var, type = ?a x1
[7] var, type = ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 13 12 11 10, type = f x4
[10] __primitive.dep 8, type = a x1
[11] __primitive.dep 8, type = a x1
[12] __primitive.dep 8, type = a x1
[13] __primitive.dep 8, type = a x1
[14] return [ 13 12 11 10 2 ], type = r x1

___ control.dip55 (7 -> 6) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] var, type = ?a x1
[7] var, type = ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 14 13 12 11 10, type = f x5
[10] __primitive.dep 8, type = a x1
[11] __primitive.dep 8, type = a x1
[12] __primitive.dep 8, type = a x1
[13] __primitive.dep 8, type = a x1
[14] __primitive.dep 8, type = a x1
[15] return [ 14 13 12 11 10 2 ], type = r x1

___ control.either (3 -> 1) x2 ___
[1] var, type = ?f x1
[2] var, type = ?f x1
[3] var, type = ?f x2
[4] __primitive.ap 3 -> 9 5, type = f x2
[5] __primitive.dep 4, type = s x1
[6] __primitive.eq_s 5 7, type = s x1
[7] val Right, type = s x1
[8] __primitive.assert 9 6, type = a x1
[9] __primitive.dep 4, type = a x1
[10] __primitive.ap 8 1 -> 11, type = f x1
[11] __primitive.dep 10, type = a x1
[12] return [ 11 ], type = r -> 21 x1
[13] __primitive.ap 3 -> 18 14, type = f x2
[14] __primitive.dep 13, type = s x1
[15] __primitive.eq_s 14 16, type = s x1
[16] val Left, type = s x1
[17] __primitive.assert 18 15, type = a x1
[18] __primitive.dep 13, type = a x1
[19] __primitive.ap 17 2 -> 20, type = f x1
[20] __primitive.dep 19, type = a x1
[21] return [ 20 ], type = r x1

___ control.fork (3 -> 2) ___
[1] var, type = ?f x1
[2] var, type = ?f x1
[3] var, type = ?a x2
[4] __primitive.ap 3 1 -> 5, type = f x1
[5] __primitive.dep 4, type = a x1
[6] __primitive.ap 3 2 -> 7, type = f x1
[7] __primitive.dep 6, type = a x1
[8] return [ 7 5 ], type = r x1

___ control.if (3 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?f x1
[3] var, type = ?a x2
[4] __primitive.ap 3 2 -> 5, type = f x1
[5] __primitive.dep 4, type = s x1
[6] __primitive.assert 8 5, type = a x1
[7] __primitive.ap 3 1 -> 8, type = f x1
[8] __primitive.dep 7, type = a x1
[9] return [ 6 ], type = r x1

___ control.ifdo (2 -> 1) x2 ___
[1] var, type = ?f x2
[2] var, type = ?a x3
[3] __primitive.ap 2 1 -> 6 4, type = f x2
[4] __primitive.dep 3, type = s x1
[5] __primitive.assert 6 4, type = a x1
[6] __primitive.dep 3, type = a x1
[7] return [ 5 ], type = r -> 14 x1
[8] __primitive.ap 2 2 1 -> 10 X 11, type = f x2
[10] __primitive.dep 8, type = a x1
[11] __primitive.dep 8, type = s x1
[12] __primitive.not 11, type = s x1
[13] __primitive.assert 10 12, type = a x1
[14] return [ 13 ], type = r x1

___ control.ifte (3 -> 1) x2 ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?s x2
[4] __primitive.not 3, type = s x1
[5] __primitive.assert 1 4, type = a x1
[6] return [ 5 ], type = r -> 8 x1
[7] __primitive.assert 2 3, type = a x1
[8] return [ 7 ], type = r x1

___ control.in2 (2 -> 3) ___
[1] var, type = ?a x2
[2] var, type = ?a x2
[3] control.in2_q0 1 2, type = a x1
[4] return [ 2 1 3 ], type = r x1

___ control.in2_q0 (2 -> 1) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] __primitive.ap 1 2 [], type = f x1
[4] return [ 3 ], type = r x1

___ control.iterate (3 -> 1) x2 rec ___
[1] var, type = ?f x3
[2] var, type = ?f x2
[3] var, type = ?*a x4
[4] __primitive.ap 3 1 -> 5, type = f x1
[5] __primitive.dep 4, type = s x1
[6] __primitive.ap 3 1 -> 7, type = f x1
[7] __primitive.dep 6, type = s x1
[8] __primitive.not 7, type = s x1
[9] __primitive.assert 3 8, type = a x1
[10] return [ 9 ], type = r -> 15 x1
[11] __primitive.assert 14 5, type = a x1
[12] __primitive.ap 3 2 -> 13, type = f x1
[13] __primitive.dep 12, type = a x1
[14] control.iterate 13 2 1, type = a x1
[15] return [ 11 ], type = r x1

___ control.maybe (3 -> 1) x2 ___
[1] var, type = ?a x2
[2] var, type = ?a x2
[3] var, type = ?f x2
[4] __primitive.ap 1 2 3 -> 10 X 6, type = f x2
[6] __primitive.dep 4, type = s x1
[7] __primitive.eq_s 6 8, type = s x1
[8] val Nothing, type = s x1
[9] __primitive.assert 10 7, type = a x1
[10] __primitive.dep 4, type = a x1
[11] return [ 9 ], type = r -> 22 x1
[12] __primitive.ap 1 2 3 -> 14 19 15, type = f x3
[14] __primitive.dep 12, type = f x1
[15] __primitive.dep 12, type = s x1
[16] __primitive.eq_s 15 17, type = s x1
[17] val Just, type = s x1
[18] __primitive.assert 19 16, type = a x1
[19] __primitive.dep 12, type = a x1
[20] __primitive.ap 18 14 -> 21, type = f x1
[21] __primitive.dep 20, type = a x1
[22] return [ 21 ], type = r x1

___ control.para (4 -> 2) ___
[1] var, type = ?f x1
[2] var, type = ?f x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] __primitive.ap 3 1 -> 6, type = f x1
[6] __primitive.dep 5, type = a x1
[7] __primitive.ap 4 2 -> 8, type = f x1
[8] __primitive.dep 7, type = a x1
[9] return [ 8 6 ], type = r x1

___ control.peek (2 -> 2) ___
[1] var, type = ?f x1
[2] var, type = ?a x2
[3] __primitive.ap 2 1 -> 4, type = f x1
[4] __primitive.dep 3, type = a x1
[5] return [ 2 4 ], type = r x1

___ stack.swap3 (4 -> 4) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] return [ 3 2 1 4 ], type = r x1

___ control.times (3 -> 1) ___
[1] var, type = ?a x1
[2] var, type = ?f x1
[3] var, type = ?a x1
[4] control.times_r0 3 2 1 -> X X, type = a x1
[6] return [ 4 ], type = r x1

___ control.times_r0 (3 -> 3) x2 rec ___
[1] var, type = ?*i x4
[2] var, type = ?f x3
[3] var, type = ?*a x2
[4] __primitive.gt 1 5, type = s x1
[5] val 0, type = i x2
[6] __primitive.not 4, type = s x3
[7] __primitive.assert 1 6, type = i x1
[8] __primitive.assert 2 6, type = f x1
[9] __primitive.assert 3 6, type = a x1
[10] return [ 9 8 7 ], type = r -> 23 x1
[11] __primitive.gt 1 5, type = s x3
[12] __primitive.assert 19 11, type = a x1
[13] __primitive.ap 3 2 -> 14, type = f x1
[14] __primitive.dep 13, type = i x1
[15] __primitive.sub 1 16, type = i x1
[16] val 1, type = i x1
[17] control.times_r0 14 2 15 -> 21 19, type = a x3
[19] __primitive.dep 17, type = a x1
[20] __primitive.assert 21 11, type = a x1
[21] __primitive.dep 17, type = a x1
[22] __primitive.assert 17 11, type = a x1
[23] return [ 22 20 12 ], type = r x1

___ control.times_step (3 -> 3) ___
[1] var, type = ?i x1
[2] var, type = ?f x2
[3] var, type = ?a x1
[4] __primitive.sub 1 5, type = i x1
[5] val 1, type = i x1
[6] __primitive.ap 3 2 -> 7, type = f x1
[7] __primitive.dep 6, type = a x1
[8] return [ 7 2 4 ], type = r x1

___ list.!! (2 -> 1) ___
[1] var, type = ?i x1
[2] var, type = ?a x1
[3] list.dropl_r0 2 1 -> X, type = f x1
[4] __primitive.ap 3 -> 5, type = f x1
[5] __primitive.dep 4, type = a x1
[6] return [ 5 ], type = r x1

___ list.dropl (2 -> 1) ___
[1] var, type = ?a x1
[2] var, type = ?f x1
[3] list.dropl_r0 2 1 -> X, type = a x1
[4] return [ 3 ], type = r x1

___ list.dropl_r0 (2 -> 2) x2 rec ___
[1] var, type = ?*i x4
[2] var, type = ?*f x2
[3] __primitive.gt 1 4, type = s x1
[4] val 0, type = i x2
[5] __primitive.not 3, type = s x2
[6] __primitive.assert 1 5, type = i x1
[7] __primitive.assert 2 5, type = f x1
[8] return [ 7 6 ], type = r -> 17 x1
[9] __primitive.gt 1 4, type = s x2
[10] __primitive.assert 14 9, type = a x1
[11] __primitive.sub 1 12, type = i x1
[12] val 1, type = i x1
[13] __primitive.ap 2 -> X, type = f x1
[14] list.dropl_r0 13 11 -> 16, type = a x2
[15] __primitive.assert 16 9, type = a x1
[16] __primitive.dep 14, type = a x1
[17] return [ 10 15 ], type = r x1

___ list.filter_step (3 -> 3) x2 ___
[1] var, type = ?f x3
[2] var, type = ?f x2
[3] var, type = ?f x1
[4] __primitive.ap 3 -> 5, type = f x3
[5] __primitive.dep 4, type = a x2
[6] __primitive.ap 5 1 -> 7, type = f x1
[7] __primitive.dep 6, type = s x2
[8] __primitive.not 7, type = s x1
[9] __primitive.assert 2 8, type = f x1
[10] return [ 4 9 1 ], type = r -> 13 x1
[11] __primitive.assert 12 7, type = f x1
[12] __primitive.ap 5 2, type = f x1
[13] return [ 4 11 1 ], type = r x1

___ list.foldl_step (3 -> 3) ___
[1] var, type = ?f x1
[2] var, type = ?f x1
[3] var, type = ?f x2
[4] __primitive.ap 2 -> 5, type = f x2
[5] __primitive.dep 4, type = a x1
[6] __primitive.ap 5 3, type = f x1
[7] __primitive.compose 6 1, type = f x1
[8] return [ 3 4 7 ], type = r x1

___ list.foldr_step (3 -> 3) ___
[1] var, type = ?a x1
[2] var, type = ?f x1
[3] var, type = ?f x2
[4] __primitive.ap 2 -> 5, type = f x2
[5] __primitive.dep 4, type = a x1
[6] __primitive.ap 5 1 3 -> 7, type = f x1
[7] __primitive.dep 6, type = a x1
[8] return [ 3 4 7 ], type = r x1

___ list.head (1 -> 1) ___
[1] var, type = ?f x1
[2] __primitive.ap 1 -> 3, type = f x1
[3] __primitive.dep 2, type = a x1
[4] return [ 3 ], type = r x1

___ list.iteratel (2 -> 1) rec ___
[1] var, type = ?f x2
[2] var, type = ?*a x2
[3] __primitive.ap 2 1 -> 4, type = f x1
[4] __primitive.dep 3, type = a x1
[5] list.iteratel 4 1, type = a x1
[6] list.iteratel_q0 2 5, type = a x1
[7] return [ 6 ], type = r x1

___ list.iteratel_q0 (2 -> 1) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] __primitive.ap 1 2 [], type = f x1
[4] return [ 3 ], type = r x1

___ list.length_step (1 -> 1) ___
[1] var, type = ?f x1
[2] __primitive.ap 1 -> 3 6, type = f x3
[3] __primitive.dep 2, type = i x1
[4] __primitive.add 3 5, type = i x1
[5] val 1, type = i x1
[6] __primitive.dep 2, type = f x1
[7] __primitive.ap 6 -> X, type = f x1
[8] list.length_step_q0 7 4 2, type = a x1
[9] return [ 8 ], type = r x1

___ list.length_step_q0 (3 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?i x1
[3] var, type = ?f x1
[4] __primitive.compose 1 2 5 [], type = f x1
[5] list.length_step_q0_q0 3, type = a x1
[6] return [ 4 ], type = r x1

___ list.length_step_q0_q0 (1 -> 1) ___
[1] var, type = ?f x1
[2] return [ 1 ], type = r x1

___ list.mov_ap (3 -> 3) ___
[1] var, type = ?f x2
[2] var, type = ?f x1
[3] var, type = ?f x1
[4] __primitive.ap 3 -> 5, type = f x2
[5] __primitive.dep 4, type = a x1
[6] __primitive.ap 5 1, type = f x1
[7] __primitive.compose 6 2, type = f x1
[8] return [ 4 7 1 ], type = r x1

___ list.movr (2 -> 2) ___
[1] var, type = ?f x1
[2] var, type = ?f x1
[3] __primitive.ap 2 -> 4, type = f x2
[4] __primitive.dep 3, type = a x1
[5] __primitive.ap 4 1, type = f x1
[6] return [ 3 5 ], type = r x1

___ list.pushif (3 -> 1) x2 ___
[1] var, type = ?f x1
[2] var, type = ?f x2
[3] var, type = ?a x2
[4] __primitive.ap 3 1 -> 5, type = f x1
[5] __primitive.dep 4, type = s x2
[6] __primitive.not 5, type = s x1
[7] __primitive.assert 2 6, type = f x1
[8] return [ 7 ], type = r -> 11 x1
[9] __primitive.assert 10 5, type = f x1
[10] __primitive.ap 3 2, type = f x1
[11] return [ 9 ], type = r x1

___ list.split_at (3 -> 2) ___
[1] var, type = ?a x1
[2] var, type = ?f x1
[3] var, type = ?f x1
[4] list.split_at_r0 3 2 1 -> 6 X, type = a x2
[6] __primitive.dep 4, type = a x1
[7] return [ 4 6 ], type = r x1

___ list.split_at_r0 (3 -> 3) x2 rec ___
[1] var, type = ?*i x4
[2] var, type = ?*f x2
[3] var, type = ?*f x2
[4] __primitive.gt 1 5, type = s x1
[5] val 0, type = i x2
[6] __primitive.not 4, type = s x3
[7] __primitive.assert 1 6, type = i x1
[8] __primitive.assert 2 6, type = f x1
[9] __primitive.assert 3 6, type = f x1
[10] return [ 9 8 7 ], type = r -> 24 x1
[11] __primitive.gt 1 5, type = s x3
[12] __primitive.assert 20 11, type = a x1
[13] __primitive.sub 1 14, type = i x1
[14] val 1, type = i x1
[15] __primitive.ap 3 -> 16, type = f x2
[16] __primitive.dep 15, type = a x1
[17] __primitive.ap 16 2, type = f x1
[18] list.split_at_r0 15 17 13 -> 22 20, type = a x3
[20] __primitive.dep 18, type = a x1
[21] __primitive.assert 22 11, type = a x1
[22] __primitive.dep 18, type = a x1
[23] __primitive.assert 18 11, type = a x1
[24] return [ 23 21 12 ], type = r x1

___ logic.and (2 -> 1) x2 ___
[1] var, type = ?s x2
[2] var, type = ?a x1
[3] __primitive.assert 2 1, type = a x1
[4] return [ 3 ], type = r -> 8 x1
[5] __primitive.not 1, type = s x1
[6] __primitive.assert 7 5, type = s x1
[7] val False, type = s x1
[8] return [ 6 ], type = r x1

___ logic.implies (2 -> 1) x2 ___
[1] var, type = ?a x1
[2] var, type = ?s x1
[3] __primitive.not 2, type = s x2
[4] __primitive.not 3, type = s x1
[5] __primitive.assert 1 4, type = a x1
[6] return [ 5 ], type = r -> 9 x1
[7] __primitive.assert 8 3, type = s x1
[8] val True, type = s x1
[9] return [ 7 ], type = r x1

___ logic.or (2 -> 1) x2 ___
[1] var, type = ?s x2
[2] var, type = ?a x1
[3] __primitive.not 1, type = s x1
[4] __primitive.assert 2 3, type = a x1
[5] return [ 4 ], type = r -> 8 x1
[6] __primitive.assert 7 1, type = s x1
[7] val True, type = s x1
[8] return [ 6 ], type = r x1

___ num.even (1 -> 1) ___
[1] var, type = ?i x1
[2] __primitive.bitand 1 3, type = i x1
[3] val 1, type = i x1
[4] __primitive.eq 2 5, type = s x1
[5] val 0, type = i x1
[6] return [ 4 ], type = r x1

___ num.max (2 -> 1) x2 ___
[1] var, type = ?i x3
[2] var, type = ?i x3
[3] __primitive.lte 2 1, type = s x1
[4] __primitive.assert 1 3, type = i x1
[5] return [ 4 ], type = r -> 8 x1
[6] __primitive.lte 1 2, type = s x1
[7] __primitive.assert 2 6, type = i x1
[8] return [ 7 ], type = r x1

___ num.min (2 -> 1) x2 ___
[1] var, type = ?i x3
[2] var, type = ?i x3
[3] __primitive.gt 2 1, type = s x1
[4] __primitive.assert 1 3, type = i x1
[5] return [ 4 ], type = r -> 8 x1
[6] __primitive.gt 1 2, type = s x1
[7] __primitive.assert 2 6, type = i x1
[8] return [ 7 ], type = r x1

___ num.odd (1 -> 1) ___
[1] var, type = ?i x1
[2] __primitive.bitand 1 3, type = i x1
[3] val 1, type = i x2
[4] __primitive.eq 2 3, type = s x1
[5] return [ 4 ], type = r x1

___ stack.-swap2 (3 -> 3) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] return [ 1 3 2 ], type = r x1

___ stack.-swap3 (4 -> 4) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] return [ 1 4 3 2 ], type = r x1

___ stack.-swap4 (5 -> 5) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] return [ 1 5 4 3 2 ], type = r x1

___ stack.-swap5 (6 -> 6) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] var, type = ?a x1
[7] return [ 1 6 5 4 3 2 ], type = r x1

___ stack.-swap6 (7 -> 7) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] var, type = ?a x1
[7] var, type = ?a x1
[8] return [ 1 7 6 5 4 3 2 ], type = r x1

___ stack.dup2 (2 -> 4) ___
[1] var, type = ?a x2
[2] var, type = ?a x2
[3] return [ 2 1 2 1 ], type = r x1

___ stack.nip (2 -> 1) ___
[1] var, type = ?a x1
[2] return [ 1 ], type = r x1

___ stack.over (2 -> 3) ___
[1] var, type = ?a x1
[2] var, type = ?a x2
[3] return [ 2 1 2 ], type = r x1

___ stack.over2 (3 -> 4) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x2
[4] return [ 3 2 1 3 ], type = r x1

___ stack.over3 (4 -> 5) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x2
[5] return [ 4 3 2 1 4 ], type = r x1

___ stack.over4 (5 -> 6) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x2
[6] return [ 5 4 3 2 1 5 ], type = r x1

___ stack.popd (1 -> 1) ___
[1] var, type = ?f x1
[2] __primitive.ap 1 -> X, type = f x1
[3] return [ 2 ], type = r x1

___ stack.pull (1 -> 2) ___
[1] var, type = ?f x1
[2] __primitive.ap 1 -> 3, type = f x2
[3] __primitive.dep 2, type = a x1
[4] return [ 3 2 ], type = r x1

___ stack.pull2 (1 -> 3) ___
[1] var, type = ?f x1
[2] __primitive.ap 1 -> 3 4, type = f x3
[3] __primitive.dep 2, type = a x1
[4] __primitive.dep 2, type = a x1
[5] return [ 4 3 2 ], type = r x1

___ stack.pull3 (1 -> 4) ___
[1] var, type = ?f x1
[2] __primitive.ap 1 -> 3 4 5, type = f x4
[3] __primitive.dep 2, type = a x1
[4] __primitive.dep 2, type = a x1
[5] __primitive.dep 2, type = a x1
[6] return [ 5 4 3 2 ], type = r x1

___ stack.pull4 (1 -> 5) ___
[1] var, type = ?f x1
[2] __primitive.ap 1 -> 3 4 5 6, type = f x5
[3] __primitive.dep 2, type = a x1
[4] __primitive.dep 2, type = a x1
[5] __primitive.dep 2, type = a x1
[6] __primitive.dep 2, type = a x1
[7] return [ 6 5 4 3 2 ], type = r x1

___ stack.pull5 (1 -> 6) ___
[1] var, type = ?f x1
[2] __primitive.ap 1 -> 4 5 6 7 8, type = f x6
[4] __primitive.dep 2, type = a x1
[5] __primitive.dep 2, type = a x1
[6] __primitive.dep 2, type = a x1
[7] __primitive.dep 2, type = a x1
[8] __primitive.dep 2, type = a x1
[9] return [ 8 7 6 5 4 2 ], type = r x1

___ stack.pull6 (1 -> 7) ___
[1] var, type = ?f x1
[2] __primitive.ap 1 -> 4 5 6 7 8 9, type = f x7
[4] __primitive.dep 2, type = a x1
[5] __primitive.dep 2, type = a x1
[6] __primitive.dep 2, type = a x1
[7] __primitive.dep 2, type = a x1
[8] __primitive.dep 2, type = a x1
[9] __primitive.dep 2, type = a x1
[10] return [ 9 8 7 6 5 4 2 ], type = r x1

___ stack.pull7 (1 -> 8) ___
[1] var, type = ?f x1
[2] __primitive.ap 1 -> 4 5 6 7 8 9 10, type = f x8
[4] __primitive.dep 2, type = a x1
[5] __primitive.dep 2, type = a x1
[6] __primitive.dep 2, type = a x1
[7] __primitive.dep 2, type = a x1
[8] __primitive.dep 2, type = a x1
[9] __primitive.dep 2, type = a x1
[10] __primitive.dep 2, type = a x1
[11] return [ 10 9 8 7 6 5 4 2 ], type = r x1

___ stack.rev3 (3 -> 3) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] return [ 1 2 3 ], type = r x1

___ stack.swap2 (3 -> 3) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] return [ 2 1 3 ], type = r x1

___ stack.swap3 (4 -> 4) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] return [ 3 2 1 4 ], type = r x1

___ stack.swap4 (5 -> 5) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] return [ 4 3 2 1 5 ], type = r x1

___ stack.swap5 (6 -> 6) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] var, type = ?a x1
[7] return [ 5 4 3 2 1 6 ], type = r x1

___ stack.swap6 (7 -> 7) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] var, type = ?a x1
[6] var, type = ?a x1
[7] var, type = ?a x1
[8] return [ 6 5 4 3 2 1 7 ], type = r x1

___ stack.tuck (2 -> 3) ___
[1] var, type = ?a x2
[2] var, type = ?a x1
[3] return [ 1 2 1 ], type = r x1

___ tests.alt_list (2 -> 1) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] tests.alt_list_q0 1 2, type = a x1
[4] return [ 3 ], type = r x1

___ tests.alt_list_q0 (2 -> 1) x2 ___
[1] var, type = ?a x2
[2] var, type = ?a x2
[3] __primitive.ap 1 1 [], type = f x1
[4] return [ 3 ], type = r -> 6 x1
[5] __primitive.ap 2 2 [], type = f x1
[6] return [ 5 ], type = r x1

___ tests.altf_loop (2 -> 1) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] tests.altf_loop_r0 2 1 -> X, type = a x1
[4] return [ 3 ], type = r x1

___ tests.altf_loop_r0 (2 -> 2) x3 rec ___
[1] var, type = ?*i x5
[2] var, type = ?i x3
[3] __primitive.gt 1 4, type = s x1
[4] val 1, type = i x4
[5] __primitive.not 3, type = s x2
[6] __primitive.assert 1 5, type = i x1
[7] __primitive.assert 2 5, type = i x1
[8] return [ 7 6 ], type = r -> 15 x1
[9] __primitive.gt 1 4, type = s x4
[10] __primitive.assert 12 9, type = a x1
[11] __primitive.sub 1 4, type = i x1
[12] tests.altf_loop_r0 2 11 -> 14, type = a x2
[13] __primitive.assert 14 9, type = a x1
[14] __primitive.dep 12, type = a x1
[15] return [ 10 13 ], type = r -> 21 x1
[16] __primitive.assert 19 9, type = a x1
[17] __primitive.sub 1 4, type = i x1
[18] tests.altf_loop_r0 2 17 -> 19, type = a x2
[19] __primitive.dep 18, type = a x1
[20] __primitive.assert 18 9, type = a x1
[21] return [ 20 16 ], type = r x1

___ tests.ap_loop (2 -> 1) rec ___
[1] var, type = ?f x2
[2] var, type = ?*a x1
[3] __primitive.ap 2 1 -> 4, type = f x1
[4] __primitive.dep 3, type = a x1
[5] tests.ap_loop 4 1, type = a x1
[6] return [ 5 ], type = r x1

___ tests.ap_loop1 (1 -> 1) ___
[1] var, type = ?a x1
[2] tests.ap_loop1_r0 1, type = a x1
[3] return [ 2 ], type = r x1

___ tests.ap_loop1_r0 (1 -> 1) rec ___
[1] var, type = ?*i x1
[2] __primitive.add 1 3, type = i x1
[3] val 1, type = i x1
[4] tests.ap_loop1_r0 2, type = a x1
[5] return [ 4 ], type = r x1

___ tests.ap_loop2 (1 -> 1) ___
[1] var, type = ?f x1
[2] tests.ap_loop2_r0 1, type = a x1
[3] return [ 2 ], type = r x1

___ tests.ap_loop2_r0 (1 -> 1) rec ___
[1] var, type = ?*f x1
[2] __primitive.ap 1 -> 3, type = f x2
[3] __primitive.dep 2, type = i x1
[4] __primitive.add 3 5, type = i x1
[5] val 1, type = i x1
[6] tests.ap_loop2_r0_q0 4 2, type = f x1
[7] tests.ap_loop2_r0 6, type = a x1
[8] return [ 7 ], type = r x1

___ tests.ap_loop2_r0_q0 (2 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?i x1
[3] __primitive.compose 1 2 [], type = f x1
[4] return [ 3 ], type = r x1

___ tests.binrec (4 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?f x1
[3] var, type = ?f x1
[4] var, type = ?a x1
[5] tests.binrec_r0 2 3 4, type = a x1
[6] __primitive.ap 5 1 -> 7, type = f x1
[7] __primitive.dep 6, type = a x1
[8] return [ 7 ], type = r x1

___ tests.binrec_r0 (3 -> 1) x2 rec ___
[1] var, type = ?*a x4
[2] var, type = ?f x2
[3] var, type = ?f x3
[4] __primitive.ap 1 3 -> 5, type = f x1
[5] __primitive.dep 4, type = s x1
[6] __primitive.not 5, type = s x1
[7] __primitive.assert 1 6, type = a x1
[8] return [ 7 ], type = r -> 15 x1
[9] __primitive.ap 1 3 -> 10, type = f x1
[10] __primitive.dep 9, type = s x1
[11] __primitive.assert 14 10, type = a x1
[12] __primitive.ap 1 2 -> 13, type = f x1
[13] __primitive.dep 12, type = a x1
[14] tests.binrec_r0 3 2 13, type = a x1
[15] return [ 11 ], type = r x1

___ tests.br10 (1 -> 1) ___
[1] var, type = ?a x1
[2] tests.br10_r0 1, type = a x1
[3] return [ 2 ], type = r x1

___ tests.br10_r0 (1 -> 1) x2 rec ___
[1] var, type = ?*i x4
[2] __primitive.lt 1 3, type = s x1
[3] val 10, type = i x2
[4] __primitive.not 2, type = s x1
[5] __primitive.assert 1 4, type = i x1
[6] return [ 5 ], type = r -> 12 x1
[7] __primitive.lt 1 3, type = s x1
[8] __primitive.assert 11 7, type = a x1
[9] __primitive.add 1 10, type = i x1
[10] val 1, type = i x1
[11] tests.br10_r0 9, type = a x1
[12] return [ 8 ], type = r x1

___ tests.collatz (1 -> 1) ___
[1] var, type = ?i x1
[2] tests.collatz_loop_r0 3 1 -> X, type = a x1
[3] val 0, type = i x1
[4] return [ 2 ], type = r x1

___ tests.collatz_loop (2 -> 1) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] tests.collatz_loop_r0 2 1 -> X, type = a x1
[4] return [ 3 ], type = r x1

___ tests.collatz_loop_r0 (2 -> 2) x3 rec ___
[1] var, type = ?*i x7
[2] var, type = ?*i x2
[3] __primitive.gt 1 4, type = s x1
[4] val 1, type = i x7
[5] __primitive.not 3, type = s x2
[6] __primitive.assert 1 5, type = i x1
[7] __primitive.assert 2 5, type = i x1
[8] return [ 7 6 ], type = r -> 21 x1
[9] __primitive.gt 1 4, type = s x4
[10] __primitive.assert 18 9, type = a x1
[11] __primitive.add 2 4, type = i x2
[12] __primitive.bitand 1 4, type = i x1
[13] __primitive.eq 12 14, type = s x1
[14] val 0, type = i x1
[15] __primitive.assert 16 13, type = i x1
[16] __primitive.div 1 17, type = i x1
[17] val 2, type = i x1
[18] tests.collatz_loop_r0 11 15 -> 20, type = a x2
[19] __primitive.assert 20 9, type = a x1
[20] __primitive.dep 18, type = a x1
[21] return [ 10 19 ], type = r -> 32 x1
[22] __primitive.assert 30 9, type = a x1
[23] __primitive.bitand 1 4, type = i x1
[24] __primitive.eq 23 4, type = s x1
[25] __primitive.assert 28 24, type = i x1
[26] __primitive.mul 1 27, type = i x1
[27] val 3, type = i x1
[28] __primitive.add 26 4, type = i x1
[29] tests.collatz_loop_r0 11 25 -> 30, type = a x2
[30] __primitive.dep 29, type = a x1
[31] __primitive.assert 29 9, type = a x1
[32] return [ 31 22 ], type = r x1

___ tests.collatz_step (1 -> 1) x2 ___
[1] var, type = ?i x4
[2] __primitive.bitand 1 3, type = i x1
[3] val 1, type = i x4
[4] __primitive.eq 2 5, type = s x1
[5] val 0, type = i x1
[6] __primitive.assert 7 4, type = i x1
[7] __primitive.div 1 8, type = i x1
[8] val 2, type = i x1
[9] return [ 6 ], type = r -> 16 x1
[10] __primitive.mul 1 11, type = i x1
[11] val 3, type = i x1
[12] __primitive.add 10 3, type = i x1
[13] __primitive.bitand 1 3, type = i x1
[14] __primitive.eq 13 3, type = s x1
[15] __primitive.assert 12 14, type = i x1
[16] return [ 15 ], type = r x1

___ tests.compose_alt (1 -> 1) x2 ___
[1] var, type = ?f x2
[2] __primitive.ap 1 -> 3, type = f x1
[3] __primitive.dep 2, type = i x1
[4] __primitive.add 3 5, type = i x1
[5] val 1, type = i x1
[6] return [ 4 ], type = r -> 9 x1
[7] __primitive.ap 1 -> 8, type = f x1
[8] __primitive.dep 7, type = a x1
[9] return [ 8 ], type = r x1

___ tests.count (1 -> 1) x2 rec ___
[1] var, type = ?*i x3
[2] __primitive.eq 1 3, type = s x1
[3] val 0, type = i x3
[4] __primitive.assert 3 2, type = i x1
[5] return [ 4 ], type = r -> 12 x1
[6] __primitive.gt 1 3, type = s x1
[7] __primitive.assert 11 6, type = i x1
[8] __primitive.sub 1 9, type = i x1
[9] val 1, type = i x2
[10] tests.count 8, type = i x1
[11] __primitive.add 10 9, type = i x1
[12] return [ 7 ], type = r x1

___ tests.dec (1 -> 1) x2 rec ___
[1] var, type = ?*i x4
[2] __primitive.lte 1 3, type = s x1
[3] val 5, type = i x2
[4] __primitive.assert 1 2, type = i x1
[5] return [ 4 ], type = r -> 11 x1
[6] __primitive.gt 1 3, type = s x1
[7] __primitive.assert 10 6, type = a x1
[8] __primitive.sub 1 9, type = i x1
[9] val 1, type = i x1
[10] tests.dec 8, type = a x1
[11] return [ 7 ], type = r x1

___ tests.decel (1 -> 1) ___
[1] var, type = ?i x1
[2] tests.decel_loop_r0 3 1 -> X, type = a x1
[3] val 0, type = i x1
[4] return [ 2 ], type = r x1

___ tests.decel_loop (2 -> 1) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] tests.decel_loop_r0 2 1 -> X, type = a x1
[4] return [ 3 ], type = r x1

___ tests.decel_loop_r0 (2 -> 2) x3 rec ___
[1] var, type = ?*i x7
[2] var, type = ?*i x2
[3] __primitive.gt 1 4, type = s x1
[4] val 1, type = i x4
[5] __primitive.not 3, type = s x2
[6] __primitive.assert 1 5, type = i x1
[7] __primitive.assert 2 5, type = i x1
[8] return [ 7 6 ], type = r -> 19 x1
[9] __primitive.gt 1 4, type = s x4
[10] __primitive.assert 16 9, type = a x1
[11] __primitive.add 2 4, type = i x2
[12] __primitive.lte 1 13, type = s x1
[13] val 5, type = i x3
[14] __primitive.assert 15 12, type = i x1
[15] __primitive.sub 1 4, type = i x1
[16] tests.decel_loop_r0 11 14 -> 18, type = a x2
[17] __primitive.assert 18 9, type = a x1
[18] __primitive.dep 16, type = a x1
[19] return [ 10 17 ], type = r -> 27 x1
[20] __primitive.assert 25 9, type = a x1
[21] __primitive.gt 1 13, type = s x1
[22] __primitive.assert 23 21, type = i x1
[23] __primitive.sub 1 13, type = i x1
[24] tests.decel_loop_r0 11 22 -> 25, type = a x2
[25] __primitive.dep 24, type = a x1
[26] __primitive.assert 24 9, type = a x1
[27] return [ 26 20 ], type = r x1

___ tests.decel_step (1 -> 1) x2 ___
[1] var, type = ?i x4
[2] __primitive.lte 1 3, type = s x1
[3] val 5, type = i x3
[4] __primitive.assert 5 2, type = i x1
[5] __primitive.sub 1 6, type = i x1
[6] val 1, type = i x1
[7] return [ 4 ], type = r -> 11 x1
[8] __primitive.sub 1 3, type = i x1
[9] __primitive.gt 1 3, type = s x1
[10] __primitive.assert 8 9, type = i x1
[11] return [ 10 ], type = r x1

___ tests.drop_loop (2 -> 1) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] tests.drop_loop_r0 2 1 -> X, type = a x1
[4] return [ 3 ], type = r x1

___ tests.drop_loop_r0 (2 -> 2) x2 rec ___
[1] var, type = ?*i x4
[2] var, type = ?i x2
[3] __primitive.gt 1 4, type = s x1
[4] val 0, type = i x2
[5] __primitive.not 3, type = s x2
[6] __primitive.assert 1 5, type = i x1
[7] __primitive.assert 2 5, type = i x1
[8] return [ 7 6 ], type = r -> 16 x1
[9] __primitive.gt 1 4, type = s x2
[10] __primitive.assert 13 9, type = a x1
[11] __primitive.sub 1 12, type = i x1
[12] val 1, type = i x1
[13] tests.drop_loop_r0 2 11 -> 15, type = a x2
[14] __primitive.assert 15 9, type = a x1
[15] __primitive.dep 13, type = a x1
[16] return [ 10 14 ], type = r x1

___ tests.drop_loop1 (1 -> 1) ___
[1] var, type = ?a x1
[2] tests.drop_loop1_r0 1, type = a x1
[3] return [ 2 ], type = r x1

___ tests.drop_loop1_r0 (1 -> 1) x2 rec ___
[1] var, type = ?*i x4
[2] __primitive.gt 1 3, type = s x1
[3] val 0, type = i x2
[4] __primitive.not 2, type = s x1
[5] __primitive.assert 1 4, type = i x1
[6] return [ 5 ], type = r -> 12 x1
[7] __primitive.gt 1 3, type = s x1
[8] __primitive.assert 11 7, type = a x1
[9] __primitive.sub 1 10, type = i x1
[10] val 1, type = i x1
[11] tests.drop_loop1_r0 9, type = a x1
[12] return [ 8 ], type = r x1

___ tests.drop_loop2 (2 -> 1) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] tests.drop_loop2_r0 2 1, type = a x1
[4] return [ 3 ], type = r x1

___ tests.drop_loop2_r0 (2 -> 1) x2 rec ___
[1] var, type = ?*i x4
[2] var, type = ?i x2
[3] __primitive.gt 1 4, type = s x1
[4] val 0, type = i x2
[5] __primitive.not 3, type = s x3
[6] __primitive.assert [] 5, type = f x1
[7] __primitive.assert 2 5, type = i x1
[8] __primitive.assert 1 5, type = i x1
[9] tests.drop_loop2_r0_q0 8 7 6, type = a x1
[10] return [ 9 ], type = r -> 16 x1
[11] __primitive.gt 1 4, type = s x1
[12] __primitive.assert 15 11, type = a x1
[13] __primitive.sub 1 14, type = i x1
[14] val 1, type = i x1
[15] tests.drop_loop2_r0 2 13, type = a x1
[16] return [ 12 ], type = r x1

___ tests.drop_loop2_r0_q0 (3 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?i x1
[4] __primitive.compose 1 2 3 [], type = f x1
[5] return [ 4 ], type = r x1

___ tests.drop_loop3 (3 -> 2) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] tests.drop_loop3_r0 3 2 1 -> 6 X, type = a x2
[6] __primitive.dep 4, type = a x1
[7] return [ 4 6 ], type = r x1

___ tests.drop_loop3_r0 (3 -> 3) x2 rec ___
[1] var, type = ?*i x4
[2] var, type = ?a x2
[3] var, type = ?i x2
[4] __primitive.gt 1 5, type = s x1
[5] val 0, type = i x2
[6] __primitive.not 4, type = s x3
[7] __primitive.assert 1 6, type = i x1
[8] __primitive.assert 2 6, type = a x1
[9] __primitive.assert 3 6, type = i x1
[10] return [ 9 8 7 ], type = r -> 21 x1
[11] __primitive.gt 1 5, type = s x3
[12] __primitive.assert 17 11, type = a x1
[13] __primitive.sub 1 14, type = i x1
[14] val 1, type = i x1
[15] tests.drop_loop3_r0 3 2 13 -> 19 17, type = a x3
[17] __primitive.dep 15, type = a x1
[18] __primitive.assert 19 11, type = a x1
[19] __primitive.dep 15, type = a x1
[20] __primitive.assert 15 11, type = a x1
[21] return [ 20 18 12 ], type = r x1

___ tests.drop_loop4 (4 -> 3) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] var, type = ?a x1
[5] tests.drop_loop4_r0 4 3 2 1 -> 7 8 X, type = a x3
[7] __primitive.dep 5, type = a x1
[8] __primitive.dep 5, type = a x1
[9] return [ 8 7 5 ], type = r x1

___ tests.drop_loop4_r0 (4 -> 4) x2 rec ___
[1] var, type = ?*i x4
[2] var, type = ?a x2
[3] var, type = ?a x2
[4] var, type = ?i x2
[5] __primitive.gt 1 6, type = s x1
[6] val 0, type = i x2
[7] __primitive.not 5, type = s x4
[8] __primitive.assert 1 7, type = i x1
[9] __primitive.assert 2 7, type = a x1
[10] __primitive.assert 3 7, type = a x1
[11] __primitive.assert 4 7, type = i x1
[12] return [ 11 10 9 8 ], type = r -> 25 x1
[13] __primitive.gt 1 6, type = s x4
[14] __primitive.assert 19 13, type = a x1
[15] __primitive.sub 1 16, type = i x1
[16] val 1, type = i x1
[17] tests.drop_loop4_r0 4 3 2 15 -> 23 19 21, type = a x4
[19] __primitive.dep 17, type = a x1
[20] __primitive.assert 21 13, type = a x1
[21] __primitive.dep 17, type = a x1
[22] __primitive.assert 23 13, type = a x1
[23] __primitive.dep 17, type = a x1
[24] __primitive.assert 17 13, type = a x1
[25] return [ 24 22 14 20 ], type = r x1

___ tests.f2 (3 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] __primitive.ap 3 2 1 -> 5 6, type = f x3
[5] __primitive.dep 4, type = i x1
[6] __primitive.dep 4, type = i x1
[7] __primitive.add 6 8, type = i x1
[8] val 1, type = i x1
[9] __primitive.ap 7 4 -> 10, type = f x1
[10] __primitive.dep 9, type = i x1
[11] __primitive.add 5 10, type = i x1
[12] return [ 11 ], type = r x1

___ tests.f6 (3 -> 3) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] return [ 2 1 3 ], type = r x1

___ tests.fact (1 -> 1) x2 rec ___
[1] var, type = ?*i x4
[2] __primitive.eq 1 3, type = s x1
[3] val 1, type = i x4
[4] __primitive.assert 3 2, type = i x1
[5] return [ 4 ], type = r -> 11 x1
[6] __primitive.gt 1 3, type = s x1
[7] __primitive.assert 10 6, type = i x1
[8] __primitive.sub 1 3, type = i x1
[9] tests.fact 8, type = i x1
[10] __primitive.mul 1 9, type = i x1
[11] return [ 7 ], type = r x1

___ tests.fib (1 -> 1) x2 rec ___
[1] var, type = ?*i x4
[2] __primitive.lte 1 3, type = s x1
[3] val 1, type = i x4
[4] __primitive.assert 1 2, type = i x1
[5] return [ 4 ], type = r -> 13 x1
[6] __primitive.gt 1 3, type = s x1
[7] __primitive.sub 1 3, type = i x2
[8] __primitive.sub 7 3, type = i x1
[9] tests.fib 8, type = i x1
[10] __primitive.assert 12 6, type = i x1
[11] tests.fib 7, type = i x1
[12] __primitive.add 9 11, type = i x1
[13] return [ 10 ], type = r x1

___ tests.get2 (1 -> 2) ___
[1] var, type = ?f x1
[2] __primitive.ap 1 -> 3, type = f x2
[3] __primitive.dep 2, type = a x1
[4] __primitive.ap 2 -> 5, type = f x1
[5] __primitive.dep 4, type = a x1
[6] return [ 5 3 ], type = r x1

___ tests.id_quote_compose (1 -> 1) ___
[1] var, type = ?f x1
[2] __primitive.ap 1 -> 3, type = f x2
[3] __primitive.dep 2, type = a x1
[4] tests.id_quote_compose_q0 3 2, type = a x1
[5] return [ 4 ], type = r x1

___ tests.id_quote_compose_q0 (2 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] __primitive.compose 1 2 [], type = f x1
[4] return [ 3 ], type = r x1

___ tests.inl_loop (1 -> 1) ___
[1] var, type = ?a x1
[2] tests.inl_loop_r0 1, type = a x1
[3] return [ 2 ], type = r x1

___ tests.inl_loop_r0 (1 -> 1) x2 rec ___
[1] var, type = ?*i x4
[2] __primitive.lt 1 3, type = s x1
[3] val 10, type = i x2
[4] __primitive.not 2, type = s x1
[5] __primitive.assert 1 4, type = i x1
[6] return [ 5 ], type = r -> 12 x1
[7] __primitive.lt 1 3, type = s x1
[8] __primitive.assert 11 7, type = a x1
[9] __primitive.add 1 10, type = i x1
[10] val 3, type = i x1
[11] tests.inl_loop_r0 9, type = a x1
[12] return [ 8 ], type = r x1

___ tests.inl_loop2 (3 -> 1) ___
[1] var, type = ?i x1
[2] var, type = ?i x1
[3] var, type = ?a x1
[4] tests.inl_loop2_r0 1 2 3, type = a x1
[5] return [ 4 ], type = r x1

___ tests.inl_loop2_r0 (3 -> 1) x2 rec ___
[1] var, type = ?*i x4
[2] var, type = ?i x2
[3] var, type = ?i x3
[4] __primitive.lt 1 3, type = s x1
[5] __primitive.not 4, type = s x1
[6] __primitive.assert 1 5, type = i x1
[7] return [ 6 ], type = r -> 12 x1
[8] __primitive.lt 1 3, type = s x1
[9] __primitive.assert 11 8, type = a x1
[10] __primitive.add 1 2, type = i x1
[11] tests.inl_loop2_r0 3 2 10, type = a x1
[12] return [ 9 ], type = r x1

___ tests.inl_loop3 (1 -> 1) ___
[1] var, type = ?a x1
[2] tests.inl_loop3_r0 1, type = a x1
[3] __primitive.mul 2 4, type = i x1
[4] val 8, type = i x1
[5] return [ 3 ], type = r x1

___ tests.inl_loop3_r0 (1 -> 1) x2 rec ___
[1] var, type = ?*i x4
[2] __primitive.lt 1 3, type = s x1
[3] val 10, type = i x2
[4] __primitive.not 2, type = s x1
[5] __primitive.assert 1 4, type = i x1
[6] return [ 5 ], type = r -> 12 x1
[7] __primitive.lt 1 3, type = s x1
[8] __primitive.assert 11 7, type = a x1
[9] __primitive.add 1 10, type = i x1
[10] val 3, type = i x1
[11] tests.inl_loop3_r0 9, type = a x1
[12] return [ 8 ], type = r x1

___ tests.inl_loop4 (1 -> 1) ___
[1] var, type = ?i x1
[2] __primitive.add 1 3, type = i x1
[3] val 4, type = i x1
[4] tests.inl_loop4_r0 2, type = a x1
[5] __primitive.mul 4 6, type = i x1
[6] val 2, type = i x1
[7] return [ 5 ], type = r x1

___ tests.inl_loop4_r0 (1 -> 1) x2 rec ___
[1] var, type = ?*i x4
[2] __primitive.lt 1 3, type = s x1
[3] val 10, type = i x2
[4] __primitive.not 2, type = s x1
[5] __primitive.assert 1 4, type = i x1
[6] return [ 5 ], type = r -> 12 x1
[7] __primitive.lt 1 3, type = s x1
[8] __primitive.assert 11 7, type = a x1
[9] __primitive.add 1 10, type = i x1
[10] val 3, type = i x1
[11] tests.inl_loop4_r0 9, type = a x1
[12] return [ 8 ], type = r x1

___ tests.it10 (1 -> 1) ___
[1] var, type = ?a x1
[2] tests.it10_r0 1, type = a x1
[3] return [ 2 ], type = r x1

___ tests.it10_r0 (1 -> 1) x2 rec ___
[1] var, type = ?*i x4
[2] __primitive.lt 1 3, type = s x1
[3] val 10, type = i x2
[4] __primitive.not 2, type = s x1
[5] __primitive.assert 1 4, type = i x1
[6] return [ 5 ], type = r -> 12 x1
[7] __primitive.lt 1 3, type = s x1
[8] __primitive.assert 11 7, type = a x1
[9] __primitive.add 1 10, type = i x1
[10] val 1, type = i x1
[11] tests.it10_r0 9, type = a x1
[12] return [ 8 ], type = r x1

___ tests.it10b (1 -> 1) ___
[1] var, type = ?f x1
[2] tests.it10b_r0 1, type = a x1
[3] return [ 2 ], type = r x1

___ tests.it10b_r0 (1 -> 1) x2 rec ___
[1] var, type = ?*f x4
[2] __primitive.ap 1 -> 3, type = f x1
[3] __primitive.dep 2, type = i x1
[4] __primitive.lt 3 5, type = s x1
[5] val 10, type = i x2
[6] __primitive.not 4, type = s x1
[7] __primitive.assert 9 6, type = a x1
[8] __primitive.ap 1 -> 9, type = f x1
[9] __primitive.dep 8, type = a x1
[10] return [ 7 ], type = r -> 21 x1
[11] __primitive.ap 1 -> 12, type = f x1
[12] __primitive.dep 11, type = i x1
[13] __primitive.lt 12 5, type = s x1
[14] __primitive.assert 20 13, type = a x1
[15] __primitive.ap 1 -> 16, type = f x2
[16] __primitive.dep 15, type = i x1
[17] __primitive.add 16 18, type = i x1
[18] val 1, type = i x1
[19] tests.it10b_r0_q0 17 15, type = f x1
[20] tests.it10b_r0 19, type = a x1
[21] return [ 14 ], type = r x1

___ tests.it10b_r0_q0 (2 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?i x1
[3] __primitive.compose 1 2 [], type = f x1
[4] return [ 3 ], type = r x1

___ tests.leak (1 -> 1) ___
[1] var, type = ?i x1
[2] val 0, type = i x1
[3] tests.leak_r0 1 2 -> X, type = a x1
[4] return [ 3 ], type = r x1

___ tests.leak_r0 (2 -> 2) x2 rec ___
[1] var, type = ?*i x2
[2] var, type = ?*i x4
[3] __primitive.gt 2 4, type = s x1
[4] val 1, type = i x2
[5] __primitive.not 3, type = s x2
[6] __primitive.assert 2 5, type = i x1
[7] __primitive.assert 1 5, type = i x1
[8] return [ 7 6 ], type = r -> 16 x1
[9] __primitive.gt 2 4, type = s x2
[10] __primitive.assert 14 9, type = a x1
[11] __primitive.add 1 12, type = i x1
[12] val 3, type = i x1
[13] tests.leak_r0 11 2 -> 14, type = a x2
[14] __primitive.dep 13, type = a x1
[15] __primitive.assert 13 9, type = a x1
[16] return [ 15 10 ], type = r x1

___ tests.leak_loop (2 -> 1) ___
[1] var, type = ?a x1
[2] var, type = ?a x1
[3] tests.leak_loop_r0 2 1 -> X, type = a x1
[4] return [ 3 ], type = r x1

___ tests.leak_loop_r0 (2 -> 2) x2 rec ___
[1] var, type = ?i x4
[2] var, type = ?*i x2
[3] __primitive.gt 1 4, type = s x1
[4] val 1, type = i x2
[5] __primitive.not 3, type = s x2
[6] __primitive.assert 1 5, type = i x1
[7] __primitive.assert 2 5, type = i x1
[8] return [ 7 6 ], type = r -> 16 x1
[9] __primitive.gt 1 4, type = s x2
[10] __primitive.assert 13 9, type = a x1
[11] __primitive.add 2 12, type = i x1
[12] val 3, type = i x1
[13] tests.leak_loop_r0 11 1 -> 15, type = a x2
[14] __primitive.assert 15 9, type = a x1
[15] __primitive.dep 13, type = a x1
[16] return [ 10 14 ], type = r x1

___ tests.pct (2 -> 1) ___
[1] var, type = ?i x1
[2] var, type = ?d x1
[3] __primitive.to_float 1, type = d x1
[4] __primitive.div_float 3 5, type = d x1
[5] val 100, type = d x1
[6] __primitive.add_float 4 7, type = d x1
[7] val 1, type = d x1
[8] __primitive.mul_float 2 6, type = d x1
[9] return [ 8 ], type = r x1

___ tests.popr_quote_compose (1 -> 1) ___
[1] var, type = ?f x1
[2] __primitive.ap 1 -> 3, type = f x2
[3] __primitive.dep 2, type = f x1
[4] __primitive.ap 3 -> 5, type = f x2
[5] __primitive.dep 4, type = a x1
[6] tests.popr_quote_compose_q0 5 4 2, type = a x1
[7] return [ 6 ], type = r x1

___ tests.popr_quote_compose_q0 (3 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?f x1
[3] var, type = ?a x1
[4] __primitive.compose 1 2 3 [], type = f x1
[5] return [ 4 ], type = r x1

___ tests.pushl2 (3 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] __primitive.ap 3 2 1, type = f x1
[5] return [ 4 ], type = r x1

___ tests.pushl_assert (2 -> 1) ___
[1] var, type = ?a x1
[2] var, type = ?s x2
[3] __primitive.assert [] 2, type = f x1
[4] __primitive.assert 1 2, type = a x1
[5] tests.pushl_assert_q0 4 3, type = a x1
[6] return [ 5 ], type = r x1

___ tests.pushl_assert_q0 (2 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] __primitive.compose 1 2 [], type = f x1
[4] return [ 3 ], type = r x1

___ tests.qdec (1 -> 1) x2 rec ___
[1] var, type = ?*f x4
[2] __primitive.ap 1 -> 3, type = f x1
[3] __primitive.dep 2, type = i x1
[4] __primitive.lte 3 5, type = s x1
[5] val 5, type = i x2
[6] __primitive.assert 1 4, type = f x1
[7] return [ 6 ], type = r -> 18 x1
[8] __primitive.ap 1 -> 9, type = f x1
[9] __primitive.dep 8, type = i x1
[10] __primitive.gt 9 5, type = s x1
[11] __primitive.assert 17 10, type = a x1
[12] __primitive.ap 1 -> 13, type = f x2
[13] __primitive.dep 12, type = i x1
[14] __primitive.sub 13 15, type = i x1
[15] val 1, type = i x1
[16] tests.qdec_q0 14 12, type = f x1
[17] tests.qdec 16, type = a x1
[18] return [ 11 ], type = r x1

___ tests.qdec_q0 (2 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?i x1
[3] __primitive.compose 1 2 [], type = f x1
[4] return [ 3 ], type = r x1

___ tests.qtest (1 -> 1) rec ___
[1] var, type = ?*f x1
[2] __primitive.ap 1 -> 3, type = f x2
[3] __primitive.dep 2, type = i x1
[4] __primitive.add 3 5, type = i x1
[5] val 1, type = i x1
[6] tests.qtest_q0 4 2, type = f x1
[7] tests.qtest 6, type = a x1
[8] return [ 7 ], type = r x1

___ tests.qtest_q0 (2 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?i x1
[3] __primitive.compose 1 2 [], type = f x1
[4] return [ 3 ], type = r x1

___ tests.test_ap11 (2 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] __primitive.ap 2 1 -> 4, type = f x1
[4] __primitive.dep 3, type = a x1
[5] return [ 4 ], type = r x1

___ tests.test_ap12 (2 -> 2) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] __primitive.ap 2 1 -> 4, type = f x2
[4] __primitive.dep 3, type = a x1
[5] __primitive.ap 3 -> 6, type = f x1
[6] __primitive.dep 5, type = a x1
[7] return [ 6 4 ], type = r x1

___ tests.test_ap21 (3 -> 1) ___
[1] var, type = ?f x1
[2] var, type = ?a x1
[3] var, type = ?a x1
[4] __primitive.ap 3 2 1 -> 5, type = f x1
[5] __primitive.dep 4, type = a x1
[6] return [ 5 ], type = r x1

