___ algorithm.__caret__ (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] val 1 :: i x1
[4] jump algorithm.__caret___r0 3 2 1 :: i x1
[5] return [4]

___ algorithm.__caret___r0 (3 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] changing var :: ?i x3
[3] changing var :: ?i x2
[4] __primitive.neq &1 5 :: y x2
[5] val 0 :: i x1
[6] __primitive.not &4 :: y x1
[7] __primitive.assert &3 6 :: i? x1
[8] return [7] -> 15
[9] __primitive.assert 14 4 :: i? x1
[10] algorithm.acc_odd_power 3 &2 &1 :: i x1
[11] __primitive.mul &2 2 :: i x1
[12] __primitive.shiftr 1 13 :: i x1
[13] val 1 :: i x1
[14] jump algorithm.__caret___r0 10 11 12 :: i x1
[15] return [9]

___ algorithm.acc_odd_power (3 -> 1) x2 ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] var :: ?i x2
[4] __primitive.bitand 1 &5 in [0, 1] :: i x1
[5] val 1 :: i x2
[6] __primitive.eq 4 5 :: y x2
[7] __primitive.assert 8 &6 :: i? x1
[8] __primitive.mul 3 2 :: i x1
[9] return [7] -> 12
[10] __primitive.not 6 :: y x1
[11] __primitive.assert 3 10 :: i? x1
[12] return [11]

___ algorithm.avgf (1 -> 1) ___
[1] var :: ?l x2
[2] algorithm.sumf_r0 3 &1 :: d x1
[3] val 0 :: d x1
[4] list.length_r0 5 1 :: i x1
[5] val 0 :: i x1
[6] __primitive.to_float 4 :: d x1
[7] __primitive.div_float 2 6 :: d? x1
[8] return [7]

___ algorithm.gcd (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] jump algorithm.gcd_r0 2 1 :: i x1
[4] return [3]

___ algorithm.gcd_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] changing var :: ?i x2
[3] __primitive.neq &1 4 :: y x2
[4] val 0 :: i x1
[5] __primitive.not &3 :: y x1
[6] __primitive.assert &2 5 :: i? x1
[7] return [6] -> 11
[8] __primitive.assert 10 3 :: i? x1
[9] __primitive.mod 2 &1 :: i? x1
[10] jump algorithm.gcd_r0 1 9 :: i x1
[11] return [8]

___ algorithm.iota2 (1 -> 1) ___
[1] var :: ?l x1
[2] jump algorithm.iota2_r0 1 :: l x1
[3] return [2]

___ algorithm.iota2_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?l x2
[2] __primitive.ap &1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x3
[4] __primitive.gt &3 5 :: y x2
[5] val 0 :: i x1
[6] __primitive.not &4 :: y x1
[7] __primitive.assert 1 6 :: l? x1
[8] return [7] -> 14
[9] __primitive.assert 13 4 :: l? x1
[10] __primitive.sub &3 11 :: i x1
[11] val 1 :: i x1
[12] __primitive.pushr 2 3 10 :: l x1
[13] jump algorithm.iota2_r0 12 :: l x1
[14] return [9]

___ algorithm.power_step (3 -> 3) ___
[1] var :: ?i x2
[2] var :: ?i x3
[3] var :: ?i x1
[4] __primitive.shiftr &1 5 :: i x1
[5] val 1 :: i x1
[6] __primitive.mul &2 &2 :: i x1
[7] jump algorithm.acc_odd_power 3 2 1 :: i x1
[8] return [7 6 4]

___ algorithm.reduce_power (2 -> 2) ___
[1] var :: ?i x1
[2] var :: ?i x2
[3] __primitive.shiftr 1 4 :: i x1
[4] val 1 :: i x1
[5] __primitive.mul &2 2 :: i x1
[6] return [5 3]

___ algorithm.sum (1 -> 1) ___
[1] var :: ?l x1
[2] val 0 :: i x1
[3] jump algorithm.sum_r0 2 1 :: i x1
[4] return [3]

___ algorithm.sum_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?l x1
[2] changing var :: ?i x2
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: i x3
[5] __primitive.seq 7 &4 :: v x1
[6] __primitive.add 4 2 :: i x1
[7] jump algorithm.sum_r0 6 3 :: v x1
[8] return [5] -> 10
[9] __primitive.unless 2 4 :: i x1
[10] return [9]

___ algorithm.sumf (1 -> 1) ___
[1] var :: ?l x1
[2] val 0 :: d x1
[3] jump algorithm.sumf_r0 2 1 :: d x1
[4] return [3]

___ algorithm.sumf_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?l x1
[2] changing var :: ?d x2
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: d x3
[5] __primitive.seq 7 &4 :: v x1
[6] __primitive.add_float 4 2 :: d x1
[7] jump algorithm.sumf_r0 6 3 :: v x1
[8] return [5] -> 10
[9] __primitive.unless 2 4 :: d x1
[10] return [9]

___ control.!! (3 -> 2) ___
[1] var :: ?y x2
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.assert 2 &1 :: a? x1
[5] __primitive.assert 3 1 :: a? x1
[6] return [5 4]

___ control.!!! (4 -> 3) ___
[1] var :: ?y x3
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.assert 2 &1 :: a? x1
[6] __primitive.assert 3 &1 :: a? x1
[7] __primitive.assert 4 1 :: a? x1
[8] return [7 6 5]

___ control.$ (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] __primitive.ap 2 1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [4]

___ control.$$ (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 2 1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] return [5]

___ control.$$$ (4 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 2 1 -> 6 :: v? x1
[6] __primitive.dep 5 :: a x1
[7] return [6]

___ control.$$$- (4 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 2 1 -> 8 7 :: v? x2
[7] __primitive.dep 5 :: a x1
[8] __primitive.dep 5 :: a x1
[9] return [8 7]

___ control.$$$-keep (4 -> 3) ___
[1] var :: ?l x2
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 2 &1 -> 8 7 :: v? x2
[7] __primitive.dep 5 :: a x1
[8] __primitive.dep 5 :: a x1
[9] return [8 7 1]

___ control.$$$keep (4 -> 2) ___
[1] var :: ?l x2
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 2 &1 -> 6 :: v? x1
[6] __primitive.dep 5 :: a x1
[7] return [6 1]

___ control.$$- (3 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 2 1 -> 6 5 :: v? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.dep 4 :: a x1
[7] return [6 5]

___ control.$$-keep (3 -> 3) ___
[1] var :: ?l x2
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 2 &1 -> 6 5 :: v? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.dep 4 :: a x1
[7] return [6 5 1]

___ control.$$keep (3 -> 2) ___
[1] var :: ?l x2
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 2 &1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] return [5 1]

___ control.$- (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] __primitive.ap 2 1 -> 5 4 :: v? x2
[4] __primitive.dep 3 :: a x1
[5] __primitive.dep 3 :: a x1
[6] return [5 4]

___ control.$-keep (2 -> 3) ___
[1] var :: ?l x2
[2] var :: ?a x1
[3] __primitive.ap 2 &1 -> 5 4 :: v? x2
[4] __primitive.dep 3 :: a x1
[5] __primitive.dep 3 :: a x1
[6] return [5 4 1]

___ control.$keep (2 -> 2) ___
[1] var :: ?l x2
[2] var :: ?a x1
[3] __primitive.ap 2 &1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [4 1]

___ control.-> (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x2
[3] __primitive.ap &2 1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [4 2]

___ control.bitree (4 -> 1) x2 rec ___
[1] var :: ?l x3
[2] var :: ?l x3
[3] var :: ?l x3
[4] changing var :: ?a x2
[5] __primitive.ap &4 &3 -> 8 6 :: v? x2
[6] __primitive.dep 5 :: a x1
[7] control.bitree 6 &3 &2 &1 :: v x1
[8] __primitive.dep 5 :: a x1
[9] control.bitree 8 3 &2 &1 :: v x1
[10] __primitive.ap 9 7 1 -> 11 :: v? x1
[11] __primitive.dep 10 :: a x2
[12] return [11] -> 16
[13] __primitive.unless 15 11 :: a x1
[14] __primitive.ap 4 2 -> 15 :: v? x1
[15] __primitive.dep 14 :: a x1
[16] return [13]

___ control.both (3 -> 2) ___
[1] var :: ?l x2
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 2 &1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 3 1 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [7 5]

___ control.diamond (4 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x2
[3] var :: ?l x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 -> 9 6 :: v? x2
[6] __primitive.dep 5 :: a x1
[7] __primitive.ap 6 &2 -> 8 :: v? x1
[8] __primitive.dep 7 :: a x1
[9] __primitive.dep 5 :: a x1
[10] __primitive.ap 9 2 -> 11 :: v? x1
[11] __primitive.dep 10 :: a x1
[12] __primitive.ap 11 8 1 -> 13 :: v? x1
[13] __primitive.dep 12 :: a x1
[14] return [13]

___ control.dip11 (3 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] return [5 2]

___ control.dip12 (3 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 6 5 :: v? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.dep 4 :: a x1
[7] return [6 5 2]

___ control.dip13 (3 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 7 6 5 :: v? x3
[5] __primitive.dep 4 :: a x1
[6] __primitive.dep 4 :: a x1
[7] __primitive.dep 4 :: a x1
[8] return [7 6 5 2]

___ control.dip14 (3 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 9 8 7 6 :: v? x4
[6] __primitive.dep 4 :: a x1
[7] __primitive.dep 4 :: a x1
[8] __primitive.dep 4 :: a x1
[9] __primitive.dep 4 :: a x1
[10] return [9 8 7 6 2]

___ control.dip15 (3 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 10 9 8 7 6 :: v? x5
[6] __primitive.dep 4 :: a x1
[7] __primitive.dep 4 :: a x1
[8] __primitive.dep 4 :: a x1
[9] __primitive.dep 4 :: a x1
[10] __primitive.dep 4 :: a x1
[11] return [10 9 8 7 6 2]

___ control.dip16 (3 -> 7) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 11 10 9 8 7 6 :: v? x6
[6] __primitive.dep 4 :: a x1
[7] __primitive.dep 4 :: a x1
[8] __primitive.dep 4 :: a x1
[9] __primitive.dep 4 :: a x1
[10] __primitive.dep 4 :: a x1
[11] __primitive.dep 4 :: a x1
[12] return [11 10 9 8 7 6 2]

___ control.dip21 (4 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 1 -> 6 :: v? x1
[6] __primitive.dep 5 :: a x1
[7] return [6 2]

___ control.dip22 (4 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 1 -> 7 6 :: v? x2
[6] __primitive.dep 5 :: a x1
[7] __primitive.dep 5 :: a x1
[8] return [7 6 2]

___ control.dip23 (4 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 1 -> 9 8 7 :: v? x3
[7] __primitive.dep 5 :: a x1
[8] __primitive.dep 5 :: a x1
[9] __primitive.dep 5 :: a x1
[10] return [9 8 7 2]

___ control.dip24 (4 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 1 -> 10 9 8 7 :: v? x4
[7] __primitive.dep 5 :: a x1
[8] __primitive.dep 5 :: a x1
[9] __primitive.dep 5 :: a x1
[10] __primitive.dep 5 :: a x1
[11] return [10 9 8 7 2]

___ control.dip25 (4 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 1 -> 11 10 9 8 7 :: v? x5
[7] __primitive.dep 5 :: a x1
[8] __primitive.dep 5 :: a x1
[9] __primitive.dep 5 :: a x1
[10] __primitive.dep 5 :: a x1
[11] __primitive.dep 5 :: a x1
[12] return [11 10 9 8 7 2]

___ control.dip26 (4 -> 7) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 1 -> 12 11 10 9 8 7 :: v? x6
[7] __primitive.dep 5 :: a x1
[8] __primitive.dep 5 :: a x1
[9] __primitive.dep 5 :: a x1
[10] __primitive.dep 5 :: a x1
[11] __primitive.dep 5 :: a x1
[12] __primitive.dep 5 :: a x1
[13] return [12 11 10 9 8 7 2]

___ control.dip31 (5 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 4 3 1 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [7 2]

___ control.dip32 (5 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 4 3 1 -> 9 8 :: v? x2
[8] __primitive.dep 6 :: a x1
[9] __primitive.dep 6 :: a x1
[10] return [9 8 2]

___ control.dip33 (5 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 4 3 1 -> 10 9 8 :: v? x3
[8] __primitive.dep 6 :: a x1
[9] __primitive.dep 6 :: a x1
[10] __primitive.dep 6 :: a x1
[11] return [10 9 8 2]

___ control.dip34 (5 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 4 3 1 -> 11 10 9 8 :: v? x4
[8] __primitive.dep 6 :: a x1
[9] __primitive.dep 6 :: a x1
[10] __primitive.dep 6 :: a x1
[11] __primitive.dep 6 :: a x1
[12] return [11 10 9 8 2]

___ control.dip35 (5 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 4 3 1 -> 12 11 10 9 8 :: v? x5
[8] __primitive.dep 6 :: a x1
[9] __primitive.dep 6 :: a x1
[10] __primitive.dep 6 :: a x1
[11] __primitive.dep 6 :: a x1
[12] __primitive.dep 6 :: a x1
[13] return [12 11 10 9 8 2]

___ control.dip36 (5 -> 7) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 4 3 1 -> 13 12 11 10 9 8 :: v? x6
[8] __primitive.dep 6 :: a x1
[9] __primitive.dep 6 :: a x1
[10] __primitive.dep 6 :: a x1
[11] __primitive.dep 6 :: a x1
[12] __primitive.dep 6 :: a x1
[13] __primitive.dep 6 :: a x1
[14] return [13 12 11 10 9 8 2]

___ control.dip41 (6 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 9 :: v? x1
[9] __primitive.dep 7 :: a x1
[10] return [9 2]

___ control.dip42 (6 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 10 9 :: v? x2
[9] __primitive.dep 7 :: a x1
[10] __primitive.dep 7 :: a x1
[11] return [10 9 2]

___ control.dip43 (6 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 11 10 9 :: v? x3
[9] __primitive.dep 7 :: a x1
[10] __primitive.dep 7 :: a x1
[11] __primitive.dep 7 :: a x1
[12] return [11 10 9 2]

___ control.dip44 (6 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 12 11 10 9 :: v? x4
[9] __primitive.dep 7 :: a x1
[10] __primitive.dep 7 :: a x1
[11] __primitive.dep 7 :: a x1
[12] __primitive.dep 7 :: a x1
[13] return [12 11 10 9 2]

___ control.dip45 (6 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 13 12 11 10 9 :: v? x5
[9] __primitive.dep 7 :: a x1
[10] __primitive.dep 7 :: a x1
[11] __primitive.dep 7 :: a x1
[12] __primitive.dep 7 :: a x1
[13] __primitive.dep 7 :: a x1
[14] return [13 12 11 10 9 2]

___ control.dip46 (6 -> 7) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 14 13 12 11 10 9 :: v? x6
[9] __primitive.dep 7 :: a x1
[10] __primitive.dep 7 :: a x1
[11] __primitive.dep 7 :: a x1
[12] __primitive.dep 7 :: a x1
[13] __primitive.dep 7 :: a x1
[14] __primitive.dep 7 :: a x1
[15] return [14 13 12 11 10 9 2]

___ control.dip51 (7 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 10 :: v? x1
[10] __primitive.dep 8 :: a x1
[11] return [10 2]

___ control.dip52 (7 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 11 10 :: v? x2
[10] __primitive.dep 8 :: a x1
[11] __primitive.dep 8 :: a x1
[12] return [11 10 2]

___ control.dip53 (7 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 12 11 10 :: v? x3
[10] __primitive.dep 8 :: a x1
[11] __primitive.dep 8 :: a x1
[12] __primitive.dep 8 :: a x1
[13] return [12 11 10 2]

___ control.dip54 (7 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 13 12 11 10 :: v? x4
[10] __primitive.dep 8 :: a x1
[11] __primitive.dep 8 :: a x1
[12] __primitive.dep 8 :: a x1
[13] __primitive.dep 8 :: a x1
[14] return [13 12 11 10 2]

___ control.dip55 (7 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 14 13 12 11 10 :: v? x5
[10] __primitive.dep 8 :: a x1
[11] __primitive.dep 8 :: a x1
[12] __primitive.dep 8 :: a x1
[13] __primitive.dep 8 :: a x1
[14] __primitive.dep 8 :: a x1
[15] return [14 13 12 11 10 2]

___ control.dip56 (7 -> 7) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 15 14 13 12 11 10 :: v? x6
[10] __primitive.dep 8 :: a x1
[11] __primitive.dep 8 :: a x1
[12] __primitive.dep 8 :: a x1
[13] __primitive.dep 8 :: a x1
[14] __primitive.dep 8 :: a x1
[15] __primitive.dep 8 :: a x1
[16] return [15 14 13 12 11 10 2]

___ control.dip61 (8 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] var :: ?a x1
[9] __primitive.ap 8 7 6 5 4 3 1 -> 11 :: v? x1
[11] __primitive.dep 9 :: a x1
[12] return [11 2]

___ control.dip62 (8 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] var :: ?a x1
[9] __primitive.ap 8 7 6 5 4 3 1 -> 12 11 :: v? x2
[11] __primitive.dep 9 :: a x1
[12] __primitive.dep 9 :: a x1
[13] return [12 11 2]

___ control.dip63 (8 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] var :: ?a x1
[9] __primitive.ap 8 7 6 5 4 3 1 -> 13 12 11 :: v? x3
[11] __primitive.dep 9 :: a x1
[12] __primitive.dep 9 :: a x1
[13] __primitive.dep 9 :: a x1
[14] return [13 12 11 2]

___ control.dip64 (8 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] var :: ?a x1
[9] __primitive.ap 8 7 6 5 4 3 1 -> 14 13 12 11 :: v? x4
[11] __primitive.dep 9 :: a x1
[12] __primitive.dep 9 :: a x1
[13] __primitive.dep 9 :: a x1
[14] __primitive.dep 9 :: a x1
[15] return [14 13 12 11 2]

___ control.dip65 (8 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] var :: ?a x1
[9] __primitive.ap 8 7 6 5 4 3 1 -> 15 14 13 12 11 :: v? x5
[11] __primitive.dep 9 :: a x1
[12] __primitive.dep 9 :: a x1
[13] __primitive.dep 9 :: a x1
[14] __primitive.dep 9 :: a x1
[15] __primitive.dep 9 :: a x1
[16] return [15 14 13 12 11 2]

___ control.dip66 (8 -> 7) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] var :: ?a x1
[9] __primitive.ap 8 7 6 5 4 3 1 -> 16 15 14 13 12 11 :: v? x6
[11] __primitive.dep 9 :: a x1
[12] __primitive.dep 9 :: a x1
[13] __primitive.dep 9 :: a x1
[14] __primitive.dep 9 :: a x1
[15] __primitive.dep 9 :: a x1
[16] __primitive.dep 9 :: a x1
[17] return [16 15 14 13 12 11 2]

___ control.either (3 -> 1) x2 ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?l x2
[4] __primitive.ap &3 -> 9 5 :: v? x2
[5] __primitive.dep 4 :: y x1
[6] __primitive.eq_s 5 7 :: y x1
[7] val Right :: y x1
[8] __primitive.assert 9 6 :: a? x1
[9] __primitive.dep 4 :: a x1
[10] __primitive.ap 8 1 -> 11 :: v? x1
[11] __primitive.dep 10 :: a x1
[12] return [11] -> 21
[13] __primitive.ap 3 -> 18 14 :: v? x2
[14] __primitive.dep 13 :: y x1
[15] __primitive.eq_s 14 16 :: y x1
[16] val Left :: y x1
[17] __primitive.assert 18 15 :: a? x1
[18] __primitive.dep 13 :: a x1
[19] __primitive.ap 17 2 -> 20 :: v? x1
[20] __primitive.dep 19 :: a x1
[21] return [20]

___ control.fork (3 -> 2) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?a x2
[4] __primitive.ap &3 1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 3 2 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [7 5]

___ control.if (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?a x2
[4] __primitive.ap &3 2 -> 5 :: v? x1
[5] __primitive.dep 4 :: y x1
[6] __primitive.assert 8 5 :: a? x1
[7] __primitive.ap 3 1 -> 8 :: v? x1
[8] __primitive.dep 7 :: a x1
[9] return [6]

___ control.ifdo (2 -> 1) x2 ___
[1] var :: ?l x2
[2] var :: ?a x3
[3] __primitive.ap &2 &1 -> 6 4 :: v? x2
[4] __primitive.dep 3 :: y x1
[5] __primitive.assert 6 4 :: a? x1
[6] __primitive.dep 3 :: a x1
[7] return [5] -> 14
[8] __primitive.ap &2 2 1 -> 10 X 11 :: v? x2
[10] __primitive.dep 8 :: a x1
[11] __primitive.dep 8 :: y x1
[12] __primitive.not 11 :: y x1
[13] __primitive.assert 10 12 :: a? x1
[14] return [13]

___ control.ifte (3 -> 1) x2 ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?y x2
[4] __primitive.not &3 :: y x1
[5] __primitive.assert 1 4 :: a? x1
[6] return [5] -> 8
[7] __primitive.assert 2 3 :: a? x1
[8] return [7]

___ control.in2 (2 -> 3) ___
[1] var :: ?a x2
[2] var :: ?a x2
[3] __primitive.quote &2 &1 :: l x1
[4] return [2 1 3]

___ control.in3 (3 -> 4) ___
[1] var :: ?a x2
[2] var :: ?a x2
[3] var :: ?a x2
[4] __primitive.quote &3 &2 &1 :: l x1
[5] return [3 2 1 4]

___ control.iterate (3 -> 1) x2 rec ___
[1] var :: ?l x3
[2] var :: ?l x2
[3] changing var :: ?a x4
[4] __primitive.ap &3 &1 -> 5 :: v? x1
[5] __primitive.dep 4 :: y x1
[6] __primitive.ap &3 &1 -> 7 :: v? x1
[7] __primitive.dep 6 :: y x1
[8] __primitive.not 7 :: y x1
[9] __primitive.assert &3 8 :: a? x1
[10] return [9] -> 15
[11] __primitive.assert 14 5 :: a? x1
[12] __primitive.ap 3 &2 -> 13 :: v? x1
[13] __primitive.dep 12 :: a x1
[14] jump control.iterate 13 2 1 :: a x1
[15] return [11]

___ control.maybe (3 -> 1) x2 ___
[1] var :: ?a x2
[2] var :: ?a x2
[3] var :: ?l x2
[4] __primitive.ap &1 &2 &3 -> 6 19 15 :: v? x3
[6] __primitive.dep 4 :: l x1
[7] __primitive.ap 1 2 3 -> 13 X 9 :: v? x2
[9] __primitive.dep 7 :: y x1
[10] __primitive.eq_s 9 11 :: y x1
[11] val Nothing :: y x1
[12] __primitive.assert 13 10 :: a? x1
[13] __primitive.dep 7 :: a x1
[14] return [12] -> 22
[15] __primitive.dep 4 :: y x1
[16] __primitive.eq_s 15 17 :: y x1
[17] val Just :: y x1
[18] __primitive.assert 19 16 :: a? x1
[19] __primitive.dep 4 :: a x1
[20] __primitive.ap 18 6 -> 21 :: v? x1
[21] __primitive.dep 20 :: a x1
[22] return [21]

___ control.para (4 -> 2) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 3 1 -> 6 :: v? x1
[6] __primitive.dep 5 :: a x1
[7] __primitive.ap 4 2 -> 8 :: v? x1
[8] __primitive.dep 7 :: a x1
[9] return [8 6]

___ control.peek (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x2
[3] __primitive.ap &2 1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [2 4]

___ control.seq2 (3 -> 2) ___
[1] var :: ?a x2
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.seq 2 &1 :: a x1
[5] __primitive.seq 3 1 :: a x1
[6] return [5 4]

___ control.times (3 -> 1) ___
[1] var :: ?i x1
[2] var :: ?l x1
[3] var :: ?a x1
[4] jump control.times_r0 3 2 1 :: a x1
[5] return [4]

___ control.times_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?i x2
[2] var :: ?l x2
[3] changing var :: ?a x2
[4] __primitive.gt &1 5 :: y x2
[5] val 0 :: i x1
[6] __primitive.not &4 :: y x1
[7] __primitive.assert &3 6 :: a? x1
[8] return [7] -> 15
[9] __primitive.assert 14 4 :: a? x1
[10] __primitive.ap 3 &2 -> 11 :: v? x1
[11] __primitive.dep 10 :: a x1
[12] __primitive.sub 1 13 :: i x1
[13] val 1 :: i x1
[14] jump control.times_r0 11 2 12 :: a x1
[15] return [9]

___ control.times_step (3 -> 3) ___
[1] var :: ?i x1
[2] var :: ?l x2
[3] var :: ?a x1
[4] __primitive.sub 1 5 :: i x1
[5] val 1 :: i x1
[6] __primitive.ap 3 &2 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [7 2 4]

___ control.while (2 -> 1) x2 rec ___
[1] var :: ?l x2
[2] changing var :: ?a x2
[3] __primitive.ap &2 &1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x3
[5] __primitive.seq 6 &4 :: v x1
[6] jump control.while 4 1 :: v x1
[7] return [5] -> 9
[8] __primitive.unless 2 4 :: a x1
[9] return [8]

___ control.with2 (3 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 6 5 :: v? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.dep 4 :: a x1
[7] return [6 2 5]

___ control.with3 (4 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 1 -> 7 6 :: v? x2
[6] __primitive.dep 5 :: a x1
[7] __primitive.dep 5 :: a x1
[8] return [7 3 2 6]

___ control.with4 (5 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 1 -> 8 7 :: v? x2
[7] __primitive.dep 6 :: a x1
[8] __primitive.dep 6 :: a x1
[9] return [8 4 3 2 7]

___ control.with5 (6 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 1 -> 9 8 :: v? x2
[8] __primitive.dep 7 :: a x1
[9] __primitive.dep 7 :: a x1
[10] return [9 5 4 3 2 8]

___ control.with6 (7 -> 7) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 1 -> 10 9 :: v? x2
[9] __primitive.dep 8 :: a x1
[10] __primitive.dep 8 :: a x1
[11] return [10 6 5 4 3 2 9]

___ gen_ed.count_lines (2 -> 3) ___
[1] var is File :: ?o x1
[2] var :: ?y x1
[3] val 0 :: i x1
[4] jump gen_ed.count_lines_r0 2 1 3 -> 7 6 :: y x3
[6] __primitive.dep 4 :: a x1
[7] __primitive.dep 4 :: a x1
[8] return [4 7 6]

___ gen_ed.count_lines_r0 (3 -> 3) x2 rec ___
[1] changing var :: ?i x2
[2] changing var is File :: ?o x1
[3] changing var :: ?y x1
[4] __primitive.read 3 2 -> 12 5 :: y x3
[5] __primitive.dep 4 :: s x2
[6] __primitive.eq_str &5 &7 :: y x1
[7] val "" :: s x2
[8] __primitive.not 6 :: y x4
[9] __primitive.not &8 :: y x3
[10] __primitive.assert &1 &9 :: i? x1
[11] __primitive.assert &14 &9 is File :: o? x1
[12] __primitive.dep 4 is File :: o x1.
[13] __primitive.unread 4 12 5 -> 14 :: y x3.
[14] __primitive.dep 13 is File :: o x2.
[15] __primitive.assert &13 9 :: y? x1
[16] return [15 11 10] -> 29
[17] __primitive.assert 23 &8 :: y? x1
[18] io.getline_loop 13 14 7 -> 20 X :: y x2
[20] __primitive.dep 18 is File :: o x1
[21] __primitive.add 1 22 :: i x1
[22] val 1 :: i x1
[23] jump gen_ed.count_lines_r0 18 20 21 -> 26 28 :: y x3
[25] __primitive.assert 26 &8 is File :: o? x1
[26] __primitive.dep 23 is File :: o x1
[27] __primitive.assert 28 8 :: i? x1
[28] __primitive.dep 23 :: i x1
[29] return [17 25 27]

___ gen_ed.count_lines_test (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.open 1 3 -> 4 :: y x2
[3] val "stream,in:std" :: s x1
[4] __primitive.dep 2 is File :: o x1
[5] io.getline_loop 2 4 7 -> 8 10 :: y x3
[7] val "" :: s x1
[8] __primitive.dep 5 is File :: o x1
[9] __primitive.close 5 8 :: y x1
[10] __primitive.dep 5 :: s x1
[11] __primitive.strcat 12 10 :: s x1
[12] val "in:" :: s x1
[13] __primitive.open 9 11 -> 14 :: y x2
[14] __primitive.dep 13 is File :: o x1
[15] gen_ed.count_lines_r0 13 14 17 -> 18 23 :: y x3
[17] val 0 :: i x1
[18] __primitive.dep 15 is File :: o x1
[19] __primitive.close 15 18 :: y x1
[20] __primitive.open 19 21 -> 22 :: y x2
[21] val "stream,out:std" :: s x1
[22] __primitive.dep 20 is File :: o x1
[23] __primitive.dep 15 :: i x1
[24] __primitive.to_string 23 :: s x1
[25] __primitive.write 20 22 24 -> 26 :: y x2
[26] __primitive.dep 25 is File :: o x1
[27] __primitive.close 25 26 :: y x1
[28] return [27]

___ gen_ed.dl_test (1 -> 1) ___
[1] var :: ?i x1
[2] __primitive.add 1 3 :: i x1
[3] val 3 :: i x1
[4] jump gen_ed.dl_test_r0 2 :: i x1
[5] return [4]

___ gen_ed.dl_test_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] __primitive.lt &1 3 :: y x2
[3] val 10 :: i x1
[4] __primitive.not &2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 11
[7] __primitive.assert 10 2 :: i? x1
[8] __primitive.add 1 9 :: i x1
[9] val 3 :: i x1
[10] jump gen_ed.dl_test_r0 8 :: i x1
[11] return [7]

___ gen_ed.dl_test2 (1 -> 1) ___
[1] var :: ?i x1
[2] __primitive.add 1 3 :: i x1
[3] val 3 :: i x1
[4] jump gen_ed.dl_test2_r0 2 :: i x1
[5] return [4]

___ gen_ed.dl_test2_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] __primitive.lt &1 3 :: y x2
[3] val 10 :: i x1
[4] __primitive.not &2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 11
[7] __primitive.assert 10 2 :: i? x1
[8] __primitive.add 1 9 :: i x1
[9] val 3 :: i x1
[10] jump gen_ed.dl_test2_r0 8 :: i x1
[11] return [7]

___ gen_ed.dl_test3 (2 -> 3) ___
[1] var is File :: ?o x1
[2] var :: ?y x1
[3] __primitive.read 2 1 -> 6 4 :: y x3
[4] __primitive.dep 3 :: s x1
[5] val "" :: s x1
[6] __primitive.dep 3 is File :: o x1
[7] jump gen_ed.dl_test3_r0 3 6 5 4 -> 10 9 :: y x3
[9] __primitive.dep 7 :: a x1
[10] __primitive.dep 7 :: a x1
[11] return [7 10 9]

___ gen_ed.dl_test3_r0 (4 -> 3) x2 rec ___
[1] changing var :: ?s x2
[2] changing var :: ?s x1
[3] changing var is File :: ?o x2
[4] changing var :: ?y x2
[5] __primitive.eq_str &1 6 :: y x1
[6] val "" :: s x1
[7] __primitive.not 5 :: y x4
[8] __primitive.not &7 :: y x3
[9] __primitive.assert &10 &8 :: s? x1
[10] __primitive.strcat 2 1 :: s x2.
[11] __primitive.assert &3 &8 is File :: o? x1
[12] __primitive.assert &4 8 :: y? x1
[13] return [12 11 9] -> 24
[14] __primitive.assert 18 &7 :: y? x1
[15] __primitive.read 4 3 -> 16 17 :: y x3
[16] __primitive.dep 15 is File :: o x1
[17] __primitive.dep 15 :: s x1
[18] jump gen_ed.dl_test3_r0 15 16 10 17 -> 21 23 :: y x3
[20] __primitive.assert 21 &7 is File :: o? x1
[21] __primitive.dep 18 is File :: o x1
[22] __primitive.assert 23 7 :: s? x1
[23] __primitive.dep 18 :: s x1
[24] return [14 20 22]

___ gen_ed.do_linear (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x2
[3] var :: ?a x1
[4] __primitive.ap 3 &2 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] jump gen_ed.iterate_linear 5 2 1 :: a x1
[7] return [6]

___ gen_ed.dupu (2 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x2
[3] return [&2 2 1]

___ gen_ed.il_test (1 -> 1) ___
[1] var :: ?i x1
[2] jump gen_ed.il_test_r0 1 :: i x1
[3] return [2]

___ gen_ed.il_test_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] __primitive.lt &1 3 :: y x2
[3] val 10 :: i x1
[4] __primitive.not &2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 11
[7] __primitive.assert 10 2 :: i? x1
[8] __primitive.add 1 9 :: i x1
[9] val 3 :: i x1
[10] jump gen_ed.il_test_r0 8 :: i x1
[11] return [7]

___ gen_ed.iterate_linear (3 -> 1) x2 rec ___
[1] var :: ?l x2
[2] var :: ?l x2
[3] changing var :: ?a x1
[4] __primitive.ap 3 &1 -> 8 5 :: v? x2
[5] __primitive.dep 4 :: y x2
[6] __primitive.not &5 :: y x1
[7] __primitive.assert &8 6 :: a? x1
[8] __primitive.dep 4 :: a x2.
[9] return [7] -> 14
[10] __primitive.assert 13 5 :: a? x1
[11] __primitive.ap 8 &2 -> 12 :: v? x1
[12] __primitive.dep 11 :: a x1
[13] jump gen_ed.iterate_linear 12 2 1 :: a x1
[14] return [10]

___ gen_ed.read_list (2 -> 3) ___
[1] var is File :: ?o x1
[2] var :: ?y x1
[3] [] :: l x1
[4] jump gen_ed.read_list_r0 2 1 3 -> 7 6 :: y x3
[6] __primitive.dep 4 :: a x1
[7] __primitive.dep 4 :: a x1
[8] return [4 7 6]

___ gen_ed.read_list_r0 (3 -> 3) x2 rec ___
[1] changing var :: ?l x2
[2] changing var is File :: ?o x1
[3] changing var :: ?y x1
[4] __primitive.read 3 2 -> 12 5 :: y x3
[5] __primitive.dep 4 :: s x2
[6] __primitive.eq_str &5 &7 :: y x1
[7] val "" :: s x2
[8] __primitive.not 6 :: y x4
[9] __primitive.not &8 :: y x3
[10] __primitive.assert &1 &9 :: l? x1
[11] __primitive.assert &14 &9 is File :: o? x1
[12] __primitive.dep 4 is File :: o x1.
[13] __primitive.unread 4 12 5 -> 14 :: y x3.
[14] __primitive.dep 13 is File :: o x2.
[15] __primitive.assert &13 9 :: y? x1
[16] return [15 11 10] -> 29
[17] __primitive.assert 23 &8 :: y? x1
[18] io.getline_loop 13 14 7 -> 20 21 :: y x3
[20] __primitive.dep 18 is File :: o x1
[21] __primitive.dep 18 :: s x1
[22] __primitive.ap 21 1 :: l x1
[23] jump gen_ed.read_list_r0 18 20 22 -> 26 28 :: y x3
[25] __primitive.assert 26 &8 is File :: o? x1
[26] __primitive.dep 23 is File :: o x1
[27] __primitive.assert 28 8 :: l? x1
[28] __primitive.dep 23 :: l x1
[29] return [17 25 27]

___ gen_ed.reverse_list (3 -> 3) ___
[1] var is File :: ?o x1
[2] var is File :: ?o x1
[3] var :: ?y x1
[4] gen_ed.read_list_r0 3 2 &6 -> 11 7 :: y x3
[6] [] :: l x2
[7] __primitive.dep 4 :: l x1
[8] list.reverse_r0 6 7 :: l x1
[9] jump gen_ed.write_list_r0 4 1 8 -> 10 :: y x2
[10] __primitive.dep 9 is File :: o x1
[11] __primitive.dep 4 is File :: o x1
[12] return [9 11 10]

___ gen_ed.sum_lines (2 -> 3) ___
[1] var is File :: ?o x1
[2] var :: ?y x1
[3] val 0 :: i x1
[4] jump gen_ed.sum_lines_r0 2 1 3 -> 7 6 :: y x3
[6] __primitive.dep 4 :: a x1
[7] __primitive.dep 4 :: a x1
[8] return [4 7 6]

___ gen_ed.sum_lines_r0 (3 -> 3) x2 rec ___
[1] changing var :: ?i x2
[2] changing var is File :: ?o x1
[3] changing var :: ?y x1
[4] __primitive.read 3 2 -> 12 5 :: y x3
[5] __primitive.dep 4 :: s x2
[6] __primitive.eq_str &5 &7 :: y x1
[7] val "" :: s x2
[8] __primitive.not 6 :: y x4
[9] __primitive.not &8 :: y x3
[10] __primitive.assert &1 &9 :: i? x1
[11] __primitive.assert &14 &9 is File :: o? x1
[12] __primitive.dep 4 is File :: o x1.
[13] __primitive.unread 4 12 5 -> 14 :: y x3.
[14] __primitive.dep 13 is File :: o x2.
[15] __primitive.assert &13 9 :: y? x1
[16] return [15 11 10] -> 30
[17] __primitive.assert 24 &8 :: y? x1
[18] io.getline_loop 13 14 7 -> 20 21 :: y x3
[20] __primitive.dep 18 is File :: o x1
[21] __primitive.dep 18 :: s x1
[22] __primitive.from_string 21 :: i? x1
[23] __primitive.add 22 1 :: i x1
[24] jump gen_ed.sum_lines_r0 18 20 23 -> 27 29 :: y x3
[26] __primitive.assert 27 &8 is File :: o? x1
[27] __primitive.dep 24 is File :: o x1
[28] __primitive.assert 29 8 :: i? x1
[29] __primitive.dep 24 :: i x1
[30] return [17 26 28]

___ gen_ed.sum_lines_test (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.open 1 3 -> 4 :: y x2
[3] val "stream,in:std" :: s x1
[4] __primitive.dep 2 is File :: o x1
[5] io.getline_loop 2 4 7 -> 8 10 :: y x3
[7] val "" :: s x1
[8] __primitive.dep 5 is File :: o x1
[9] __primitive.close 5 8 :: y x1
[10] __primitive.dep 5 :: s x1
[11] __primitive.strcat 12 10 :: s x1
[12] val "in:" :: s x1
[13] __primitive.open 9 11 -> 14 :: y x2
[14] __primitive.dep 13 is File :: o x1
[15] gen_ed.sum_lines_r0 13 14 17 -> 18 23 :: y x3
[17] val 0 :: i x1
[18] __primitive.dep 15 is File :: o x1
[19] __primitive.close 15 18 :: y x1
[20] __primitive.open 19 21 -> 22 :: y x2
[21] val "stream,out:std" :: s x1
[22] __primitive.dep 20 is File :: o x1
[23] __primitive.dep 15 :: i x1
[24] __primitive.to_string 23 :: s x1
[25] __primitive.write 20 22 24 -> 26 :: y x2
[26] __primitive.dep 25 is File :: o x1
[27] __primitive.close 25 26 :: y x1
[28] return [27]

___ gen_ed.write_list (3 -> 2) ___
[1] var :: ?l x1
[2] var is File :: ?o x1
[3] var :: ?y x1
[4] jump gen_ed.write_list_r0 3 2 1 -> 5 :: y x2
[5] __primitive.dep 4 :: a x1
[6] return [4 5]

___ gen_ed.write_list_r0 (3 -> 2) x2 rec ___
[1] changing var :: ?l x1
[2] changing var is File :: ?o x2
[3] changing var :: ?y x2
[4] __primitive.ap 1 -> 5 :: l? x2
[5] __primitive.dep 4 :: s x5
[6] __primitive.seq 13 &5 :: v x1
[7] __primitive.write &3 &2 &5 -> 8 :: y x2
[8] __primitive.dep 7 is File :: o x1
[9] __primitive.write 7 8 10 -> 11 :: y x2
[10] val "\n" :: s x1
[11] __primitive.dep 9 is File :: o x1
[12] jump gen_ed.write_list_r0 9 11 4 -> 13 :: v x2
[13] __primitive.dep 12 :: v x1
[14] __primitive.unless 2 &5 is File :: o x1
[15] __primitive.unless 3 5 :: y x1
[16] return [15 14] -> 18
[17] __primitive.seq 12 5 :: v x1
[18] return [17 6]

___ io.getline (2 -> 3) ___
[1] var is File :: ?o x1
[2] var :: ?y x1
[3] jump io.getline_loop 2 1 5 -> 7 6 :: y x3
[5] val "" :: s x1
[6] __primitive.dep 3 :: s x1
[7] __primitive.dep 3 is File :: o x1
[8] return [3 7 6]

___ io.getline_loop (3 -> 3) x3 rec ___
[1] changing var :: ?s x3
[2] changing var is File :: ?o x1
[3] changing var :: ?y x1
[4] __primitive.read 3 2 -> 10 5 :: y x5
[5] __primitive.dep 4 :: s x3
[6] __primitive.strsplit &5 7 -> 11 :: s? x11
[7] val "\n" :: s x1
[8] __primitive.seq &6 &6 :: s x1
[9] __primitive.seq 14 &6 is File :: o x1
[10] __primitive.dep 4 is File :: o x3.
[11] __primitive.dep 6 :: s x1
[12] __primitive.strcat 1 11 :: s x1
[13] __primitive.unread 4 10 12 -> 14 :: y x2
[14] __primitive.dep 13 is File :: o x1
[15] __primitive.seq 13 6 :: y x1
[16] return [15 9 8] -> 52
[17] __primitive.unless 21 &6 :: y x1
[18] __primitive.eq_str &5 19 :: y x10
[19] val "" :: s x1
[20] __primitive.not &18 :: y x12
[21] __primitive.assert 23 &20 :: y? x1
[22] __primitive.strcat &1 5 :: s x1
[23] jump io.getline_loop &4 &10 22 -> 32 44 :: y x3
[25] __primitive.assert 27 &20 :: y? x1
[26] __primitive.unless 25 &6 :: y x1
[27] __primitive.assert 4 &18 :: y? x1
[28] __primitive.assert 31 &18 is File :: o? x1
[29] __primitive.assert 28 &20 is File :: o? x1
[30] __primitive.unless 29 &6 is File :: o x1
[31] __primitive.assert 32 &20 is File :: o? x1
[32] __primitive.dep 23 is File :: o x1
[33] __primitive.assert 37 &20 is File :: o? x1
[34] __primitive.assert 33 &18 is File :: o? x1
[35] __primitive.assert 34 &20 is File :: o? x1
[36] __primitive.unless 35 &6 is File :: o x1
[37] __primitive.assert 10 &18 is File :: o? x1
[38] __primitive.assert 43 &18 :: s? x1
[39] __primitive.assert 38 &20 :: s? x1
[40] __primitive.assert 39 &18 :: s? x1
[41] __primitive.assert 40 &20 :: s? x1
[42] __primitive.unless 41 &6 :: s x1
[43] __primitive.assert 44 &20 :: s? x1
[44] __primitive.dep 23 :: s x1
[45] __primitive.assert 51 &20 :: s? x1
[46] __primitive.assert 45 &18 :: s? x1
[47] __primitive.assert 46 &20 :: s? x1
[48] __primitive.assert 47 &18 :: s? x1
[49] __primitive.assert 48 20 :: s? x1
[50] __primitive.unless 49 6 :: s x1
[51] __primitive.assert 1 18 :: s? x1
[52] return [17 30 42] -> 53
[53] return [26 36 50]

___ io.getline_std (1 -> 2) ___
[1] var :: ?y x1
[2] __primitive.open 1 3 -> 4 :: y x2
[3] val "stream,in:std" :: s x1
[4] __primitive.dep 2 is File :: o x1
[5] io.getline_loop 2 4 7 -> 9 8 :: y x3
[7] val "" :: s x1
[8] __primitive.dep 5 :: s x1
[9] __primitive.dep 5 is File :: o x1
[10] __primitive.close 5 9 :: y x1
[11] return [10 8]

___ io.is_eof (2 -> 3) ___
[1] var is File :: ?o x1
[2] var :: ?y x1
[3] __primitive.read 2 1 -> 7 4 :: y x3
[4] __primitive.dep 3 :: s x2
[5] __primitive.eq_str &4 6 :: y x1
[6] val "" :: s x1
[7] __primitive.dep 3 is File :: o x1
[8] __primitive.unread 3 7 4 -> 9 :: y x2
[9] __primitive.dep 8 is File :: o x1
[10] return [8 9 5]

___ io.read_std (1 -> 2) ___
[1] var :: ?y x1
[2] __primitive.open 1 3 -> 4 :: y x2
[3] val "stream,in:std" :: s x1
[4] __primitive.dep 2 is File :: o x1
[5] __primitive.read 2 4 -> 7 6 :: y x3
[6] __primitive.dep 5 :: s x1
[7] __primitive.dep 5 is File :: o x1
[8] __primitive.close 5 7 :: y x1
[9] return [8 6]

___ io.stream_read_array (2 -> 1) ___
[1] var :: ?l x1
[2] var is Array :: ?o x1
[3] jump io.stream_read_array_r0 2 1 :: l x1
[4] return [3]

___ io.stream_read_array_r0 (2 -> 1) rec ___
[1] changing var :: ?l x1
[2] changing var is Array :: ?o x1
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: i x1
[5] __primitive.read_array 2 4 -> 7 is Array :: o x2
[6] jump io.stream_read_array_r0 5 3 :: l x1
[7] __primitive.dep 5 :: i x1
[8] __primitive.pushr 6 7 :: l x1
[9] return [8]

___ io.stream_read_write_array (4 -> 2) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?l x1
[4] var is Array :: ?o x1
[5] __primitive.dup_array 4 -> 6 is Array :: o x2
[6] __primitive.dep 5 is Array :: o x1
[7] io.stream_write_array_r0 5 2 1 :: l x1
[8] jump io.stream_read_array_r0 6 3 :: l x1
[9] return [8 7]

___ io.stream_write_array (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var is Array :: ?o x1
[4] jump io.stream_write_array_r0 3 1 2 :: l x1
[5] return [4]

___ io.stream_write_array_r0 (3 -> 1) rec ___
[1] changing var :: ?l x1
[2] changing var :: ?l x1
[3] changing var is Array :: ?o x1
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: i x1
[6] __primitive.ap 1 -> 7 :: l? x2
[7] __primitive.dep 6 :: i x1
[8] __primitive.write_array 3 5 7 is Array :: o x2
[9] __primitive.seq 12 &8 is True :: y x1
[10] jump io.stream_write_array_r0 8 4 6 :: l x1
[11] __primitive.pushr 10 9 :: l x1
[12] val True :: y x1
[13] return [11]

___ io.unread_std (2 -> 1) ___
[1] var :: ?s x1
[2] var :: ?y x1
[3] __primitive.open 2 4 -> 5 :: y x2
[4] val "stream,in:std" :: s x1
[5] __primitive.dep 3 is File :: o x1
[6] __primitive.unread 3 5 1 -> 7 :: y x2
[7] __primitive.dep 6 is File :: o x1
[8] __primitive.close 6 7 :: y x1
[9] return [8]

___ io.update_array (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?i x2
[3] var is Array :: ?o x1
[4] __primitive.read_array 3 &2 -> 5 is Array :: o x2
[5] __primitive.dep 4 :: i x1
[6] __primitive.ap 5 1 -> 7 :: v? x1
[7] __primitive.dep 6 :: i x1
[8] __primitive.write_array 4 2 7 is Array :: o x1
[9] return [8]

___ io.write_std (2 -> 1) ___
[1] var :: ?s x1
[2] var :: ?y x1
[3] __primitive.open 2 4 -> 5 :: y x2
[4] val "stream,out:std" :: s x1
[5] __primitive.dep 3 is File :: o x1
[6] __primitive.write 3 5 1 -> 7 :: y x2
[7] __primitive.dep 6 is File :: o x1
[8] __primitive.close 6 7 :: y x1
[9] return [8]

___ list.@ (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?l x1
[3] list.dropl_r0 2 1 :: l x1
[4] __primitive.ap 3 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] return [5]

___ list.assoc (2 -> 1) x2 rec ___
[1] var :: ?s x2
[2] changing var :: ?l x1
[3] __primitive.ap 2 -> 4 :: l? x2
[4] __primitive.dep 3 :: l x1
[5] __primitive.ap 4 -> 9 6 :: v? x2
[6] __primitive.dep 5 :: s x1
[7] __primitive.eq_str 6 &1 :: y x2
[8] __primitive.assert 9 &7 :: a? x1
[9] __primitive.dep 5 :: a x1
[10] return [8] -> 14
[11] __primitive.not 7 :: y x1
[12] __primitive.assert 13 11 :: a? x1
[13] jump list.assoc 3 1 :: a x1
[14] return [12]

___ list.assoc_step (2 -> 3) ___
[1] var :: ?s x1
[2] var :: ?l x1
[3] __primitive.ap 2 -> 4 :: l? x2
[4] __primitive.dep 3 :: l x1
[5] __primitive.ap 4 -> 8 6 :: v? x2
[6] __primitive.dep 5 :: s x1
[7] __primitive.eq_str 6 1 :: y x1
[8] __primitive.dep 5 :: a x1
[9] return [3 8 7]

___ list.dropl (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?l x1
[3] jump list.dropl_r0 2 1 :: l x1
[4] return [3]

___ list.dropl_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?i x2
[2] changing var :: ?l x2
[3] __primitive.gt &1 4 :: y x2
[4] val 0 :: i x1
[5] __primitive.not &3 :: y x1
[6] __primitive.assert &2 5 :: l? x1
[7] return [6] -> 13
[8] __primitive.assert 12 3 :: l? x1
[9] __primitive.sub 1 10 :: i x1
[10] val 1 :: i x1
[11] __primitive.ap 2 -> X :: l? x1
[12] jump list.dropl_r0 11 9 :: l x1
[13] return [8]

___ list.filter (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] [] :: l x1
[4] jump list.filter_r0 1 2 3 :: l x1
[5] return [4]

___ list.filter_r0 (3 -> 1) x3 rec ___
[1] changing var :: ?l x3
[2] changing var :: ?l x1
[3] var :: ?l x3
[4] __primitive.ap 2 -> 5 :: l? x3
[5] __primitive.dep 4 :: a x5
[6] __primitive.seq 11 &5 :: v x1
[7] __primitive.ap &5 &3 -> 8 :: v? x1
[8] __primitive.dep 7 :: y x2
[9] __primitive.not &8 :: y x1
[10] __primitive.assert &1 9 :: l? x1
[11] jump list.filter_r0 3 4 10 :: v x1
[12] return [6] -> 17
[13] __primitive.seq 16 &5 :: v x1
[14] __primitive.assert 15 8 :: l? x1
[15] __primitive.ap 5 1 :: l x1
[16] jump list.filter_r0 3 4 14 :: v x1
[17] return [13] -> 19
[18] __primitive.unless 1 5 :: l x1
[19] return [18]

___ list.filter_step (3 -> 2) x2 ___
[1] var :: ?l x1
[2] var :: ?l x2
[3] var :: ?l x1
[4] __primitive.ap 3 -> 5 :: l? x3
[5] __primitive.dep 4 :: a x2
[6] __primitive.ap &5 1 -> 7 :: v? x1
[7] __primitive.dep 6 :: y x2
[8] __primitive.not &7 :: y x1
[9] __primitive.assert &2 8 :: l? x1
[10] return [4 9] -> 13
[11] __primitive.assert 12 7 :: l? x1
[12] __primitive.ap 5 2 :: l x1
[13] return [4 11]

___ list.foldl (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?l x1
[4] [] :: l x1
[5] list.foldl_r0 1 3 4 :: l x1
[6] __primitive.ap 2 5 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [7]

___ list.foldl_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?l x2
[2] changing var :: ?l x1
[3] var :: ?l x2
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x3
[6] __primitive.seq 9 &5 :: v x1
[7] __primitive.ap 5 &3 :: l x1
[8] __primitive.compose 7 1 :: l x1
[9] jump list.foldl_r0 3 4 8 :: v x1
[10] return [6] -> 12
[11] __primitive.unless 1 5 :: l x1
[12] return [11]

___ list.foldl_step (3 -> 3) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?l x2
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 5 &3 :: l x1
[7] __primitive.compose 6 1 :: l x1
[8] return [3 4 7]

___ list.foldr (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?l x1
[4] jump list.foldr_r0 1 3 2 :: a x1
[5] return [4]

___ list.foldr_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?a x2
[2] changing var :: ?l x1
[3] var :: ?l x2
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x3
[6] __primitive.seq 9 &5 :: v x1
[7] __primitive.ap &5 &1 &3 -> 8 :: v? x1
[8] __primitive.dep 7 :: a x1
[9] jump list.foldr_r0 3 4 8 :: v x1
[10] return [6] -> 12
[11] __primitive.unless 1 5 :: a x1
[12] return [11]

___ list.foldr_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?a x2
[2] changing var :: ?l x1
[3] var :: ?l x2
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x3
[6] __primitive.seq 9 &5 :: v x1
[7] __primitive.ap &5 &1 &3 -> 8 :: v? x1
[8] __primitive.dep 7 :: a x1
[9] jump list.foldr_r0 3 4 8 :: v x1
[10] return [6] -> 12
[11] __primitive.unless 1 5 :: a x1
[12] return [11]

___ list.foldr_step (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?l x1
[3] var :: ?l x2
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 5 1 &3 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [3 4 7]

___ list.half_rem (1 -> 2) ___
[1] var :: ?i x2
[2] __primitive.div &1 3 :: i? x2
[3] val 2 :: i x1
[4] __primitive.sub 1 &2 :: i x1
[5] return [4 2]

___ list.head (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: v? x1
[3] __primitive.dep 2 :: a x1
[4] return [3]

___ list.iteratel (2 -> 1) rec ___
[1] var :: ?l x2
[2] changing var :: ?a x2
[3] __primitive.ap &2 &1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] list.iteratel 4 1 :: v x1
[6] __primitive.quote 5 2 :: l x1
[7] return [6]

___ list.length (1 -> 1) ___
[1] var :: ?l x1
[2] val 0 :: i x1
[3] jump list.length_r0 2 1 :: i x1
[4] return [3]

___ list.length_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?l x1
[2] changing var :: ?i x2
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x2
[5] __primitive.seq 8 4 :: v x1
[6] __primitive.add 2 7 :: i x1
[7] val 1 :: i x1
[8] jump list.length_r0 6 3 :: v x1
[9] return [5] -> 11
[10] __primitive.unless 2 4 :: i x1
[11] return [10]

___ list.length_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?l x1
[2] changing var :: ?i x2
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x2
[5] __primitive.seq 8 4 :: v x1
[6] __primitive.add 2 7 :: i x1
[7] val 1 :: i x1
[8] jump list.length_r0 6 3 :: v x1
[9] return [5] -> 11
[10] __primitive.unless 2 4 :: i x1
[11] return [10]

___ list.listdup (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?i x1
[3] [] :: l x1
[4] jump list.listdup_r0 2 1 3 :: l x1
[5] return [4]

___ list.listdup_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?l x2
[2] var :: ?a x2
[3] changing var :: ?i x2
[4] __primitive.gt &3 5 :: y x2
[5] val 0 :: i x1
[6] __primitive.not &4 :: y x1
[7] __primitive.assert &1 6 :: l? x1
[8] return [7] -> 14
[9] __primitive.assert 13 4 :: l? x1
[10] __primitive.sub 3 11 :: i x1
[11] val 1 :: i x1
[12] __primitive.ap &2 1 :: l x1
[13] jump list.listdup_r0 10 2 12 :: l x1
[14] return [9]

___ list.map (2 -> 1) rec ___
[1] var :: ?l x2
[2] changing var :: ?l x1
[3] __primitive.ap 2 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x1
[5] jump list.map 3 &1 :: l x1
[6] __primitive.compose 5 4 1 :: l x1
[7] return [6]

___ list.map_with (3 -> 1) rec ___
[1] var :: ?l x2
[2] changing var :: ?a x1
[3] changing var :: ?l x1
[4] __primitive.ap 3 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 5 2 &1 -> 7 :: l? x2
[7] __primitive.dep 6 :: a x1
[8] jump list.map_with 4 7 1 :: l x1
[9] __primitive.compose 8 6 :: l x1
[10] return [9]

___ list.merge (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] jump list.merge_loop 2 1 4 :: a x1
[4] [] :: l x1
[5] return [3]

___ list.merge_loop (3 -> 1) x4 rec ___
[1] changing var :: ?l x4
[2] changing var :: ?l x5
[3] changing var :: ?l x3
[4] __primitive.ap &3 -> 5 :: l? x2
[5] __primitive.dep 4 :: i x3
[6] __primitive.ap &2 -> 7 :: v? x1
[7] __primitive.dep 6 :: i x1
[8] __primitive.lte &5 7 :: y x4
[9] __primitive.assert 4 &8 :: l? x1
[10] __primitive.assert &2 &8 :: l? x1
[11] __primitive.assert &5 &8 :: i? x2
[12] __primitive.seq 13 &11 :: l x1
[13] __primitive.ap 11 1 :: l x1
[14] jump list.merge_loop 9 10 12 :: v x1
[15] return [14] -> 25
[16] __primitive.not 8 :: y x3
[17] __primitive.assert 19 &16 :: a? x2
[18] __primitive.ap &2 -> 19 :: l? x2
[19] __primitive.dep 18 :: a x1
[20] __primitive.seq 23 &17 :: l x1
[21] __primitive.assert 18 &16 :: l? x1
[22] __primitive.assert &3 16 :: l? x1
[23] __primitive.ap 17 1 :: l x1
[24] jump list.merge_loop 22 21 20 :: v x1
[25] return [24] -> 28
[26] __primitive.unless 27 5 :: a x1
[27] __primitive.compose 2 1 :: l x1
[28] return [26] -> 33
[29] __primitive.ap 2 -> 30 :: v? x1
[30] __primitive.dep 29 :: a x1
[31] __primitive.unless 32 30 :: a x1
[32] __primitive.compose 3 1 :: l x1
[33] return [31]

___ list.merge_step (3 -> 3) x2 ___
[1] var :: ?l x2
[2] var :: ?l x3
[3] var :: ?l x2
[4] __primitive.ap &3 -> 5 :: l? x2
[5] __primitive.dep 4 :: i x2
[6] __primitive.ap &2 -> 7 :: v? x1
[7] __primitive.dep 6 :: i x1
[8] __primitive.lte &5 7 :: y x4
[9] __primitive.assert 5 &8 :: i? x2
[10] __primitive.seq 13 &9 :: l x1
[11] __primitive.assert &2 &8 :: l? x1
[12] __primitive.assert 4 &8 :: l? x1
[13] __primitive.ap 9 1 :: l x1
[14] return [12 11 10] -> 23
[15] __primitive.not 8 :: y x3
[16] __primitive.assert 18 &15 :: a? x2
[17] __primitive.ap 2 -> 18 :: l? x2
[18] __primitive.dep 17 :: a x1
[19] __primitive.seq 22 &16 :: l x1
[20] __primitive.assert 17 &15 :: l? x1
[21] __primitive.assert 3 15 :: l? x1
[22] __primitive.ap 16 1 :: l x1
[23] return [21 20 19]

___ list.movr (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] __primitive.ap 2 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x1
[5] __primitive.ap 4 1 :: l x1
[6] return [3 5]

___ list.pop_min (2 -> 3) x2 ___
[1] var :: ?l x3
[2] var :: ?l x2
[3] __primitive.ap &2 -> 4 :: l? x2
[4] __primitive.dep 3 :: i x2
[5] __primitive.ap &1 -> 6 :: v? x1
[6] __primitive.dep 5 :: i x1
[7] __primitive.lte &4 6 :: y x4
[8] __primitive.assert 4 &7 :: i? x1
[9] __primitive.assert &1 &7 :: l? x1
[10] __primitive.assert 3 &7 :: l? x1
[11] return [10 9 8] -> 18
[12] __primitive.not 7 :: y x3
[13] __primitive.assert 2 &12 :: l? x1
[14] __primitive.assert 16 &12 :: a? x1
[15] __primitive.ap 1 -> 16 :: l? x2
[16] __primitive.dep 15 :: a x1
[17] __primitive.assert 15 12 :: l? x1
[18] return [13 17 14]

___ list.pop_par (2 -> 4) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x1
[5] __primitive.ap 2 -> 6 :: l? x2
[6] __primitive.dep 5 :: a x1
[7] return [5 3 6 4]

___ list.popr_para (2 -> 4) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x1
[5] __primitive.ap 2 -> 6 :: l? x2
[6] __primitive.dep 5 :: a x1
[7] return [5 3 6 4]

___ list.pushif (3 -> 1) x2 ___
[1] var :: ?l x1
[2] var :: ?l x2
[3] var :: ?a x2
[4] __primitive.ap &3 1 -> 5 :: v? x1
[5] __primitive.dep 4 :: y x2
[6] __primitive.not &5 :: y x1
[7] __primitive.assert &2 6 :: l? x1
[8] return [7] -> 11
[9] __primitive.assert 10 5 :: l? x1
[10] __primitive.ap 3 2 :: l x1
[11] return [9]

___ list.pushl_seq (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x2
[3] __primitive.seq 4 &2 :: l x1
[4] __primitive.ap 2 1 :: l x1
[5] return [3]

___ list.repeat (1 -> 1) rec ___
[1] var :: ?a x2
[2] jump list.repeat &1 :: l x1
[3] __primitive.pushr 2 1 :: l x1
[4] return [3]

___ list.reverse (1 -> 1) ___
[1] var :: ?l x1
[2] [] :: l x1
[3] jump list.reverse_r0 2 1 :: l x1
[4] return [3]

___ list.reverse_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?l x1
[2] changing var :: ?l x2
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x3
[5] __primitive.seq 7 &4 :: v x1
[6] __primitive.pushr 2 4 :: l x1
[7] jump list.reverse_r0 6 3 :: v x1
[8] return [5] -> 10
[9] __primitive.unless 2 4 :: l x1
[10] return [9]

___ list.reverse_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?l x1
[2] changing var :: ?l x2
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x3
[5] __primitive.seq 7 &4 :: v x1
[6] __primitive.pushr 2 4 :: l x1
[7] jump list.reverse_r0 6 3 :: v x1
[8] return [5] -> 10
[9] __primitive.unless 2 4 :: l x1
[10] return [9]

___ list.seq_list (1 -> 1) ___
[1] var :: ?l x2
[2] val True :: y x1
[3] jump list.seq_list_r0 2 &1 :: y x1
[4] __primitive.seq 1 3 :: l x1
[5] return [4]

___ list.seq_list_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?l x1
[2] changing var :: ?y x2
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: y x3
[5] __primitive.seq 7 &4 :: v x1
[6] __primitive.seq 4 2 :: y x1
[7] jump list.seq_list_r0 6 3 :: v x1
[8] return [5] -> 10
[9] __primitive.unless 2 4 :: y x1
[10] return [9]

___ list.sort (1 -> 1) ___
[1] var :: ?l x1
[2] [] :: l x1
[3] jump list.sort_r0 2 1 :: a x1
[4] return [3]

___ list.sort_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?l x3
[2] var :: ?l x3
[3] list.length_r0 4 &1 :: i x2
[4] val 0 :: i x1
[5] __primitive.div &3 6 :: i? x1
[6] val 2 :: i x1
[7] __primitive.gt 3 8 :: y x2
[8] val 1 :: i x1
[9] __primitive.assert 10 &7 :: l? x1
[10] list.split_at_r0 &1 &11 5 -> 14 :: l x2
[11] [] :: l x2
[12] list.sort_r0 &2 9 :: l x1
[13] __primitive.assert 14 7 :: l? x1
[14] __primitive.dep 10 :: l x1
[15] list.sort_r0 2 13 :: l x1
[16] list.merge_loop 12 15 11 :: a x2
[17] jump list.seq_list_r0 18 &16 :: y x1
[18] val True :: y x1
[19] __primitive.seq 16 17 :: l x2
[20] return [19] -> 24
[21] __primitive.unless 23 19 :: a x1
[22] __primitive.ap 1 2 -> 23 :: v? x1
[23] __primitive.dep 22 :: a x1
[24] return [21]

___ list.split_at (2 -> 2) ___
[1] var :: ?i x1
[2] var :: ?l x1
[3] [] :: l x1
[4] jump list.split_at_r0 2 3 1 -> 5 :: l x2
[5] __primitive.dep 4 :: a x1
[6] return [4 5]

___ list.split_at_r0 (3 -> 2) x2 rec ___
[1] changing var :: ?i x2
[2] changing var :: ?l x2
[3] changing var :: ?l x2
[4] __primitive.gt &1 5 :: y x3
[5] val 0 :: i x1
[6] __primitive.not &4 :: y x2
[7] __primitive.assert &2 &6 :: l? x1
[8] __primitive.assert &3 6 :: l? x1
[9] return [8 7] -> 19
[10] __primitive.assert 16 &4 :: l? x1
[11] __primitive.sub 1 12 :: i x1
[12] val 1 :: i x1
[13] __primitive.ap 3 -> 14 :: l? x2
[14] __primitive.dep 13 :: a x1
[15] __primitive.ap 14 2 :: l x1
[16] jump list.split_at_r0 13 15 11 -> 18 :: l x2
[17] __primitive.assert 18 4 :: l? x1
[18] __primitive.dep 16 :: l x1
[19] return [10 17]

___ list.split_list (1 -> 3) ___
[1] var :: ?l x2
[2] list.length_r0 3 &1 :: i x2
[3] val 0 :: i x1
[4] __primitive.div &2 5 :: i? x1
[5] val 2 :: i x1
[6] jump list.split_at_r0 1 7 4 -> 8 :: l x2
[7] [] :: l x1
[8] __primitive.dep 6 :: l x1
[9] return [6 8 2]

___ list.top (1 -> 2) ___
[1] var :: ?l x2
[2] __primitive.ap &1 -> 3 :: v? x1
[3] __primitive.dep 2 :: a x1
[4] return [1 3]

___ list.top_par (2 -> 4) ___
[1] var :: ?l x2
[2] var :: ?l x2
[3] __primitive.ap &1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] __primitive.ap &2 -> 6 :: v? x1
[6] __primitive.dep 5 :: a x1
[7] return [2 1 6 4]

___ list.zip (3 -> 1) rec ___
[1] var :: ?l x2
[2] changing var :: ?l x1
[3] changing var :: ?l x1
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 3 -> 7 :: l? x2
[7] __primitive.dep 6 :: a x1
[8] __primitive.ap 7 5 &1 -> 9 :: v? x1
[9] __primitive.dep 8 :: a x1
[10] jump list.zip 6 4 1 :: v x1
[11] __primitive.pushr 10 9 :: l x1
[12] return [11]

___ list.zip1 (3 -> 4) ___
[1] var :: ?l x2
[2] var :: ?l x1
[3] var :: ?l x1
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 3 -> 7 :: l? x2
[7] __primitive.dep 6 :: a x1
[8] __primitive.ap 7 5 &1 -> 9 :: v? x1
[9] __primitive.dep 8 :: a x1
[10] return [6 4 1 9]

___ list.zip1_with (4 -> 5) ___
[1] var :: ?l x2
[2] var :: ?a x1
[3] var :: ?l x1
[4] var :: ?l x1
[5] __primitive.ap 3 -> 6 :: l? x2
[6] __primitive.dep 5 :: a x1
[7] __primitive.ap 4 -> 8 :: l? x2
[8] __primitive.dep 7 :: a x1
[9] __primitive.ap 8 6 2 &1 -> 11 12 :: v? x2
[11] __primitive.dep 9 :: a x1
[12] __primitive.dep 9 :: a x1
[13] return [7 5 12 1 11]

___ list.zip_with (4 -> 1) rec ___
[1] var :: ?l x2
[2] changing var :: ?a x1
[3] changing var :: ?l x1
[4] changing var :: ?l x1
[5] __primitive.ap 3 -> 6 :: l? x2
[6] __primitive.dep 5 :: a x1
[7] __primitive.ap 4 -> 8 :: l? x2
[8] __primitive.dep 7 :: a x1
[9] __primitive.ap 8 6 2 &1 -> 11 12 :: v? x2
[11] __primitive.dep 9 :: a x1
[12] __primitive.dep 9 :: a x1
[13] jump list.zip_with 7 5 12 1 :: v x1
[14] __primitive.pushr 13 11 :: l x1
[15] return [14]

___ logic.and (2 -> 1) x2 ___
[1] var :: ?y x2
[2] var :: ?a x1
[3] __primitive.assert 2 &1 :: a? x1
[4] return [3] -> 8
[5] __primitive.not 1 :: y x1
[6] __primitive.assert 7 5 is False :: y? x1
[7] val False :: y x1
[8] return [6]

___ logic.default (2 -> 1) x2 ___
[1] var :: ?a x1
[2] var :: ?a x2
[3] return [2] -> 5
[4] __primitive.unless 1 2 :: a x1
[5] return [4]

___ logic.implies (2 -> 1) x2 ___
[1] var :: ?a x1
[2] var :: ?y x1
[3] __primitive.not 2 :: y x2
[4] __primitive.not &3 :: y x1
[5] __primitive.assert 1 4 :: a? x1
[6] return [5] -> 9
[7] __primitive.assert 8 3 is True :: y? x1
[8] val True :: y x1
[9] return [7]

___ logic.or (2 -> 1) x2 ___
[1] var :: ?y x2
[2] var :: ?a x1
[3] __primitive.not &1 :: y x1
[4] __primitive.assert 2 3 :: a? x1
[5] return [4] -> 8
[6] __primitive.assert 7 1 is True :: y? x1
[7] val True :: y x1
[8] return [6]

___ logic.otherwise2 (4 -> 2) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x2
[4] var :: ?a x2
[5] __primitive.unless 6 &4 :: a x1
[6] __primitive.unless 1 &3 :: a x1
[7] __primitive.unless 2 3 :: a x1
[8] __primitive.unless 7 4 :: a x1
[9] return [8 5]

___ logic.valid (1 -> 1) x2 ___
[1] var :: ?a x2
[2] __primitive.seq 3 1 is True :: y x1
[3] val True :: y x1
[4] return [2] -> 7
[5] __primitive.unless 6 1 is False :: y x1
[6] val False :: y x1
[7] return [5]

___ logic.vifte (3 -> 1) x2 ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x2
[4] __primitive.seq 2 3 :: a x1
[5] return [4] -> 7
[6] __primitive.unless 1 3 :: a x1
[7] return [6]

___ num.bound (3 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] var :: ?i x2
[4] __primitive.gte &3 2 :: y x1
[5] __primitive.assert 3 4 :: i? x2
[6] __primitive.lte &5 1 :: y x1
[7] __primitive.assert 5 6 :: i? x1
[8] return [7]

___ num.even (1 -> 1) ___
[1] var :: ?i x1
[2] __primitive.bitand 1 3 in [0, 1] :: i x1
[3] val 1 :: i x1
[4] __primitive.eq 2 5 :: y x1
[5] val 0 :: i x1
[6] return [4]

___ num.max (2 -> 1) x2 ___
[1] var :: ?i x3
[2] var :: ?i x3
[3] __primitive.lte &2 &1 :: y x1
[4] __primitive.assert &1 3 :: i? x1
[5] return [4] -> 8
[6] __primitive.lte 1 &2 :: y x1
[7] __primitive.assert 2 6 :: i? x1
[8] return [7]

___ num.min (2 -> 1) x2 ___
[1] var :: ?i x3
[2] var :: ?i x3
[3] __primitive.gt &2 &1 :: y x1
[4] __primitive.assert &1 3 :: i? x1
[5] return [4] -> 8
[6] __primitive.gt 1 &2 :: y x1
[7] __primitive.assert 2 6 :: i? x1
[8] return [7]

___ num.odd (1 -> 1) ___
[1] var :: ?i x1
[2] __primitive.bitand 1 &3 in [0, 1] :: i x1
[3] val 1 :: i x2
[4] __primitive.eq 2 3 :: y x1
[5] return [4]

___ num.up_to (2 -> 1) ___
[1] var :: ?i x1
[2] var >= 0 :: ?i x2
[3] __primitive.gte &2 4 :: y x1
[4] val 0 :: i x1
[5] __primitive.assert 2 3 >= 0 :: i? x2
[6] __primitive.lte &5 1 :: y x1
[7] __primitive.assert 5 6 >= 0 :: i? x1
[8] return [7]

___ stack.-swap2 (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] return [1 3 2]

___ stack.-swap3 (4 -> 4) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] return [1 4 3 2]

___ stack.-swap4 (5 -> 5) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] return [1 5 4 3 2]

___ stack.-swap5 (6 -> 6) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] return [1 6 5 4 3 2]

___ stack.-swap6 (7 -> 7) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] return [1 7 6 5 4 3 2]

___ stack.dup2 (2 -> 4) ___
[1] var :: ?a x2
[2] var :: ?a x2
[3] return [&2 &1 2 1]

___ stack.dup_under (2 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x2
[3] return [&2 2 1]

___ stack.exch2 (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] return [1 2 3]

___ stack.exch3 (4 -> 4) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] return [1 3 2 4]

___ stack.exch4 (5 -> 5) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] return [1 4 3 2 5]

___ stack.get2 (1 -> 2) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 3 :: v? x2
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] return [4 3]

___ stack.get3 (1 -> 3) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 5 4 3 :: v? x3
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] return [5 4 3]

___ stack.get4 (1 -> 4) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 6 5 4 3 :: v? x4
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] return [6 5 4 3]

___ stack.get5 (1 -> 5) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 8 7 6 5 4 :: v? x5
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] __primitive.dep 2 :: a x1
[8] __primitive.dep 2 :: a x1
[9] return [8 7 6 5 4]

___ stack.get6 (1 -> 6) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 9 8 7 6 5 4 :: v? x6
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] __primitive.dep 2 :: a x1
[8] __primitive.dep 2 :: a x1
[9] __primitive.dep 2 :: a x1
[10] return [9 8 7 6 5 4]

___ stack.get7 (1 -> 7) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 10 9 8 7 6 5 4 :: v? x7
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] __primitive.dep 2 :: a x1
[8] __primitive.dep 2 :: a x1
[9] __primitive.dep 2 :: a x1
[10] __primitive.dep 2 :: a x1
[11] return [10 9 8 7 6 5 4]

___ stack.nip (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?v x0
[3] return [1]

___ stack.nip2 (3 -> 2) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?v x0
[4] return [2 1]

___ stack.over (2 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x2
[3] return [&2 1 2]

___ stack.over2 (3 -> 4) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x2
[4] return [&3 2 1 3]

___ stack.over3 (4 -> 5) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x2
[5] return [&4 3 2 1 4]

___ stack.over4 (5 -> 6) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x2
[6] return [&5 4 3 2 1 5]

___ stack.pull (1 -> 2) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: a x1
[4] return [3 2]

___ stack.pull2 (1 -> 3) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 :: l? x3
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] return [4 3 2]

___ stack.pull3 (1 -> 4) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 5 :: l? x4
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] return [5 4 3 2]

___ stack.pull4 (1 -> 5) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 5 6 :: l? x5
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] return [6 5 4 3 2]

___ stack.pull5 (1 -> 6) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 5 6 7 8 :: l? x6
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] __primitive.dep 2 :: a x1
[8] __primitive.dep 2 :: a x1
[9] return [8 7 6 5 4 2]

___ stack.pull6 (1 -> 7) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 5 6 7 8 9 :: l? x7
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] __primitive.dep 2 :: a x1
[8] __primitive.dep 2 :: a x1
[9] __primitive.dep 2 :: a x1
[10] return [9 8 7 6 5 4 2]

___ stack.pull7 (1 -> 8) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 5 6 7 8 9 10 :: l? x8
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] __primitive.dep 2 :: a x1
[8] __primitive.dep 2 :: a x1
[9] __primitive.dep 2 :: a x1
[10] __primitive.dep 2 :: a x1
[11] return [10 9 8 7 6 5 4 2]

___ stack.pull8 (1 -> 9) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 5 6 7 8 9 10 11 :: l? x9
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] __primitive.dep 2 :: a x1
[8] __primitive.dep 2 :: a x1
[9] __primitive.dep 2 :: a x1
[10] __primitive.dep 2 :: a x1
[11] __primitive.dep 2 :: a x1
[12] return [11 10 9 8 7 6 5 4 2]

___ stack.rev3 (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] return [1 2 3]

___ stack.swap2 (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] return [2 1 3]

___ stack.swap3 (4 -> 4) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] return [3 2 1 4]

___ stack.swap4 (5 -> 5) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] return [4 3 2 1 5]

___ stack.swap5 (6 -> 6) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] return [5 4 3 2 1 6]

___ stack.swap6 (7 -> 7) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] return [6 5 4 3 2 1 7]

___ stack.swap7 (8 -> 8) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] var :: ?a x1
[9] return [7 6 5 4 3 2 1 8]

___ stack.tail (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> X :: l? x1
[3] return [2]

___ stack.tail2 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> X X :: l? x1
[3] return [2]

___ stack.tuck (2 -> 3) ___
[1] var :: ?a x2
[2] var :: ?a x1
[3] return [&1 2 1]

___ tests.add_array_at (3 -> 2) ___
[1] var :: ?i x1
[2] var :: ?i x3
[3] var is Array :: ?o x1
[4] __primitive.read_array 3 &2 -> 5 is Array :: o x2
[5] __primitive.dep 4 :: i x1
[6] __primitive.add 5 1 :: i x1
[7] __primitive.write_array 4 &2 6 is Array :: o x1
[8] __primitive.read_array 7 2 -> 9 is Array :: o x2
[9] __primitive.dep 8 :: i x1
[10] return [8 9]

___ tests.after0 (1 -> 1) ___
[1] var :: ?l x1
[2] jump tests.after0_r0 1 :: a x1
[3] return [2]

___ tests.after0_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?l x2
[2] __primitive.ap &1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x1
[4] __primitive.neq 3 5 :: y x2
[5] val 0 :: i x1
[6] __primitive.not &4 :: y x1
[7] __primitive.assert 9 6 :: a? x1
[8] __primitive.ap 1 -> 9 X :: v? x1
[9] __primitive.dep 8 :: a x1
[10] return [7] -> 13
[11] __primitive.assert 12 4 :: a? x1
[12] jump tests.after0_r0 2 :: a x1
[13] return [11]

___ tests.alt_list (2 -> 1) ___
[1] var :: ?v x0
[2] var :: ?a x2
[3] __primitive.quote &2 2 :: l x1
[4] return [3]

___ tests.alt_seq (1 -> 1) x2 ___
[1] var :: ?y x2
[2] __primitive.assert 3 &1 is 1 :: i? x1
[3] val 1 :: i x1
[4] return [2] -> 8
[5] __primitive.not 1 :: y x1
[6] __primitive.assert 7 5 is 2 :: i? x1
[7] val 2 :: i x1
[8] return [6]

___ tests.altf_loop (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] jump tests.altf_loop_r0 2 1 :: a x1
[4] return [3]

___ tests.altf_loop_r0 (2 -> 1) x3 rec ___
[1] changing var :: ?i x2
[2] var :: ?a x2
[3] __primitive.gt &1 &4 :: y x3
[4] val 1 :: i x2
[5] __primitive.not &3 :: y x1
[6] __primitive.assert &2 5 :: a? x1
[7] return [6] -> 11
[8] __primitive.assert &10 &3 :: a? x1
[9] __primitive.sub 1 4 :: i x1.
[10] jump tests.altf_loop_r0 2 9 :: a x2.
[11] return [8] -> 13
[12] __primitive.assert 10 3 :: a? x1
[13] return [12]

___ tests.asq (2 -> 2) ___
[1] var :: ?y x3
[2] var :: ?l x1
[3] __primitive.assert &5 &1 :: a? x1
[4] __primitive.ap &1 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x2
[6] __primitive.pushr 4 5 :: l x1
[7] __primitive.assert 6 1 :: l? x1
[8] return [7 3]

___ tests.asq2 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: y x2
[4] __primitive.assert 5 &3 :: l? x1
[5] __primitive.ap 3 2 :: l x1
[6] return [4]

___ tests.assert_nready (2 -> 1) ___
[1] var :: ?y x1
[2] var :: ?i x1
[3] __primitive.assert 4 1 :: i? x1
[4] __primitive.add 2 5 :: i x1
[5] val 1 :: i x1
[6] return [3]

___ tests.assert_otherwise_quote (2 -> 1) ___
[1] var :: ?y x1
[2] var :: ?a x1
[3] __primitive.assert 4 1 is Something :: y? x1
[4] val Something :: y x1
[5] __primitive.unless 2 3 :: a x1
[6] return [5]

___ tests.assert_seq (2 -> 1) ___
[1] var :: ?y x1
[2] var is 1 :: ?i x1
[3] __primitive.assert 2 1 is 1 :: i? x1
[4] return [3]

___ tests.assoc100 (3 -> 1) ___
[1] var in [0, 100] :: ?i x2
[2] var in [0, 100] :: ?i x2
[3] var in [0, 100] :: ?i x2
[4] __primitive.gte &3 &5 :: y x1
[5] val 0 :: i x3
[6] __primitive.assert 3 4 in [0, 100] :: i? x2
[7] __primitive.lte &6 &8 :: y x1
[8] val 100 :: i x3
[9] __primitive.assert 6 7 in [0, 100] :: i? x2
[10] __primitive.gte &2 &5 :: y x1
[11] __primitive.assert 2 10 in [0, 100] :: i? x2
[12] __primitive.lte &11 &8 :: y x1
[13] __primitive.assert 11 12 in [0, 100] :: i? x2
[14] __primitive.gte &1 5 :: y x1
[15] __primitive.assert 1 14 in [0, 100] :: i? x2
[16] __primitive.lte &15 8 :: y x1
[17] __primitive.assert 15 16 in [0, 100] :: i? x2
[18] __primitive.add &13 &17 in [0, 200] :: i x1
[19] __primitive.add &9 18 in [0, 300] :: i x1
[20] __primitive.add 9 13 in [0, 200] :: i x1
[21] __primitive.add 20 17 in [0, 300] :: i x1
[22] __primitive.eq 19 21 :: y x1
[23] __primitive.assert 24 22 is True :: y? x1
[24] val True :: y x1
[25] return [23]

___ tests.axi_lite_slave (4 -> 2) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?l x1
[4] var is Array :: ?o x1
[5] __primitive.dup_array 4 -> 6 is Array :: o x2
[6] __primitive.dep 5 is Array :: o x1
[7] io.stream_write_array_r0 5 2 1 :: l x1
[8] jump io.stream_read_array_r0 6 3 :: l x1
[9] return [8 7]

___ tests.binrec (4 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?l x1
[4] var :: ?a x1
[5] control.iterate 4 3 2 :: a x1
[6] __primitive.ap 5 1 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [7]

___ tests.box (0 -> 1) rec ___
[1] tests.box :: v x1
[2] __primitive.quote 1 :: l x1
[3] return [2]

___ tests.br10 (1 -> 1) ___
[1] var :: ?i x1
[2] jump tests.br10_r0 1 :: i x1
[3] return [2]

___ tests.br10_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] __primitive.lt &1 3 :: y x2
[3] val 10 :: i x1
[4] __primitive.not &2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 11
[7] __primitive.assert 10 2 :: i? x1
[8] __primitive.add 1 9 :: i x1
[9] val 1 :: i x1
[10] jump tests.br10_r0 8 :: i x1
[11] return [7]

___ tests.calc (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.quote 3 1b :: l x1
[3] val 0 :: i x1
[4] jump tests.calc_loop 1 2 :: y x1
[5] return [4]

___ tests.calc_loop (2 -> 1) x15 rec ___
[1] changing var :: ?l x10
[2] changing var :: ?y x1
[3] __primitive.open 2 4 -> 5 :: y x2
[4] val "stream,out:std" :: s x1
[5] __primitive.dep 3 is File :: o x1
[6] __primitive.ap &1 -> 7 :: l? x3
[7] __primitive.dep 6 :: i x3
[8] __primitive.to_string &7 :: s x1
[9] __primitive.strcat 8 10 :: s x1
[10] val "\n" :: s x1
[11] __primitive.write 3 5 9 -> 12 :: y x2
[12] __primitive.dep 11 is File :: o x1
[13] __primitive.close 11 12 :: y x1
[14] __primitive.open 13 15 -> 16 :: y x2
[15] val "stream,in:std" :: s x1
[16] __primitive.dep 14 is File :: o x1
[17] io.getline_loop 14 16 19 -> 24 20 :: y x3
[19] val "" :: s x1
[20] __primitive.dep 17 :: s x1
[21] __primitive.strtrim 20 :: s x14
[22] __primitive.from_string &21 :: i? x3
[23] __primitive.seq 27 &22 :: v x1
[24] __primitive.dep 17 is File :: o x1.
[25] __primitive.close 17 24 :: y x15.
[26] __primitive.pushr 1 22 :: l x1
[27] jump tests.calc_loop 25 26 :: v x1
[28] return [23] -> 41
[29] __primitive.eq_str &21 30 :: y x3
[30] val "+" :: s x1
[31] __primitive.assert 35 &29 :: i? x3
[32] __primitive.ap &1 -> 33 34 :: l? x3
[33] __primitive.dep 32 :: i x1
[34] __primitive.dep 32 :: i x1
[35] __primitive.add 33 34 :: i x1
[36] __primitive.seq 40 &31 :: v x1
[37] __primitive.assert 32 &29 :: l? x1
[38] __primitive.pushr 37 &31 :: l x1
[39] __primitive.assert 38 29 :: l? x1
[40] jump tests.calc_loop 25 39 :: v x1
[41] return [36] -> 54
[42] __primitive.eq_str &21 43 :: y x3
[43] val "-" :: s x1
[44] __primitive.assert 48 &42 :: i? x3
[45] __primitive.ap &1 -> 46 47 :: l? x3
[46] __primitive.dep 45 :: i x1
[47] __primitive.dep 45 :: i x1
[48] __primitive.sub 46 47 :: i x1
[49] __primitive.seq 53 &44 :: v x1
[50] __primitive.assert 45 &42 :: l? x1
[51] __primitive.pushr 50 &44 :: l x1
[52] __primitive.assert 51 42 :: l? x1
[53] jump tests.calc_loop 25 52 :: v x1
[54] return [49] -> 67
[55] __primitive.eq_str &21 56 :: y x3
[56] val "*" :: s x1
[57] __primitive.assert 61 &55 :: i? x3
[58] __primitive.ap &1 -> 59 60 :: l? x3
[59] __primitive.dep 58 :: i x1
[60] __primitive.dep 58 :: i x1
[61] __primitive.mul 59 60 :: i x1
[62] __primitive.seq 66 &57 :: v x1
[63] __primitive.assert 58 &55 :: l? x1
[64] __primitive.pushr 63 &57 :: l x1
[65] __primitive.assert 64 55 :: l? x1
[66] jump tests.calc_loop 25 65 :: v x1
[67] return [62] -> 80
[68] __primitive.eq_str &21 69 :: y x3
[69] val "/" :: s x1
[70] __primitive.assert 74 &68 :: i? x3
[71] __primitive.ap &1 -> 72 73 :: l? x3
[72] __primitive.dep 71 :: i x1
[73] __primitive.dep 71 :: i x1
[74] __primitive.div 72 73 :: i? x1
[75] __primitive.seq 79 &70 :: v x1
[76] __primitive.assert 71 &68 :: l? x1
[77] __primitive.pushr 76 &70 :: l x1
[78] __primitive.assert 77 68 :: l? x1
[79] jump tests.calc_loop 25 78 :: v x1
[80] return [75] -> 93
[81] __primitive.eq_str &21 82 :: y x3
[82] val "gcd" :: s x1
[83] __primitive.assert 87 &81 :: i? x3
[84] __primitive.ap &1 -> 85 86 :: l? x3
[85] __primitive.dep 84 :: i x1
[86] __primitive.dep 84 :: i x1
[87] algorithm.gcd_r0 85 86 :: i x1
[88] __primitive.seq 92 &83 :: v x1
[89] __primitive.assert 84 &81 :: l? x1
[90] __primitive.pushr 89 &83 :: l x1
[91] __primitive.assert 90 81 :: l? x1
[92] jump tests.calc_loop 25 91 :: v x1
[93] return [88] -> 107
[94] __primitive.eq_str &21 95 :: y x3
[95] val "^" :: s x1
[96] __primitive.assert 100 &94 :: i? x3
[97] __primitive.ap &1 -> 98 99 :: l? x3
[98] __primitive.dep 97 :: i x1
[99] __primitive.dep 97 :: i x1
[100] algorithm.__caret___r0 &101 98 99 :: i x1
[101] val 1 :: i x3
[102] __primitive.seq 106 &96 :: v x1
[103] __primitive.assert 97 &94 :: l? x1
[104] __primitive.pushr 103 &96 :: l x1
[105] __primitive.assert 104 94 :: l? x1
[106] jump tests.calc_loop 25 105 :: v x1
[107] return [102] -> 119
[108] __primitive.eq_str &21 109 :: y x3
[109] val "fib" :: s x1
[110] __primitive.assert 112 &108 :: i? x3
[111] __primitive.sub &7 &101 :: i x1
[112] tests.fibl_r0 111 &113 101 :: i x1
[113] val 0 :: i x3
[114] __primitive.seq 118 &110 :: v x1
[115] __primitive.assert &6 &108 :: l? x1
[116] __primitive.pushr 115 &110 :: l x1
[117] __primitive.assert 116 108 :: l? x1
[118] jump tests.calc_loop 25 117 :: v x1
[119] return [114] -> 129
[120] __primitive.eq_str &21 121 :: y x3
[121] val "fact" :: s x1
[122] __primitive.assert 123 &120 :: i? x3
[123] tests.fact 7 :: i x1
[124] __primitive.seq 128 &122 :: v x1
[125] __primitive.assert 6 &120 :: l? x1
[126] __primitive.pushr 125 &122 :: l x1
[127] __primitive.assert 126 120 :: l? x1
[128] jump tests.calc_loop 25 127 :: v x1
[129] return [124] -> 139
[130] __primitive.eq_str &21 131 :: y x3
[131] val "len" :: s x1
[132] __primitive.assert 133 &130 :: i? x3
[133] list.length_r0 &113 &1 :: i x1
[134] __primitive.seq 138 &132 :: v x1
[135] __primitive.assert 1 &130 :: l? x5
[136] __primitive.pushr &135 &132 :: l x1
[137] __primitive.assert 136 130 :: l? x1
[138] jump tests.calc_loop 25 137 :: v x1
[139] return [134] -> 148
[140] __primitive.eq_str &21 141 :: y x2
[141] val "sum" :: s x1
[142] __primitive.assert 143 &140 :: i? x3
[143] algorithm.sum_r0 113 &135 :: i x1
[144] __primitive.seq 147 &142 :: v x1
[145] __primitive.quote &142 :: l x1
[146] __primitive.assert 145 140 :: l? x1
[147] jump tests.calc_loop 25 146 :: v x1
[148] return [144] -> 161
[149] __primitive.eq_str &21 150 :: y x4
[150] val "swap" :: s x1
[151] __primitive.assert 153 &149 :: a? x3
[152] __primitive.ap &135 -> 153 155 :: l? x3
[153] __primitive.dep 152 :: a x1
[154] __primitive.seq 160 &151 :: v x1
[155] __primitive.dep 152 :: a x1
[156] __primitive.assert 155 &149 :: a? x1
[157] __primitive.assert 152 &149 :: l? x1
[158] __primitive.pushr 157 156 &151 :: l x1
[159] __primitive.assert 158 149 :: l? x1
[160] jump tests.calc_loop 25 159 :: v x1
[161] return [154] -> 172
[162] __primitive.eq_str &21 163 :: y x3
[163] val "dup" :: s x1
[164] __primitive.assert 166 &162 :: a? x4
[165] __primitive.ap &135 -> 166 :: l? x2
[166] __primitive.dep 165 :: a x1
[167] __primitive.seq 171 &164 :: v x1
[168] __primitive.assert 165 &162 :: l? x1
[169] __primitive.pushr 168 &164 &164 :: l x1
[170] __primitive.assert 169 162 :: l? x1
[171] jump tests.calc_loop 25 170 :: v x1
[172] return [167] -> 183
[173] __primitive.eq_str 21 174 :: y x3
[174] val "drop" :: s x1
[175] __primitive.assert 177 &173 :: a? x3
[176] __primitive.ap 135 -> 177 X :: l? x2
[177] __primitive.dep 176 :: a x1
[178] __primitive.seq 182 &175 :: v x1
[179] __primitive.assert 176 &173 :: l? x1
[180] __primitive.pushr 179 &175 :: l x1
[181] __primitive.assert 180 173 :: l? x1
[182] jump tests.calc_loop 25 181 :: v x1
[183] return [178] -> 198
[184] __primitive.unless 25 22 :: y x1
[185] __primitive.unless 184 31 :: y x1
[186] __primitive.unless 185 44 :: y x1
[187] __primitive.unless 186 57 :: y x1
[188] __primitive.unless 187 70 :: y x1
[189] __primitive.unless 188 83 :: y x1
[190] __primitive.unless 189 96 :: y x1
[191] __primitive.unless 190 110 :: y x1
[192] __primitive.unless 191 122 :: y x1
[193] __primitive.unless 192 132 :: y x1
[194] __primitive.unless 193 142 :: y x1
[195] __primitive.unless 194 151 :: y x1
[196] __primitive.unless 195 164 :: y x1
[197] __primitive.unless 196 175 :: y x1
[198] return [197]

___ tests.calc_step (2 -> 1) x14 ___
[1] var :: ?s x1
[2] var :: ?l x14
[3] __primitive.strtrim 1 :: s x14
[4] __primitive.from_string &3 :: i? x1
[5] __primitive.pushr 2 4 :: l x1
[6] return [5] -> 15
[7] __primitive.eq_str &3 8 :: y x1
[8] val "+" :: s x1
[9] __primitive.assert 14 7 :: l? x1
[10] __primitive.ap &2 -> 11 12 :: l? x3
[11] __primitive.dep 10 :: i x1
[12] __primitive.dep 10 :: i x1
[13] __primitive.add 11 12 :: i x1
[14] __primitive.pushr 10 13 :: l x1
[15] return [9] -> 24
[16] __primitive.eq_str &3 17 :: y x1
[17] val "-" :: s x1
[18] __primitive.assert 23 16 :: l? x1
[19] __primitive.ap &2 -> 20 21 :: l? x3
[20] __primitive.dep 19 :: i x1
[21] __primitive.dep 19 :: i x1
[22] __primitive.sub 20 21 :: i x1
[23] __primitive.pushr 19 22 :: l x1
[24] return [18] -> 33
[25] __primitive.eq_str &3 26 :: y x1
[26] val "*" :: s x1
[27] __primitive.assert 32 25 :: l? x1
[28] __primitive.ap &2 -> 29 30 :: l? x3
[29] __primitive.dep 28 :: i x1
[30] __primitive.dep 28 :: i x1
[31] __primitive.mul 29 30 :: i x1
[32] __primitive.pushr 28 31 :: l x1
[33] return [27] -> 42
[34] __primitive.eq_str &3 35 :: y x1
[35] val "/" :: s x1
[36] __primitive.assert 41 34 :: l? x1
[37] __primitive.ap &2 -> 38 39 :: l? x3
[38] __primitive.dep 37 :: i x1
[39] __primitive.dep 37 :: i x1
[40] __primitive.div 38 39 :: i? x1
[41] __primitive.pushr 37 40 :: l x1
[42] return [36] -> 52
[43] __primitive.eq_str &3 44 :: y x1
[44] val "gcd" :: s x1
[45] __primitive.assert 51 43 :: l? x1
[46] __primitive.ap &2 -> 47 48 :: l? x3
[47] __primitive.dep 46 :: i x1
[48] __primitive.dep 46 :: i x1
[49] algorithm.gcd_r0 47 48 :: i x1
[50] __primitive.pushr 46 49 :: l x1
[51] jump tests.calc_step_q0 50 :: l x1
[52] return [45] -> 63
[53] __primitive.eq_str &3 54 :: y x1
[54] val "^" :: s x1
[55] __primitive.assert 62 53 :: l? x1
[56] __primitive.ap &2 -> 57 58 :: l? x3
[57] __primitive.dep 56 :: i x1
[58] __primitive.dep 56 :: i x1
[59] algorithm.__caret___r0 60 57 58 :: i x1
[60] val 1 :: i x3
[61] __primitive.pushr 56 59 :: l x1
[62] jump tests.calc_step_q0 61 :: l x1
[63] return [55] -> 74
[64] __primitive.eq_str &3 65 :: y x1
[65] val "fib" :: s x1
[66] __primitive.assert 73 64 :: l? x1
[67] __primitive.ap &2 -> 68 :: l? x2
[68] __primitive.dep 67 :: i x1
[69] __primitive.sub 68 &60 :: i x1
[70] tests.fibl_r0 69 71 60 :: i x1
[71] val 0 :: i x1
[72] __primitive.pushr 67 70 :: l x1
[73] jump tests.calc_step_q0 72 :: l x1
[74] return [66] -> 83
[75] __primitive.eq_str &3 76 :: y x1
[76] val "fact" :: s x1
[77] __primitive.assert 82 75 :: l? x1
[78] __primitive.ap &2 -> 79 :: l? x2
[79] __primitive.dep 78 :: i x1
[80] tests.fact 79 :: i x1
[81] __primitive.pushr 78 80 :: l x1
[82] jump tests.calc_step_q0 81 :: l x1
[83] return [77] -> 88
[84] __primitive.eq_str &3 85 :: y x1
[85] val "len" :: s x1
[86] __primitive.assert 87 84 :: l? x1
[87] jump tests.calc_step_q4 2 :: l x1
[88] return [86] -> 93
[89] __primitive.eq_str &3 90 :: y x1
[90] val "sum" :: s x1
[91] __primitive.assert 92 89 :: l? x1
[92] jump tests.calc_step_q5 2 :: l x1
[93] return [91] -> 101
[94] __primitive.eq_str &3 95 :: y x1
[95] val "swap" :: s x1
[96] __primitive.assert 100 94 :: l? x1
[97] __primitive.ap &2 -> 98 99 :: l? x3
[98] __primitive.dep 97 :: a x1
[99] __primitive.dep 97 :: a x1
[100] __primitive.pushr 97 99 98 :: l x1
[101] return [96] -> 108
[102] __primitive.eq_str &3 103 :: y x1
[103] val "dup" :: s x1
[104] __primitive.assert 107 102 :: l? x1
[105] __primitive.ap &2 -> 106 :: l? x2
[106] __primitive.dep 105 :: a x2
[107] __primitive.pushr 105 &106 106 :: l x1
[108] return [104] -> 115
[109] __primitive.eq_str 3 110 :: y x1
[110] val "drop" :: s x1
[111] __primitive.assert 114 109 :: l? x1
[112] __primitive.ap 2 -> 113 X :: l? x2
[113] __primitive.dep 112 :: a x1
[114] __primitive.pushr 112 113 :: l x1
[115] return [111]

___ tests.calc_step_q0 (1 -> 1) ___
[1] var :: ?l x1
[2] return [1]

___ tests.calc_step_q4 (1 -> 1) ___
[1] var :: ?a x2
[2] jump list.length_r0 3 &1 :: i x1
[3] val 0 :: i x1
[4] __primitive.pushr 1 2 :: l x1
[5] return [4]

___ tests.calc_step_q5 (1 -> 1) ___
[1] var :: ?a x1
[2] algorithm.sum_r0 3 1 :: i x1
[3] val 0 :: i x1
[4] __primitive.ap 2 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.calc_step_dummy (2 -> 1) ___
[1] var :: ?s x1
[2] var :: ?l x1
[3] __primitive.ap 2 -> 4 :: l? x2
[4] __primitive.dep 3 :: i x1
[5] __primitive.strtrim 1 :: s x1
[6] __primitive.from_string 5 :: i? x1
[7] __primitive.add 4 6 :: i x1
[8] __primitive.pushr 3 7 :: l x1
[9] return [8]

___ tests.calc_step_push (2 -> 1) x2 ___
[1] var :: ?s x1
[2] var :: ?l x2
[3] __primitive.strtrim 1 :: s x2
[4] __primitive.eq_str &3 5 :: y x1
[5] val "1" :: s x1
[6] __primitive.assert 7 4 1b :: l? x1
[7] __primitive.pushr 2 8 1b :: l x1
[8] val 1 :: i x1
[9] return [6] -> 18
[10] __primitive.eq_str 3 11 :: y x1
[11] val "+" :: s x1
[12] __primitive.assert 17 10 :: l? x1
[13] __primitive.ap 2 -> 14 15 :: l? x3
[14] __primitive.dep 13 :: i x1
[15] __primitive.dep 13 :: i x1
[16] __primitive.add 14 15 :: i x1
[17] __primitive.pushr 13 16 :: l x1
[18] return [12]

___ tests.calc_step_simple (2 -> 1) x2 ___
[1] var :: ?s x1
[2] var :: ?l x2
[3] __primitive.strtrim 1 :: s x2
[4] __primitive.from_string &3 :: i? x1
[5] __primitive.pushr 2 4 :: l x1
[6] return [5] -> 15
[7] __primitive.eq_str 3 8 :: y x1
[8] val "+" :: s x1
[9] __primitive.assert 14 7 :: l? x1
[10] __primitive.ap 2 -> 11 12 :: l? x3
[11] __primitive.dep 10 :: i x1
[12] __primitive.dep 10 :: i x1
[13] __primitive.add 11 12 :: i x1
[14] __primitive.pushr 10 13 :: l x1
[15] return [9]

___ tests.collatz (1 -> 1) ___
[1] var :: ?i x1
[2] val 0 :: i x1
[3] jump tests.collatz_r0 2 1 :: i x1
[4] return [3]

___ tests.collatz_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?i x2
[2] changing var :: ?i x2
[3] __primitive.gt &1 &4 :: y x2
[4] val 1 :: i x2
[5] __primitive.not &3 :: y x1
[6] __primitive.assert &2 5 :: i? x1
[7] return [6] -> 12
[8] __primitive.assert 11 3 :: i? x1
[9] __primitive.add 2 4 :: i x1
[10] tests.collatz_step 1 :: i x1
[11] jump tests.collatz_r0 9 10 :: i x1
[12] return [8]

___ tests.collatz_step (1 -> 1) x2 ___
[1] var :: ?i x3
[2] __primitive.bitand &1 &3 in [0, 1] :: i x2
[3] val 1 :: i x3
[4] __primitive.eq &2 5 :: y x1
[5] val 0 :: i x1
[6] __primitive.assert 7 4 :: i? x1
[7] __primitive.div &1 8 :: i? x1
[8] val 2 :: i x1
[9] return [6] -> 15
[10] __primitive.eq 2 &3 :: y x1
[11] __primitive.assert 14 10 :: i? x1
[12] __primitive.mul 1 13 :: i x1
[13] val 3 :: i x1
[14] __primitive.add 12 3 :: i x1
[15] return [11]

___ tests.compose_alt (1 -> 1) x2 ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: v? x1
[3] __primitive.dep 2 :: i x2
[4] __primitive.add 3 5 :: i x1
[5] val 1 :: i x1
[6] return [4] -> 7
[7] return [3]

___ tests.count (1 -> 1) x2 rec ___
[1] changing var >= 0 :: ?i x3
[2] __primitive.eq &1 &3 :: y x1
[3] val 0 :: i x3
[4] __primitive.assert &3 2 is 0 :: i? x1
[5] return [4] -> 12
[6] __primitive.gt &1 3 :: y x1
[7] __primitive.sub 1 &8 >= -1 :: i x1
[8] val 1 :: i x2
[9] tests.count 7 :: i x1
[10] __primitive.add 9 8 :: i x1
[11] __primitive.assert 10 6 :: i? x1
[12] return [11]

___ tests.dec (1 -> 1) x2 rec ___
[1] changing var :: ?i x4
[2] __primitive.lte &1 &3 :: y x1
[3] val 5 :: i x2
[4] __primitive.assert &1 2 :: i? x1
[5] return [4] -> 11
[6] __primitive.gt &1 3 :: y x1
[7] __primitive.sub 1 8 :: i x1
[8] val 1 :: i x1
[9] jump tests.dec 7 :: i x1
[10] __primitive.assert 9 6 :: i? x1
[11] return [10]

___ tests.decel (1 -> 1) ___
[1] var :: ?i x1
[2] val 0 :: i x1
[3] jump tests.decel_r0 2 1 :: i x1
[4] return [3]

___ tests.decel_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?i x2
[2] changing var :: ?i x2
[3] __primitive.gt &1 &4 :: y x2
[4] val 1 :: i x2
[5] __primitive.not &3 :: y x1
[6] __primitive.assert &2 5 :: i? x1
[7] return [6] -> 12
[8] __primitive.assert 11 3 :: i? x1
[9] __primitive.add 2 4 :: i x1
[10] tests.decel_step 1 :: i x1
[11] jump tests.decel_r0 9 10 :: i x1
[12] return [8]

___ tests.decel_step (1 -> 1) x2 ___
[1] var :: ?i x4
[2] __primitive.lte &1 &3 :: y x1
[3] val 5 :: i x3
[4] __primitive.assert 5 2 <= 4 :: i? x1
[5] __primitive.sub 1 6 <= 4 :: i x1
[6] val 1 :: i x1
[7] return [4] -> 11
[8] __primitive.gt &1 &3 :: y x1
[9] __primitive.assert 10 8 >= 1 :: i? x1
[10] __primitive.sub 1 3 >= 1 :: i x1
[11] return [9]

___ tests.default_max (2 -> 1) x2 ___
[1] var :: ?i x2
[2] var :: ?i x2
[3] __primitive.lt &2 &1 :: y x1
[4] __primitive.assert 1 3 :: i? x2
[5] return [4] -> 7
[6] __primitive.unless 2 4 :: i x1
[7] return [6]

___ tests.del (0 -> 1) x2 ___
[1] val 1 :: i x1
[2] return [1] -> 4
[3] val 2 :: i x1
[4] return [3]

___ tests.disj_bound (1 -> 1) x2 ___
[1] var in [1, 10] :: ?i x4
[2] __primitive.gte &1 3 :: y x1
[3] val 1 :: i x1
[4] __primitive.assert &1 2 in [1, 10] :: i? x2
[5] __primitive.lte &4 6 :: y x1
[6] val 5 :: i x1
[7] __primitive.assert 4 5 in [1, 5] :: i? x1
[8] return [7] -> 15
[9] __primitive.gte &1 10 :: y x1
[10] val 8 :: i x1
[11] __primitive.assert 1 9 in [8, 10] :: i? x2
[12] __primitive.lte &11 13 :: y x1
[13] val 10 :: i x1
[14] __primitive.assert 11 12 in [8, 10] :: i? x1
[15] return [14]

___ tests.drop_loop (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] jump tests.drop_loop_r0 2 1 :: a x1
[4] return [3]

___ tests.drop_loop_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?i x2
[2] var :: ?a x2
[3] __primitive.gt &1 4 :: y x2
[4] val 0 :: i x1
[5] __primitive.not &3 :: y x1
[6] __primitive.assert &2 5 :: a? x1
[7] return [6] -> 12
[8] __primitive.assert 11 3 :: a? x1
[9] __primitive.sub 1 10 :: i x1
[10] val 1 :: i x1
[11] jump tests.drop_loop_r0 2 9 :: a x1
[12] return [8]

___ tests.drop_loop1 (1 -> 1) ___
[1] var :: ?i x1
[2] jump tests.drop_loop1_r0 1 :: i x1
[3] return [2]

___ tests.drop_loop1_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] __primitive.gt &1 3 :: y x2
[3] val 0 :: i x1
[4] __primitive.not &2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 11
[7] __primitive.assert 10 2 :: i? x1
[8] __primitive.sub 1 9 :: i x1
[9] val 1 :: i x1
[10] jump tests.drop_loop1_r0 8 :: i x1
[11] return [7]

___ tests.drop_loop2 (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] jump tests.drop_loop2_r0 2 1 :: a x1
[4] return [3]

___ tests.drop_loop2_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] var :: ?a x2
[3] __primitive.gt &1 4 :: y x2
[4] val 0 :: i x1
[5] __primitive.not &3 :: y x1
[6] __primitive.assert 7 5 :: l? x1
[7] __primitive.quote 2 1 :: l x1
[8] return [6] -> 13
[9] __primitive.assert 12 3 :: a? x1
[10] __primitive.sub 1 11 :: i x1
[11] val 1 :: i x1
[12] jump tests.drop_loop2_r0 2 10 :: a x1
[13] return [9]

___ tests.drop_loop3 (3 -> 2) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] jump tests.drop_loop3_r0 3 2 1 -> 5 :: a x2
[5] __primitive.dep 4 :: a x1
[6] return [4 5]

___ tests.drop_loop3_r0 (3 -> 2) x2 rec ___
[1] changing var :: ?i x2
[2] var :: ?a x2
[3] var :: ?a x2
[4] __primitive.gt &1 5 :: y x3
[5] val 0 :: i x1
[6] __primitive.not &4 :: y x2
[7] __primitive.assert &2 &6 :: a? x1
[8] __primitive.assert &3 6 :: a? x1
[9] return [8 7] -> 16
[10] __primitive.assert 13 &4 :: a? x1
[11] __primitive.sub 1 12 :: i x1
[12] val 1 :: i x1
[13] jump tests.drop_loop3_r0 3 2 11 -> 15 :: a x2
[14] __primitive.assert 15 4 :: a? x1
[15] __primitive.dep 13 :: a x1
[16] return [10 14]

___ tests.drop_loop4 (4 -> 3) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] jump tests.drop_loop4_r0 4 3 2 1 -> 7 8 :: a x3
[7] __primitive.dep 5 :: a x1
[8] __primitive.dep 5 :: a x1
[9] return [8 7 5]

___ tests.drop_loop4_r0 (4 -> 3) x2 rec ___
[1] changing var :: ?i x2
[2] var :: ?a x2
[3] var :: ?a x2
[4] var :: ?a x2
[5] __primitive.gt &1 6 :: y x4
[6] val 0 :: i x1
[7] __primitive.not &5 :: y x3
[8] __primitive.assert &2 &7 :: a? x1
[9] __primitive.assert &3 &7 :: a? x1
[10] __primitive.assert &4 7 :: a? x1
[11] return [10 9 8] -> 21
[12] __primitive.assert 15 &5 :: a? x1
[13] __primitive.sub 1 14 :: i x1
[14] val 1 :: i x1
[15] jump tests.drop_loop4_r0 4 3 2 13 -> 18 20 :: a x3
[17] __primitive.assert 18 &5 :: a? x1
[18] __primitive.dep 15 :: a x1
[19] __primitive.assert 20 5 :: a? x1
[20] __primitive.dep 15 :: a x1
[21] return [12 17 19]

___ tests.drop_loop5 (1 -> 1) ___
[1] var :: ?i x1
[2] jump tests.drop_loop5_r0 1 :: i x1
[3] return [2]

___ tests.drop_loop5_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] __primitive.gt &1 3 :: y x2
[3] val 0 :: i x1
[4] __primitive.not &2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 11
[7] __primitive.assert 10 2 :: i? x1
[8] __primitive.sub 1 9 :: i x1
[9] val 1 :: i x1
[10] jump tests.drop_loop5_r0 8 :: i x1
[11] return [7]

___ tests.drop_loop6 (1 -> 1) ___
[1] var :: ?i x1
[2] val 7 :: i x1
[3] jump tests.drop_loop6_r0 1 2 :: i x1
[4] return [3]

___ tests.drop_loop6_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] var :: ?i x2
[3] __primitive.gt &1 4 :: y x2
[4] val 0 :: i x1
[5] __primitive.not &3 :: y x1
[6] __primitive.assert &1 5 :: i? x1
[7] return [6] -> 11
[8] __primitive.assert 10 3 :: i? x1
[9] __primitive.sub 1 &2 :: i x1
[10] jump tests.drop_loop6_r0 2 9 :: i x1
[11] return [8]

___ tests.dup_map (1 -> 1) ___
[1] var :: ?l x1
[2] jump tests.dup_map_r0 1 :: l x1
[3] return [2]

___ tests.dup_map_r0 (1 -> 1) rec ___
[1] changing var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x2
[4] jump tests.dup_map_r0 2 :: l x1
[5] __primitive.pushr 4 &3 3 :: l x1
[6] return [5]

___ tests.either_test (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?v x0
[3] __primitive.ap 1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [4]

___ tests.empty_assert (3 -> 1) ___
[1] var :: ?y x1
[2] var :: ?v x0
[3] var :: ?a x1
[4] __primitive.assert 3 1 :: a? x1
[5] return [4]

___ tests.ext_cos (1 -> 1) ___
[1] var :: ?d x1
[2] __primitive.external 1 3 :: d x1
[3] val "@math.h:cos" :: s x1
[4] return [2]

___ tests.f11 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: l x1
[4] __primitive.ap 2 3 :: l x1
[5] return [4]

___ tests.f12 (1 -> 1) x2 ___
[1] var :: ?a x2
[2] __primitive.seq 3 1 in [1, 4] :: i x1
[3] val 3 :: i x1
[4] return [2] -> 7
[5] val 4 :: i x1
[6] __primitive.seq 5 1 is 4 :: i x1
[7] return [6]

___ tests.f13 (2 -> 2) ___
[1] var :: ?a x2
[2] var :: ?l x1
[3] __primitive.seq 5 &1 :: i x1
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: i x1
[6] __primitive.add 3 7 :: i x1
[7] val 1 :: i x1
[8] __primitive.seq 4 1 :: l x1
[9] return [8 6]

___ tests.f2 (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 2 1 -> 5 6 :: l? x3
[5] __primitive.dep 4 :: i x1
[6] __primitive.dep 4 :: i x1
[7] __primitive.add 6 8 :: i x1
[8] val 1 :: i x1
[9] __primitive.ap 7 4 -> 10 :: v x1
[10] __primitive.dep 9 :: i x1
[11] __primitive.add 5 10 :: i x1
[12] return [11]

___ tests.f6 (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] return [2 1 3]

___ tests.f7c (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] jump tests.f7c_r0 1 2 :: i x1
[4] return [3]

___ tests.f7c_r0 (2 -> 1) x2 rec ___
[1] changing var :: ?i x2
[2] changing var :: ?i x2
[3] __primitive.gt &2 4 :: y x2
[4] val 0 :: i x1
[5] __primitive.not &3 :: y x1
[6] __primitive.assert &1 5 :: i? x1
[7] return [6] -> 13
[8] __primitive.assert 12 3 :: i? x1
[9] __primitive.sub 2 &10 :: i x1
[10] val 1 :: i x2
[11] __primitive.add 1 10 :: i x1
[12] jump tests.f7c_r0 9 11 :: i x1
[13] return [8]

___ tests.f8 (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?v x0
[3] var :: ?v x0
[4] __primitive.ap 1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] return [5]

___ tests.f9 (2 -> 1) x3 ___
[1] var :: ?a x2
[2] var :: ?a x2
[3] return [2] -> 4
[4] return [1] -> 8
[5] __primitive.unless 7 2 is 3 :: i x1
[6] __primitive.unless 5 1 is 3 :: i x1
[7] val 3 :: i x1
[8] return [6]

___ tests.fact (1 -> 1) x2 rec ___
[1] changing var >= 1 :: ?i x4
[2] __primitive.eq &1 &3 :: y x1
[3] val 1 :: i x4
[4] __primitive.assert &3 2 is 1 :: i? x1
[5] return [4] -> 11
[6] __primitive.gt &1 &3 :: y x1
[7] __primitive.assert 10 6 :: i? x1
[8] __primitive.sub &1 3 >= 0 :: i x1
[9] tests.fact 8 :: i x1
[10] __primitive.mul 1 9 :: i x1
[11] return [7]

___ tests.failthru (3 -> 2) x2 ___
[1] var :: ?l x1
[2] var :: ?a x3
[3] var :: ?a x2
[4] __primitive.ap &3 &2 1 -> 6 5 :: v? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.dep 4 :: a x1
[7] return [6 5] -> 9
[8] __primitive.unless 3 &2 :: a x1
[9] return [8 2]

___ tests.fib (1 -> 1) x2 rec ___
[1] changing var :: ?i x4
[2] __primitive.lte &1 &3 :: y x1
[3] val 1 :: i x4
[4] __primitive.assert &1 2 :: i? x1
[5] return [4] -> 13
[6] __primitive.gt &1 &3 :: y x1
[7] __primitive.sub 1 &3 :: i x2
[8] __primitive.sub &7 3 :: i x1
[9] tests.fib 8 :: i x1
[10] tests.fib 7 :: i x1
[11] __primitive.add 9 10 :: i x1
[12] __primitive.assert 11 6 :: i? x1
[13] return [12]

___ tests.fibl (1 -> 1) ___
[1] var :: ?i x1
[2] __primitive.sub 1 &3 :: i x1
[3] val 1 :: i x2
[4] val 0 :: i x1
[5] jump tests.fibl_r0 2 4 3 :: i x1
[6] return [5]

___ tests.fibl_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] changing var :: ?i x1
[3] changing var :: ?i x2
[4] __primitive.gt &3 5 :: y x2
[5] val 0 :: i x1
[6] __primitive.not &4 :: y x1
[7] __primitive.assert &1 6 :: i? x1
[8] return [7] -> 14
[9] __primitive.assert 13 4 :: i? x1
[10] __primitive.sub 3 11 :: i x1
[11] val 1 :: i x1
[12] __primitive.add 2 &1 :: i x1
[13] jump tests.fibl_r0 10 1 12 :: i x1
[14] return [9]

___ tests.fuse_map (1 -> 1) ___
[1] var :: ?l x1
[2] jump tests.fuse_map_r0 1 :: l x1
[3] return [2]

___ tests.fuse_map_r0 (1 -> 1) rec ___
[1] changing var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x1
[4] __primitive.add 3 5 :: i x1
[5] val 1 :: i x1
[6] __primitive.mul 4 7 :: i x1
[7] val 2 :: i x1
[8] jump tests.fuse_map_r0 2 :: l x1
[9] __primitive.pushr 8 6 :: l x1
[10] return [9]

___ tests.fuse_map2 (1 -> 1) ___
[1] var :: ?l x1
[2] jump tests.fuse_map2_r0 1 :: l x1
[3] return [2]

___ tests.fuse_map2_r0 (1 -> 1) rec ___
[1] changing var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x1
[4] __primitive.add 3 5 :: i x1
[5] val 1 :: i x1
[6] __primitive.mul 4 7 :: i x1
[7] val 2 :: i x1
[8] jump tests.fuse_map2_r0 2 :: l x1
[9] __primitive.pushr 8 6 :: l x1
[10] return [9]

___ tests.fuse_map3 (1 -> 2) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 :: l? x2
[3] __primitive.ap 2 -> 7 :: v? x1
[4] __primitive.dep 2 :: i x1
[5] __primitive.add 4 &6 :: i x1
[6] val 1 :: i x2
[7] __primitive.dep 3 :: i x1
[8] __primitive.add 7 6 :: i x1
[9] return [8 5]

___ tests.fuse_map4 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> X :: l? x1
[3] jump tests.fuse_map4_r0 2 :: l x1
[4] return [3]

___ tests.fuse_map4_r0 (1 -> 1) rec ___
[1] changing var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x1
[4] __primitive.add 3 5 :: i x1
[5] val 1 :: i x1
[6] jump tests.fuse_map4_r0 2 :: l x1
[7] __primitive.pushr 6 4 :: l x1
[8] return [7]

___ tests.fuse_map4b (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> X :: l? x1
[3] jump tests.fuse_map4b_r0 2 :: l x1
[4] return [3]

___ tests.fuse_map4b_r0 (1 -> 1) rec ___
[1] changing var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x1
[4] __primitive.add 3 5 :: i x1
[5] val 1 :: i x1
[6] jump tests.fuse_map4b_r0 2 :: l x1
[7] __primitive.pushr 6 4 :: l x1
[8] return [7]

___ tests.hello (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.open 1 &3 -> 4 :: y x2
[3] val "stream,out:std" :: s x2
[4] __primitive.dep 2 is File :: o x1
[5] __primitive.write 2 4 6 -> 7 :: y x2
[6] val "What's your name? " :: s x1
[7] __primitive.dep 5 is File :: o x1
[8] __primitive.close 5 7 :: y x1
[9] __primitive.open 8 10 -> 11 :: y x2
[10] val "stream,in:std" :: s x1
[11] __primitive.dep 9 is File :: o x1
[12] io.getline_loop 9 11 14 -> 15 19 :: y x3
[14] val "" :: s x1
[15] __primitive.dep 12 is File :: o x1
[16] __primitive.close 12 15 :: y x1
[17] __primitive.open 16 3 -> 18 :: y x2
[18] __primitive.dep 17 is File :: o x1
[19] __primitive.dep 12 :: s x1
[20] __primitive.strcat 21 19 :: s x1
[21] val "Hello " :: s x1
[22] __primitive.strcat 20 23 :: s x1
[23] val "!\n" :: s x1
[24] __primitive.write 17 18 22 -> 25 :: y x2
[25] __primitive.dep 24 is File :: o x1
[26] __primitive.close 24 25 :: y x1
[27] return [26]

___ tests.id_map (1 -> 1) ___
[1] var :: ?l x1
[2] return [1]

___ tests.id_map2 (1 -> 1) rec ___
[1] changing var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: a x1
[4] jump tests.id_map2 2 :: l x1
[5] __primitive.pushr 4 3 :: l x1
[6] return [5]

___ tests.id_quote_compose (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: a x1
[4] __primitive.pushr 2 3 :: l x1
[5] return [4]

___ tests.imbalanced_assert (2 -> 2) ___
[1] var :: ?y x2
[2] var :: ?y x2
[3] __primitive.assert 4 &2 in [1, 3] :: i? x1
[4] __primitive.assert 5 &1 in [1, 3] :: i? x1
[5] val 3 :: i x1
[6] val 2 :: i x1
[7] __primitive.assert 6 1 is 2 :: i? x1
[8] __primitive.assert 7 2 is 2 :: i? x1
[9] return [8 3]

___ tests.inl_loop (1 -> 1) ___
[1] var :: ?i x1
[2] jump tests.inl_loop_r0 1 :: i x1
[3] return [2]

___ tests.inl_loop_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] __primitive.lt &1 3 :: y x2
[3] val 10 :: i x1
[4] __primitive.not &2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 11
[7] __primitive.assert 10 2 :: i? x1
[8] __primitive.add 1 9 :: i x1
[9] val 3 :: i x1
[10] jump tests.inl_loop_r0 8 :: i x1
[11] return [7]

___ tests.inl_loop2 (3 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] var :: ?i x1
[4] jump tests.inl_loop2_r0 1 2 3 :: i x1
[5] return [4]

___ tests.inl_loop2_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] var :: ?i x2
[3] var :: ?i x2
[4] __primitive.lt &1 &3 :: y x2
[5] __primitive.not &4 :: y x1
[6] __primitive.assert &1 5 :: i? x1
[7] return [6] -> 11
[8] __primitive.assert 10 4 :: i? x1
[9] __primitive.add 1 &2 :: i x1
[10] jump tests.inl_loop2_r0 3 2 9 :: i x1
[11] return [8]

___ tests.inl_loop3 (1 -> 1) ___
[1] var :: ?i x1
[2] tests.inl_loop3_r0 1 :: i x1
[3] __primitive.mul 2 4 :: i x1
[4] val 8 :: i x1
[5] return [3]

___ tests.inl_loop3_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] __primitive.lt &1 3 :: y x2
[3] val 10 :: i x1
[4] __primitive.not &2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 11
[7] __primitive.assert 10 2 :: i? x1
[8] __primitive.add 1 9 :: i x1
[9] val 3 :: i x1
[10] jump tests.inl_loop3_r0 8 :: i x1
[11] return [7]

___ tests.inl_loop4 (1 -> 1) ___
[1] var :: ?i x1
[2] __primitive.add 1 3 :: i x1
[3] val 4 :: i x1
[4] tests.inl_loop4_r0 2 :: i x1
[5] __primitive.mul 4 6 :: i x1
[6] val 2 :: i x1
[7] return [5]

___ tests.inl_loop4_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] __primitive.lt &1 3 :: y x2
[3] val 10 :: i x1
[4] __primitive.not &2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 11
[7] __primitive.assert 10 2 :: i? x1
[8] __primitive.add 1 9 :: i x1
[9] val 3 :: i x1
[10] jump tests.inl_loop4_r0 8 :: i x1
[11] return [7]

___ tests.input_times (3 -> 1) ___
[1] var :: ?i x1
[2] var :: ?l x1
[3] var :: ?y x1
[4] jump tests.input_times_r0 1 3 2 :: a x1
[5] return [4]

___ tests.input_times_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?l x2
[2] changing var :: ?y x2
[3] changing var :: ?i x2
[4] __primitive.gt &3 5 :: y x2
[5] val 0 :: i x1
[6] __primitive.not &4 :: y x1
[7] __primitive.assert 8 6 :: l? x1
[8] __primitive.quote 2 1 :: l x1
[9] return [7] -> 24
[10] __primitive.assert 23 4 :: a? x1
[11] __primitive.open 2 12 -> 13 :: y x2
[12] val "stream,in:std" :: s x1
[13] __primitive.dep 11 is File :: o x1
[14] __primitive.sub 3 15 :: i x1
[15] val 1 :: i x1
[16] io.getline_loop 11 13 18 -> 19 21 :: y x3
[18] val "" :: s x1
[19] __primitive.dep 16 is File :: o x1
[20] __primitive.close 16 19 :: y x1
[21] __primitive.dep 16 :: s x1
[22] __primitive.ap 21 1 :: l x1
[23] jump tests.input_times_r0 14 20 22 :: a x1
[24] return [10]

___ tests.it10 (1 -> 1) ___
[1] var :: ?i x1
[2] jump tests.it10_r0 1 :: i x1
[3] return [2]

___ tests.it10_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?i x3
[2] __primitive.lt &1 3 :: y x2
[3] val 10 :: i x1
[4] __primitive.not &2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 11
[7] __primitive.assert 10 2 :: i? x1
[8] __primitive.add 1 9 :: i x1
[9] val 1 :: i x1
[10] jump tests.it10_r0 8 :: i x1
[11] return [7]

___ tests.it10b (1 -> 1) ___
[1] var :: ?l x1
[2] jump tests.it10b_r0 1 :: i x1
[3] return [2]

___ tests.it10b_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x3
[4] __primitive.lt &3 5 :: y x2
[5] val 10 :: i x1
[6] __primitive.not &4 :: y x1
[7] __primitive.assert &3 6 :: i? x1
[8] return [7] -> 14
[9] __primitive.assert 13 4 :: i? x1
[10] __primitive.add 3 11 :: i x1
[11] val 1 :: i x1
[12] __primitive.pushr 2 10 :: l x1
[13] jump tests.it10b_r0 12 :: i x1
[14] return [9]

___ tests.ldmult (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?i x1
[3] list.listdup_r0 2 1 4 :: l x1
[4] [] :: l x1
[5] jump algorithm.sum_r0 6 3 :: i x1
[6] val 0 :: i x1
[7] return [5]

___ tests.leak (1 -> 1) ___
[1] var :: ?i x1
[2] val 0 :: i x1
[3] jump tests.leak_r0 2 1 :: i x1
[4] return [3]

___ tests.leak_r0 (2 -> 1) x2 rec ___
[1] var :: ?i x2
[2] changing var :: ?i x2
[3] __primitive.gt &1 4 :: y x2
[4] val 1 :: i x1
[5] __primitive.not &3 :: y x1
[6] __primitive.assert &2 5 :: i? x1
[7] return [6] -> 12
[8] __primitive.assert 11 3 :: i? x1
[9] __primitive.add 2 10 :: i x1
[10] val 3 :: i x1
[11] jump tests.leak_r0 9 1 :: i x1
[12] return [8]

___ tests.map_add1 (1 -> 1) ___
[1] var :: ?l x1
[2] jump tests.map_add1_r0 1 :: l x1
[3] return [2]

___ tests.map_add1_r0 (1 -> 1) rec ___
[1] changing var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x1
[4] __primitive.add 3 5 :: i x1
[5] val 1 :: i x1
[6] jump tests.map_add1_r0 2 :: l x1
[7] __primitive.pushr 6 4 :: l x1
[8] return [7]

___ tests.mov_ap (3 -> 3) ___
[1] var :: ?l x2
[2] var :: ?l x1
[3] var :: ?l x1
[4] __primitive.ap 3 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 5 &1 :: l x1
[7] __primitive.compose 6 2 :: l x1
[8] return [4 7 1]

___ tests.mul_lt50 (2 -> 1) ___
[1] var in [1, 10] :: ?i x2
[2] var in [1, 10] :: ?i x2
[3] __primitive.gte &1 &4 :: y x1
[4] val 1 :: i x2
[5] __primitive.assert 1 3 in [1, 10] :: i? x2
[6] __primitive.lte &5 &7 :: y x1
[7] val 10 :: i x2
[8] __primitive.assert 5 6 in [1, 10] :: i? x1
[9] __primitive.gte &2 4 :: y x1
[10] __primitive.assert 2 9 in [1, 10] :: i? x2
[11] __primitive.lte &10 7 :: y x1
[12] __primitive.assert 10 11 in [1, 10] :: i? x1
[13] __primitive.mul 8 12 in [1, 100] :: i x2
[14] __primitive.lt &13 15 :: y x1
[15] val 50 :: i x1
[16] __primitive.assert 13 14 in [1, 100] :: i? x1
[17] return [16]

___ tests.not_one_to_ten (1 -> 1) x2 ___
[1] var :: ?i x4
[2] __primitive.lt &1 3 :: y x1
[3] val 1 :: i x1
[4] __primitive.assert &1 2 :: i? x1
[5] return [4] -> 9
[6] __primitive.gt &1 7 :: y x1
[7] val 10 :: i x1
[8] __primitive.assert 1 6 >= 11 :: i? x1
[9] return [8]

___ tests.old_map (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] [] :: l x1
[4] jump tests.old_map_r0 2 3 1 :: l x1
[5] return [4]

___ tests.old_map_r0 (3 -> 1) x2 rec ___
[1] var :: ?l x2
[2] changing var :: ?l x2
[3] changing var :: ?l x1
[4] __primitive.ap 3 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x3
[6] __primitive.seq 9 &5 :: v x1
[7] __primitive.ap 5 &1 :: l x1
[8] __primitive.compose 7 2 :: l x1
[9] jump tests.old_map_r0 4 8 1 :: v x1
[10] return [6] -> 12
[11] __primitive.unless 2 5 :: l x1
[12] return [11]

___ tests.one_to_ten (1 -> 1) ___
[1] var in [1, 10] :: ?i x2
[2] __primitive.gte &1 3 :: y x1
[3] val 1 :: i x1
[4] __primitive.assert 1 2 in [1, 10] :: i? x2
[5] __primitive.lte &4 6 :: y x1
[6] val 10 :: i x1
[7] __primitive.assert 4 5 in [1, 10] :: i? x1
[8] return [7]

___ tests.one_to_ten2 (1 -> 1) x2 ___
[1] var in [1, 10] :: ?i x3
[2] __primitive.gte &1 3 :: y x2
[3] val 1 :: i x1
[4] __primitive.assert &1 &2 in [1, 10] :: i? x2
[5] __primitive.lte &4 6 :: y x2
[6] val 10 :: i x1
[7] __primitive.assert 4 &5 in [1, 4] :: i? x2
[8] __primitive.lt &7 &9 :: y x1
[9] val 5 :: i x2
[10] __primitive.assert 7 8 in [1, 4] :: i? x1
[11] return [10] -> 16
[12] __primitive.assert 1 2 in [5, 10] :: i? x1
[13] __primitive.assert 12 5 in [5, 10] :: i? x2
[14] __primitive.gte &13 9 :: y x1
[15] __primitive.assert 13 14 in [5, 10] :: i? x1
[16] return [15]

___ tests.oseq (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] __primitive.seq 2 1 :: a x1
[4] return [3]

___ tests.ow_assert (1 -> 1) ___
[1] var :: ?a x1
[2] __primitive.unless 3 1 is True :: y x1
[3] val True :: y x1
[4] return [2]

___ tests.ow_assert2 (2 -> 1) ___
[1] var :: ?a x1
[2] var is True :: ?y x1
[3] __primitive.unless 2 1 :: y x1
[4] return [3]

___ tests.ow_assert3 (2 -> 1) ___
[1] var :: ?a x1
[2] var is True :: ?y x1
[3] __primitive.unless 2 1 is True :: y x1
[4] return [3]

___ tests.ow_not (1 -> 1) ___
[1] var :: ?a x1
[2] __primitive.unless 3 1 :: y x1
[3] val True :: y x1
[4] return [2]

___ tests.pct (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?d x1
[3] __primitive.to_float 1 :: d x1
[4] __primitive.div_float 3 5 :: d? x1
[5] val 100 :: d x1
[6] __primitive.add_float 4 7 :: d x1
[7] val 1 :: d x1
[8] __primitive.mul_float 2 6 :: d x1
[9] return [8]

___ tests.pop_min_test (2 -> 1) x2 ___
[1] var :: ?y x2
[2] var :: ?a x2
[3] __primitive.assert &2 &1 :: a? x1
[4] return [3] -> 7
[5] __primitive.not 1 :: y x1
[6] __primitive.assert 2 5 :: a? x1
[7] return [6]

___ tests.popr_quote_compose (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: l x1
[4] __primitive.ap 3 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.pushr 2 4 5 :: l x1
[7] return [6]

___ tests.push_input (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?y x1
[3] __primitive.open 2 4 -> 5 :: y x2
[4] val "stream,in:std" :: s x1
[5] __primitive.dep 3 is File :: o x1
[6] io.getline_loop 3 5 8 -> 9 11 :: y x3
[8] val "" :: s x1
[9] __primitive.dep 6 is File :: o x1
[10] __primitive.close 6 9 :: y x1
[11] __primitive.dep 6 :: s x1
[12] __primitive.ap 11 1 :: l x1
[13] return [10 12]

___ tests.pushl2 (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 2 1 :: l x1
[5] return [4]

___ tests.pushl_assert (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?y x1
[3] __primitive.assert 4 2 :: l? x1
[4] __primitive.quote 1 :: l x1
[5] return [3]

___ tests.pushl_swap_assert (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?y x1
[4] __primitive.assert 5 3 :: l? x1
[5] __primitive.ap 2 1 :: l x1
[6] return [4]

___ tests.qdec (1 -> 1) x2 rec ___
[1] changing var :: ?l x2
[2] __primitive.ap &1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x3
[4] __primitive.lte &3 &5 :: y x1
[5] val 5 :: i x2
[6] __primitive.assert 1 4 :: l? x1
[7] return [6] -> 14
[8] __primitive.gt &3 5 :: y x1
[9] __primitive.assert 13 8 :: l? x1
[10] __primitive.sub 3 11 :: i x1
[11] val 1 :: i x1
[12] __primitive.pushr 2 10 :: l x1
[13] jump tests.qdec 12 :: l x1
[14] return [9]

___ tests.quote_str (1 -> 1) ___
[1] var :: ?s x1
[2] __primitive.strcat &3 1 :: s x1
[3] val "'" :: s x2
[4] __primitive.strcat 2 3 :: s x1
[5] return [4]

___ tests.range_add10 (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] __primitive.add 2 1 :: i x2
[4] __primitive.gte &3 5 :: y x1
[5] val 1 :: i x1
[6] __primitive.assert 3 4 <= 10 :: i? x2
[7] __primitive.lte &6 8 :: y x1
[8] val 10 :: i x1
[9] __primitive.assert 6 7 <= 10 :: i? x1
[10] return [9]

___ tests.repeat_int (1 -> 1) rec ___
[1] var :: ?i x2
[2] jump tests.repeat_int &1 :: l x1
[3] __primitive.pushr 2 1 :: l x1
[4] return [3]

___ tests.reverse_reverse (1 -> 1) ___
[1] var :: ?l x1
[2] list.reverse_r0 &3 1 :: l x1
[3] [] :: l x2
[4] jump list.reverse_r0 3 2 :: l x1
[5] return [4]

___ tests.rpr (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] list.reverse_r0 &4 1 :: l x1
[4] [] :: l x2
[5] __primitive.ap 2 3 :: l x1
[6] jump list.reverse_r0 4 5 :: l x1
[7] return [6]

___ tests.spaces (1 -> 1) x2 ___
[1] var :: ?s x1
[2] tests.spaces_r0 1 :: s x1
[3] __primitive.eq_str 2 4 :: y x2
[4] val "" :: s x1
[5] __primitive.assert 6 &3 is True :: y? x1
[6] val True :: y x1
[7] return [5] -> 12
[8] val Something :: y x1
[9] __primitive.assert 8 3 is True :: y? x1
[10] __primitive.unless 11 9 is False :: y x1
[11] val False :: y x1
[12] return [10]

___ tests.spaces_r0 (1 -> 1) x2 rec ___
[1] changing var :: ?s x3
[2] __primitive.eq_str &1 &3 :: y x1
[3] val "" :: s x2
[4] __primitive.not 2 :: y x2
[5] __primitive.not &4 :: y x1
[6] __primitive.assert &1 5 :: s? x1
[7] return [6] -> 15
[8] __primitive.assert 14 4 :: s? x1
[9] __primitive.strsplit 1 10 -> 13 :: s? x2
[10] val " " :: s x1
[11] __primitive.eq_str 9 3 :: y x1
[12] __primitive.assert 13 11 :: s? x1
[13] __primitive.dep 9 :: s x1
[14] jump tests.spaces_r0 12 :: s x1
[15] return [8]

___ tests.spilling (1 -> 2) ___
[1] var :: ?y x1
[2] __primitive.not 1 :: y x2
[3] __primitive.not &2 :: y x1
[4] __primitive.quote 3 :: l x1
[5] return [2 4]

___ tests.spilling2 (1 -> 2) ___
[1] var :: ?y x1
[2] __primitive.not 1 :: y x2
[3] __primitive.quote &2 :: l x1
[4] __primitive.not 2 :: y x1
[5] __primitive.quote 4 :: l x1
[6] return [5 3]

___ tests.spilling3 (1 -> 3) ___
[1] var :: ?y x1
[2] __primitive.not 1 :: y x1
[3] __primitive.not 2 :: y x3
[4] __primitive.quote &3 :: l x1
[5] __primitive.quote &3 :: l x1
[6] __primitive.quote 3 :: l x1
[7] return [6 5 4]

___ tests.stream (1 -> 2) rec ___
[1] var :: ?a x2
[2] jump tests.stream_q0 &1 :: l x1
[3] return [2 1]

___ tests.stream_q0 (1 -> 1) mut ___
[1] var :: ?a x1
[2] tests.stream 1 -> 3 :: v x2
[3] __primitive.dep 2 :: a x1
[4] __primitive.ap 2 3 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.stream_combine (2 -> 1) rec ___
[1] changing var :: ?l x1
[2] changing var :: ?l x1
[3] __primitive.ap 2 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x1
[5] __primitive.ap 1 -> X :: l? x1
[6] jump tests.stream_combine 3 5 :: v x1
[7] __primitive.pushr 6 4 :: l x1
[8] return [7]

___ tests.sum3 (3 -> 1) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.quote 3 2 1 :: l x1
[5] jump algorithm.sum_r0 6 4 :: i x1
[6] val 0 :: i x1
[7] return [5]

___ tests.sum_diff_map (1 -> 1) ___
[1] var :: ?l x1
[2] jump tests.sum_diff_map_r0 1 :: l x1
[3] return [2]

___ tests.sum_diff_map_r0 (1 -> 1) rec ___
[1] changing var :: ?l x1
[2] __primitive.ap 1 -> 5 :: l? x2
[3] tests.sum_diff_map_r0 2 :: l x1
[4] __primitive.pushr 3 11 :: l x1
[5] __primitive.dep 2 :: l x1
[6] __primitive.ap 5 -> 7 8 :: v? x2
[7] __primitive.dep 6 :: i x2
[8] __primitive.dep 6 :: i x2
[9] __primitive.sub &7 &8 :: i x1
[10] __primitive.add 7 8 :: i x1
[11] __primitive.quote 10 9 :: l x1
[12] return [4]

___ tests.sum_times2 (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?y x1
[3] val 0 :: i x1
[4] jump tests.sum_times2_r0 1 2 3 :: i x1
[5] return [4]

___ tests.sum_times2_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?i x2
[2] changing var :: ?y x1
[3] changing var :: ?i x2
[4] __primitive.gt &3 5 :: y x2
[5] val 0 :: i x1
[6] __primitive.not &4 :: y x1
[7] __primitive.assert &1 6 :: i? x1
[8] return [7] -> 24
[9] __primitive.assert 23 4 :: i? x1
[10] __primitive.open 2 11 -> 12 :: y x2
[11] val "stream,in:std" :: s x1
[12] __primitive.dep 10 is File :: o x1
[13] __primitive.sub 3 14 :: i x1
[14] val 1 :: i x1
[15] io.getline_loop 10 12 17 -> 18 20 :: y x3
[17] val "" :: s x1
[18] __primitive.dep 15 is File :: o x1
[19] __primitive.close 15 18 :: y x1
[20] __primitive.dep 15 :: s x1
[21] __primitive.from_string 20 :: i? x1
[22] __primitive.add 21 1 :: i x1
[23] jump tests.sum_times2_r0 13 19 22 :: i x1
[24] return [9]

___ tests.sum_times2v (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?y x1
[3] val 0 :: i x1
[4] jump tests.sum_times2v_r0 1 2 3 :: i x1
[5] return [4]

___ tests.sum_times2v_r0 (3 -> 1) x2 rec ___
[1] changing var :: ?i x2
[2] changing var :: ?y x1
[3] changing var :: ?i x2
[4] __primitive.gt &3 5 :: y x2
[5] val 0 :: i x1
[6] __primitive.not &4 :: y x1
[7] __primitive.assert &1 6 :: i? x1
[8] return [7] -> 33
[9] __primitive.assert 32 4 :: i? x1
[10] __primitive.open 2 11 -> 12 :: y x2
[11] val "stream,in:std" :: s x1
[12] __primitive.dep 10 is File :: o x1
[13] __primitive.sub 3 14 :: i x1
[14] val 1 :: i x1
[15] io.getline_loop 10 12 17 -> 18 23 :: y x3
[17] val "" :: s x1
[18] __primitive.dep 15 is File :: o x1
[19] __primitive.close 15 18 :: y x1
[20] __primitive.open 19 21 -> 22 :: y x2
[21] val "stream,out:std" :: s x1
[22] __primitive.dep 20 is File :: o x1
[23] __primitive.dep 15 :: s x2
[24] __primitive.strcat &25 &23 :: s x1
[25] val "'" :: s x2
[26] __primitive.strcat 24 25 :: s x1
[27] __primitive.write 20 22 26 -> 28 :: y x2
[28] __primitive.dep 27 is File :: o x1
[29] __primitive.close 27 28 :: y x1
[30] __primitive.from_string 23 :: i? x1
[31] __primitive.add 30 1 :: i x1
[32] jump tests.sum_times2v_r0 13 29 31 :: i x1
[33] return [9]

___ tests.test_ap11 (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] __primitive.ap 2 1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [4]

___ tests.test_ap12 (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] __primitive.ap 2 1 -> 5 4 :: v? x2
[4] __primitive.dep 3 :: a x1
[5] __primitive.dep 3 :: a x1
[6] return [5 4]

___ tests.test_ap21 (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 2 1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] return [5]

___ tests.three_reads (4 -> 4) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] var :: ?i x1
[4] var is Array :: ?o x1
[5] __primitive.read_array 4 3 -> 10 is Array :: o x2
[6] __primitive.read_array 5 2 -> 9 is Array :: o x2
[7] __primitive.read_array 6 1 -> 8 is Array :: o x2
[8] __primitive.dep 7 :: i x1
[9] __primitive.dep 6 :: i x1
[10] __primitive.dep 5 :: i x1
[11] return [7 10 9 8]

___ tests.three_writes (7 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] var :: ?i x1
[4] var :: ?i x1
[5] var :: ?i x1
[6] var :: ?i x1
[7] var is Array :: ?o x1
[8] __primitive.write_array 7 6 5 is Array :: o x1
[9] __primitive.write_array 8 4 3 is Array :: o x1
[10] __primitive.write_array 9 2 1 is Array :: o x1
[11] return [10]

___ tests.two_to_twenty (1 -> 1) ___
[1] var in [2, 20] :: ?i x1
[2] __primitive.div 1 3 in [1, 10] :: i? x2
[3] val 2 :: i x1
[4] __primitive.gte &2 5 :: y x1
[5] val 1 :: i x1
[6] __primitive.assert 2 4 in [1, 10] :: i? x2
[7] __primitive.lte &6 8 :: y x1
[8] val 10 :: i x1
[9] __primitive.assert 6 7 in [1, 10] :: i? x1
[10] return [9]

___ tests.vifte_collatz (1 -> 1) x2 rec ___
[1] changing var :: ?i x2
[2] tests.vifte_collatz_step 1 >= 2 :: i x3
[3] __primitive.seq 4 &2 :: v x1
[4] jump tests.vifte_collatz 2 :: v x1
[5] return [3] -> 7
[6] __primitive.unless 1 2 :: i x1
[7] return [6]

___ tests.vifte_collatz_step (1 -> 1) x2 ___
[1] var >= 1 :: ?i x3
[2] __primitive.bitand &1 &3 in [0, 1] :: i x2
[3] val 1 :: i x5
[4] __primitive.eq &2 &3 :: y x1
[5] __primitive.assert 8 4 >= 4 :: i? x2
[6] __primitive.mul &1 7 >= 3 :: i x1
[7] val 3 :: i x1
[8] __primitive.add 6 &3 >= 4 :: i x1
[9] __primitive.gt &5 &3 :: y x1
[10] __primitive.assert 5 9 >= 4 :: i? x1
[11] return [10] -> 19
[12] __primitive.eq 2 13 :: y x1
[13] val 0 :: i x1
[14] __primitive.assert 15 12 >= 2 :: i? x2
[15] __primitive.div 1 16 >= 2 :: i? x1
[16] val 2 :: i x1
[17] __primitive.gt &14 3 :: y x1
[18] __primitive.assert 14 17 >= 2 :: i? x1
[19] return [18]

___ tests.vifte_quote (1 -> 1) x2 ___
[1] var :: ?i x3
[2] __primitive.seq 3 &1 :: i x1
[3] __primitive.add 1 4 :: i x1
[4] val 1 :: i x1
[5] return [2] -> 8
[6] __primitive.unless 7 1 is 0 :: i x1
[7] val 0 :: i x1
[8] return [6]

___ tests.zip_add (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] jump tests.zip_add_r0 1 2 :: l x1
[4] return [3]

___ tests.zip_add_r0 (2 -> 1) rec ___
[1] changing var :: ?l x1
[2] changing var :: ?l x1
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: i x1
[5] __primitive.ap 2 -> 6 :: l? x2
[6] __primitive.dep 5 :: i x1
[7] __primitive.add 4 6 :: i x1
[8] jump tests.zip_add_r0 5 3 :: l x1
[9] __primitive.pushr 8 7 :: l x1
[10] return [9]

