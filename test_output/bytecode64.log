___ algorithm.__caret__ (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] val 1 :: i x1
[4] algorithm.__caret___r0 3 2 1 :: i x1
[5] return [4]

___ algorithm.__caret___r0 (3 -> 1) x2 rec ___
[1] var :: ?*i x4
[2] var :: ?*i x3
[3] var :: ?*i x2
[4] __primitive.neq &1 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert &3 6 :: i? x1
[8] return [7] -> 16
[9] __primitive.neq &1 5 :: y x1
[10] __primitive.assert 15 9 :: i? x1
[11] __primitive.shiftr &1 12 :: i x1
[12] val 1 :: i x1
[13] algorithm.acc_odd_power 3 &2 1 :: i x1
[14] __primitive.mul &2 2 :: i x1
[15] algorithm.__caret___r0 13 14 11 :: i x1
[16] return [10]

___ algorithm.acc_odd_power (3 -> 1) x2 ___
[1] var :: ?i x2
[2] var :: ?i x1
[3] var :: ?i x2
[4] __primitive.bitand &1 &5 :: i x1
[5] val 1 :: i x4
[6] __primitive.eq 4 &5 :: y x1
[7] __primitive.assert 8 6 :: i? x1
[8] __primitive.mul 3 2 :: i x1
[9] return [7] -> 14
[10] __primitive.bitand 1 &5 :: i x1
[11] __primitive.eq 10 5 :: y x1
[12] __primitive.not 11 :: y x1
[13] __primitive.assert 3 12 :: i? x1
[14] return [13]

___ algorithm.gcd (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] algorithm.gcd_r0 2 1 :: i x1
[4] return [3]

___ algorithm.gcd_r0 (2 -> 1) x2 rec ___
[1] var :: ?*i x4
[2] var :: ?*i x2
[3] __primitive.neq &1 &4 :: y x1
[4] val 0 :: i x2
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &2 5 :: i? x1
[7] return [6] -> 12
[8] __primitive.neq &1 4 :: y x1
[9] __primitive.assert 11 8 :: i? x1
[10] __primitive.mod 2 &1 :: i? x1
[11] algorithm.gcd_r0 1 10 :: i x1
[12] return [9]

___ algorithm.iota2 (1 -> 1) ___
[1] var :: ?l x1
[2] algorithm.iota2_r0 1 :: l x1
[3] return [2]

___ algorithm.iota2_r0 (1 -> 1) x2 rec ___
[1] var :: ?*l x2
[2] __primitive.ap &1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x4
[4] __primitive.gt &3 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert 1 6 :: l? x1
[8] return [7] -> 15
[9] __primitive.gt &3 5 :: y x1
[10] __primitive.assert 14 9 :: l? x1
[11] __primitive.sub &3 12 :: i x1
[12] val 1 :: i x1
[13] __primitive.pushr 2 3 11 :: l x1
[14] algorithm.iota2_r0 13 :: l x1
[15] return [10]

___ algorithm.power_step (3 -> 3) ___
[1] var :: ?i x2
[2] var :: ?i x3
[3] var :: ?i x1
[4] __primitive.shiftr &1 5 :: i x1
[5] val 1 :: i x1
[6] __primitive.mul &2 &2 :: i x1
[7] algorithm.acc_odd_power 3 2 1 :: i x1
[8] return [7 6 4]

___ algorithm.reduce_power (2 -> 2) ___
[1] var :: ?i x1
[2] var :: ?i x2
[3] __primitive.shiftr 1 4 :: i x1
[4] val 1 :: i x1
[5] __primitive.mul &2 2 :: i x1
[6] return [5 3]

___ algorithm.sum (1 -> 1) ___
[1] var :: ?l x1
[2] val 0 :: i x1
[3] algorithm.sum_r0 2 1 :: i x1
[4] return [3]

___ algorithm.sum_r0 (2 -> 1) x2 rec ___
[1] var :: ?*l x1
[2] var :: ?*i x2
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: i x3
[5] __primitive.seq 7 &4 :: v x1
[6] __primitive.add 4 2 :: i x1
[7] algorithm.sum_r0 6 3 :: v x1
[8] return [5] -> 10
[9] __primitive.otherwise 4 2 :: i x1
[10] return [9]

___ control.$ (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] __primitive.ap 2 1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [4]

___ control.$$ (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 2 1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] return [5]

___ control.$keep (2 -> 2) ___
[1] var :: ?l x2
[2] var :: ?a x1
[3] __primitive.ap 2 &1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [4 1]

___ control.-> (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x2
[3] __primitive.ap &2 1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [4 2]

___ control.both (3 -> 2) ___
[1] var :: ?l x2
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 2 &1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 3 1 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [7 5]

___ control.dip11 (3 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 5 :: v x1
[5] __primitive.dep 4 :: a x1
[6] return [5 2]

___ control.dip12 (3 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 6 5 :: v x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.dep 4 :: a x1
[7] return [6 5 2]

___ control.dip13 (3 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 7 6 5 :: v x3
[5] __primitive.dep 4 :: a x1
[6] __primitive.dep 4 :: a x1
[7] __primitive.dep 4 :: a x1
[8] return [7 6 5 2]

___ control.dip14 (3 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 9 8 7 6 :: v x4
[6] __primitive.dep 4 :: a x1
[7] __primitive.dep 4 :: a x1
[8] __primitive.dep 4 :: a x1
[9] __primitive.dep 4 :: a x1
[10] return [9 8 7 6 2]

___ control.dip15 (3 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 1 -> 10 9 8 7 6 :: v x5
[6] __primitive.dep 4 :: a x1
[7] __primitive.dep 4 :: a x1
[8] __primitive.dep 4 :: a x1
[9] __primitive.dep 4 :: a x1
[10] __primitive.dep 4 :: a x1
[11] return [10 9 8 7 6 2]

___ control.dip21 (4 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 1 -> 6 :: v x1
[6] __primitive.dep 5 :: a x1
[7] return [6 2]

___ control.dip22 (4 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 1 -> 7 6 :: v x2
[6] __primitive.dep 5 :: a x1
[7] __primitive.dep 5 :: a x1
[8] return [7 6 2]

___ control.dip23 (4 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 1 -> 9 8 7 :: v x3
[7] __primitive.dep 5 :: a x1
[8] __primitive.dep 5 :: a x1
[9] __primitive.dep 5 :: a x1
[10] return [9 8 7 2]

___ control.dip24 (4 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 1 -> 10 9 8 7 :: v x4
[7] __primitive.dep 5 :: a x1
[8] __primitive.dep 5 :: a x1
[9] __primitive.dep 5 :: a x1
[10] __primitive.dep 5 :: a x1
[11] return [10 9 8 7 2]

___ control.dip25 (4 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 4 3 1 -> 11 10 9 8 7 :: v x5
[7] __primitive.dep 5 :: a x1
[8] __primitive.dep 5 :: a x1
[9] __primitive.dep 5 :: a x1
[10] __primitive.dep 5 :: a x1
[11] __primitive.dep 5 :: a x1
[12] return [11 10 9 8 7 2]

___ control.dip31 (5 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 4 3 1 -> 7 :: v x1
[7] __primitive.dep 6 :: a x1
[8] return [7 2]

___ control.dip32 (5 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 4 3 1 -> 9 8 :: v x2
[8] __primitive.dep 6 :: a x1
[9] __primitive.dep 6 :: a x1
[10] return [9 8 2]

___ control.dip33 (5 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 4 3 1 -> 10 9 8 :: v x3
[8] __primitive.dep 6 :: a x1
[9] __primitive.dep 6 :: a x1
[10] __primitive.dep 6 :: a x1
[11] return [10 9 8 2]

___ control.dip34 (5 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 4 3 1 -> 11 10 9 8 :: v x4
[8] __primitive.dep 6 :: a x1
[9] __primitive.dep 6 :: a x1
[10] __primitive.dep 6 :: a x1
[11] __primitive.dep 6 :: a x1
[12] return [11 10 9 8 2]

___ control.dip35 (5 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] __primitive.ap 5 4 3 1 -> 12 11 10 9 8 :: v x5
[8] __primitive.dep 6 :: a x1
[9] __primitive.dep 6 :: a x1
[10] __primitive.dep 6 :: a x1
[11] __primitive.dep 6 :: a x1
[12] __primitive.dep 6 :: a x1
[13] return [12 11 10 9 8 2]

___ control.dip41 (6 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 9 :: v x1
[9] __primitive.dep 7 :: a x1
[10] return [9 2]

___ control.dip42 (6 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 10 9 :: v x2
[9] __primitive.dep 7 :: a x1
[10] __primitive.dep 7 :: a x1
[11] return [10 9 2]

___ control.dip43 (6 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 11 10 9 :: v x3
[9] __primitive.dep 7 :: a x1
[10] __primitive.dep 7 :: a x1
[11] __primitive.dep 7 :: a x1
[12] return [11 10 9 2]

___ control.dip44 (6 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 12 11 10 9 :: v x4
[9] __primitive.dep 7 :: a x1
[10] __primitive.dep 7 :: a x1
[11] __primitive.dep 7 :: a x1
[12] __primitive.dep 7 :: a x1
[13] return [12 11 10 9 2]

___ control.dip45 (6 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 13 12 11 10 9 :: v x5
[9] __primitive.dep 7 :: a x1
[10] __primitive.dep 7 :: a x1
[11] __primitive.dep 7 :: a x1
[12] __primitive.dep 7 :: a x1
[13] __primitive.dep 7 :: a x1
[14] return [13 12 11 10 9 2]

___ control.dip51 (7 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 10 :: v x1
[10] __primitive.dep 8 :: a x1
[11] return [10 2]

___ control.dip52 (7 -> 3) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 11 10 :: v x2
[10] __primitive.dep 8 :: a x1
[11] __primitive.dep 8 :: a x1
[12] return [11 10 2]

___ control.dip53 (7 -> 4) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 12 11 10 :: v x3
[10] __primitive.dep 8 :: a x1
[11] __primitive.dep 8 :: a x1
[12] __primitive.dep 8 :: a x1
[13] return [12 11 10 2]

___ control.dip54 (7 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 13 12 11 10 :: v x4
[10] __primitive.dep 8 :: a x1
[11] __primitive.dep 8 :: a x1
[12] __primitive.dep 8 :: a x1
[13] __primitive.dep 8 :: a x1
[14] return [13 12 11 10 2]

___ control.dip55 (7 -> 6) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] __primitive.ap 7 6 5 4 3 1 -> 14 13 12 11 10 :: v x5
[10] __primitive.dep 8 :: a x1
[11] __primitive.dep 8 :: a x1
[12] __primitive.dep 8 :: a x1
[13] __primitive.dep 8 :: a x1
[14] __primitive.dep 8 :: a x1
[15] return [14 13 12 11 10 2]

___ control.either (3 -> 1) x2 ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?l x2
[4] __primitive.ap &3 -> 9 5 :: v? x2
[5] __primitive.dep 4 :: y x1
[6] __primitive.eq_s 5 7 :: y x1
[7] val Right :: y x1
[8] __primitive.assert 9 6 :: a? x1
[9] __primitive.dep 4 :: a x1
[10] __primitive.ap 8 1 -> 11 :: v? x1
[11] __primitive.dep 10 :: a x1
[12] return [11] -> 21
[13] __primitive.ap 3 -> 18 14 :: v? x2
[14] __primitive.dep 13 :: y x1
[15] __primitive.eq_s 14 16 :: y x1
[16] val Left :: y x1
[17] __primitive.assert 18 15 :: a? x1
[18] __primitive.dep 13 :: a x1
[19] __primitive.ap 17 2 -> 20 :: v? x1
[20] __primitive.dep 19 :: a x1
[21] return [20]

___ control.fork (3 -> 2) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?a x2
[4] __primitive.ap &3 1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 3 2 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [7 5]

___ control.if (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?a x2
[4] __primitive.ap &3 2 -> 5 :: v? x1
[5] __primitive.dep 4 :: y x1
[6] __primitive.assert 8 5 :: a? x1
[7] __primitive.ap 3 1 -> 8 :: v? x1
[8] __primitive.dep 7 :: a x1
[9] return [6]

___ control.ifdo (2 -> 1) x2 ___
[1] var :: ?l x2
[2] var :: ?a x3
[3] __primitive.ap &2 &1 -> 6 4 :: v? x2
[4] __primitive.dep 3 :: y x1
[5] __primitive.assert 6 4 :: a? x1
[6] __primitive.dep 3 :: a x1
[7] return [5] -> 14
[8] __primitive.ap &2 2 1 -> 10 X 11 :: v x2
[10] __primitive.dep 8 :: a x1
[11] __primitive.dep 8 :: y x1
[12] __primitive.not 11 :: y x1
[13] __primitive.assert 10 12 :: a? x1
[14] return [13]

___ control.ifte (3 -> 1) x2 ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?y x2
[4] __primitive.not &3 :: y x1
[5] __primitive.assert 1 4 :: a? x1
[6] return [5] -> 8
[7] __primitive.assert 2 3 :: a? x1
[8] return [7]

___ control.in2 (2 -> 3) ___
[1] var :: ?a x2
[2] var :: ?a x2
[3] __primitive.quote &2 &1 :: a x1
[4] return [2 1 3]

___ control.iterate (3 -> 1) x2 rec ___
[1] var :: ?l x3
[2] var :: ?l x2
[3] var :: ?*a x4
[4] __primitive.ap &3 &1 -> 5 :: v? x1
[5] __primitive.dep 4 :: y x1
[6] __primitive.ap &3 &1 -> 7 :: v? x1
[7] __primitive.dep 6 :: y x1
[8] __primitive.not 7 :: y x1
[9] __primitive.assert &3 8 :: a? x1
[10] return [9] -> 15
[11] __primitive.assert 14 5 :: a? x1
[12] __primitive.ap 3 &2 -> 13 :: v x1
[13] __primitive.dep 12 :: a x1
[14] control.iterate 13 2 1 :: a x1
[15] return [11]

___ control.maybe (3 -> 1) x2 ___
[1] var :: ?a x2
[2] var :: ?a x2
[3] var :: ?l x2
[4] __primitive.ap &1 &2 &3 -> 6 19 15 :: v x3
[6] __primitive.dep 4 :: l x1
[7] __primitive.ap 1 2 3 -> 13 X 9 :: v x2
[9] __primitive.dep 7 :: y x1
[10] __primitive.eq_s 9 11 :: y x1
[11] val Nothing :: y x1
[12] __primitive.assert 13 10 :: a? x1
[13] __primitive.dep 7 :: a x1
[14] return [12] -> 22
[15] __primitive.dep 4 :: y x1
[16] __primitive.eq_s 15 17 :: y x1
[17] val Just :: y x1
[18] __primitive.assert 19 16 :: a? x1
[19] __primitive.dep 4 :: a x1
[20] __primitive.ap 18 6 -> 21 :: v? x1
[21] __primitive.dep 20 :: a x1
[22] return [21]

___ stack.nip (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?v x0
[3] return [1]

___ control.para (4 -> 2) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] __primitive.ap 3 1 -> 6 :: v? x1
[6] __primitive.dep 5 :: a x1
[7] __primitive.ap 4 2 -> 8 :: v? x1
[8] __primitive.dep 7 :: a x1
[9] return [8 6]

___ control.peek (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x2
[3] __primitive.ap &2 1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [2 4]

___ stack.swap3 (4 -> 4) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] return [3 2 1 4]

___ stack.swap5 (6 -> 6) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] return [5 4 3 2 1 6]

___ control.times (3 -> 1) ___
[1] var :: ?i x1
[2] var :: ?l x1
[3] var :: ?a x1
[4] control.times_r0 3 2 1 :: l x1
[5] return [4]

___ control.times_r0 (3 -> 1) x2 rec ___
[1] var :: ?*i x3
[2] var :: ?l x2
[3] var :: ?*a x2
[4] __primitive.gt &1 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert &3 6 :: l? x1
[8] return [7] -> 16
[9] __primitive.gt &1 5 :: y x1
[10] __primitive.assert 15 9 :: l? x1
[11] __primitive.sub 1 12 :: i x1
[12] val 1 :: i x1
[13] __primitive.ap 3 &2 -> 14 :: v? x1
[14] __primitive.dep 13 :: a x1
[15] control.times_r0 14 2 11 :: l x1
[16] return [10]

___ control.times_step (3 -> 3) ___
[1] var :: ?i x1
[2] var :: ?l x2
[3] var :: ?a x1
[4] __primitive.sub 1 5 :: i x1
[5] val 1 :: i x1
[6] __primitive.ap 3 &2 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [7 2 4]

___ control.while (2 -> 1) x2 rec ___
[1] var :: ?l x2
[2] var :: ?*a x2
[3] __primitive.ap &2 &1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x3
[5] __primitive.seq 6 &4 :: v x1
[6] control.while 4 1 :: v x1
[7] return [5] -> 9
[8] __primitive.otherwise 4 2 :: a x1
[9] return [8]

___ io.getline (1 -> 2) ___
[1] var :: ?y x1
[2] io.getline_loop 1 3 -> 4 :: y x2
[3] val "" :: s x1
[4] __primitive.dep 2 :: s x1
[5] return [2 4]

___ io.getline_loop (2 -> 2) x2 rec ___
[1] var :: ?*s x2
[2] var :: ?*y x1
[3] __primitive.read 2 4 -> 5 :: y x3
[4] val 1024 :: i x1
[5] __primitive.dep 3 :: s x2
[6] __primitive.strsplit &5 7 -> 9 :: s? x5
[7] val "\n" :: s x1
[8] __primitive.seq &6 6 :: s x2
[9] __primitive.dep 6 :: s x1
[10] __primitive.strcat 1 9 :: s x1
[11] __primitive.unread 3 10 :: y x1
[12] __primitive.seq 11 &8 :: y x1
[13] return [12 8] -> 19
[14] __primitive.otherwise &6 16 :: y x1
[15] __primitive.strcat 1 5 :: s x1
[16] io.getline_loop 3 15 -> 17 :: y x2
[17] __primitive.dep 16 :: s x1
[18] __primitive.otherwise 6 17 :: s x1
[19] return [14 18]

___ list.!! (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] list.dropl_r0 2 1 :: l x1
[4] __primitive.ap 3 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] return [5]

___ list.dropl (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?l x1
[3] list.dropl_r0 2 1 :: l x1
[4] return [3]

___ list.dropl_r0 (2 -> 1) x2 rec ___
[1] var :: ?*i x3
[2] var :: ?*l x2
[3] __primitive.gt &1 &4 :: y x1
[4] val 0 :: i x2
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &2 5 :: l? x1
[7] return [6] -> 14
[8] __primitive.gt &1 4 :: y x1
[9] __primitive.assert 13 8 :: l? x1
[10] __primitive.sub 1 11 :: i x1
[11] val 1 :: i x1
[12] __primitive.ap 2 -> X :: l? x1
[13] list.dropl_r0 12 10 :: l x1
[14] return [9]

___ list.filter (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] [] :: l x1
[4] list.filter_r0 2 3 1 :: l x1
[5] return [4]

___ list.filter_r0 (3 -> 1) x2 rec ___
[1] var :: ?l x2
[2] var :: ?*l x2
[3] var :: ?*l x3
[4] __primitive.seq 11 &3 :: v x1
[5] __primitive.ap &3 -> 6 :: l? x2
[6] __primitive.dep 5 :: a x1
[7] __primitive.ap 6 &1 -> 8 :: v? x1
[8] __primitive.dep 7 :: y x1
[9] __primitive.not 8 :: y x1
[10] __primitive.assert &2 9 :: l? x1
[11] list.filter_r0 5 10 1 :: v x1
[12] return [4] -> 14
[13] __primitive.otherwise 3 2 :: l x1
[14] return [13]

___ list.filter_step (3 -> 3) x2 ___
[1] var :: ?l x3
[2] var :: ?l x2
[3] var :: ?l x1
[4] __primitive.ap 3 -> 5 :: l? x3
[5] __primitive.dep 4 :: a x2
[6] __primitive.ap &5 &1 -> 7 :: v? x1
[7] __primitive.dep 6 :: y x2
[8] __primitive.not &7 :: y x1
[9] __primitive.assert &2 8 :: l? x1
[10] return [4 9 1] -> 13
[11] __primitive.assert 12 7 :: l? x1
[12] __primitive.ap 5 2 :: l x1
[13] return [4 11 1]

___ list.foldl (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?l x1
[4] [] :: l x1
[5] list.foldl_r0 1 3 4 :: l x1
[6] __primitive.ap 2 5 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [7]

___ list.foldl_r0 (3 -> 1) x2 rec ___
[1] var :: ?*l x2
[2] var :: ?*l x1
[3] var :: ?l x2
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x3
[6] __primitive.seq 9 &5 :: v x1
[7] __primitive.ap 5 &3 :: l x1
[8] __primitive.compose 7 1 :: l x1
[9] list.foldl_r0 3 4 8 :: v x1
[10] return [6] -> 12
[11] __primitive.otherwise 5 1 :: l x1
[12] return [11]

___ list.foldl_step (3 -> 3) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?l x2
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 5 &3 :: l x1
[7] __primitive.compose 6 1 :: l x1
[8] return [3 4 7]

___ list.foldr (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?l x1
[4] list.foldr_r0 1 3 2 :: l x1
[5] return [4]

___ list.foldr_r0 (3 -> 1) x2 rec ___
[1] var :: ?*a x2
[2] var :: ?*l x1
[3] var :: ?l x2
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x3
[6] __primitive.seq 9 &5 :: v x1
[7] __primitive.ap &5 &1 &3 -> 8 :: v? x1
[8] __primitive.dep 7 :: a x1
[9] list.foldr_r0 3 4 8 :: v x1
[10] return [6] -> 12
[11] __primitive.otherwise 5 1 :: l x1
[12] return [11]

___ list.foldr_step (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?l x1
[3] var :: ?l x2
[4] __primitive.ap 2 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 5 1 &3 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [3 4 7]

___ list.head (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: v? x1
[3] __primitive.dep 2 :: a x1
[4] return [3]

___ list.iteratel (2 -> 1) ___
[1] var :: ?l x2
[2] var :: ?a x2
[3] __primitive.ap &2 &1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] list.iteratel_q0 2 1 4 :: l x1
[6] return [5]

___ list.iteratel_q0 (3 -> 1) ___
[1] var :: ?a x1
[2] var :: ?l x1
[3] var :: ?a x1
[4] list.iteratel 1 2 :: v x1
[5] __primitive.ap 4 3 6 :: l x1
[6] [] :: l x1
[7] return [5]

___ list.length (1 -> 1) ___
[1] var :: ?l x1
[2] val 0 :: i x1
[3] list.length_r0 2 1 :: i x1
[4] return [3]

___ list.length_r0 (2 -> 1) x2 rec ___
[1] var :: ?*l x1
[2] var :: ?*i x2
[3] __primitive.ap 1 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x2
[5] __primitive.seq 8 4 :: v x1
[6] __primitive.add 2 7 :: i x1
[7] val 1 :: i x1
[8] list.length_r0 6 3 :: v x1
[9] return [5] -> 11
[10] __primitive.otherwise 4 2 :: i x1
[11] return [10]

___ list.listdup (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] [] :: l x1
[4] list.listdup_r0 2 1 3 :: l x1
[5] return [4]

___ list.listdup_r0 (3 -> 1) x2 rec ___
[1] var :: ?*l x2
[2] var :: ?i x2
[3] var :: ?*i x3
[4] __primitive.gt &3 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert &1 6 :: l? x1
[8] return [7] -> 15
[9] __primitive.gt &3 5 :: y x1
[10] __primitive.assert 14 9 :: l? x1
[11] __primitive.sub 3 12 :: i x1
[12] val 1 :: i x1
[13] __primitive.ap &2 1 :: l x1
[14] list.listdup_r0 11 2 13 :: l x1
[15] return [10]

___ list.map (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] [] :: l x1
[4] list.map_r0 2 3 1 :: l x1
[5] return [4]

___ list.map_r0 (3 -> 1) x2 rec ___
[1] var :: ?l x2
[2] var :: ?*l x2
[3] var :: ?*l x1
[4] __primitive.ap 3 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x3
[6] __primitive.seq 9 &5 :: v x1
[7] __primitive.ap 5 &1 :: l x1
[8] __primitive.compose 7 2 :: l x1
[9] list.map_r0 4 8 1 :: v x1
[10] return [6] -> 12
[11] __primitive.otherwise 5 2 :: l x1
[12] return [11]

___ list.mov_ap (3 -> 3) ___
[1] var :: ?l x2
[2] var :: ?l x1
[3] var :: ?l x1
[4] __primitive.ap 3 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.ap 5 &1 :: l x1
[7] __primitive.compose 6 2 :: l x1
[8] return [4 7 1]

___ list.movr (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] __primitive.ap 2 -> 4 :: l? x2
[4] __primitive.dep 3 :: a x1
[5] __primitive.ap 4 1 :: l x1
[6] return [3 5]

___ stack.over3 (4 -> 5) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x2
[5] return [&4 3 2 1 4]

___ list.pushif (3 -> 1) x2 ___
[1] var :: ?l x1
[2] var :: ?l x2
[3] var :: ?a x2
[4] __primitive.ap &3 1 -> 5 :: v? x1
[5] __primitive.dep 4 :: y x2
[6] __primitive.not &5 :: y x1
[7] __primitive.assert &2 6 :: l? x1
[8] return [7] -> 11
[9] __primitive.assert 10 5 :: l? x1
[10] __primitive.ap 3 2 :: l x1
[11] return [9]

___ list.split_at (2 -> 2) ___
[1] var :: ?i x1
[2] var :: ?l x1
[3] [] :: l x1
[4] list.split_at_r0 2 3 1 -> 5 :: l x2
[5] __primitive.dep 4 :: a x1
[6] return [4 5]

___ list.split_at_r0 (3 -> 2) x2 rec ___
[1] var :: ?*i x3
[2] var :: ?*l x2
[3] var :: ?*l x2
[4] __primitive.gt &1 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x2
[7] __primitive.assert &2 &6 :: l? x1
[8] __primitive.assert 3 6 :: l x1
[9] return [8 7] -> 20
[10] __primitive.gt &1 5 :: y x2
[11] __primitive.assert 17 &10 :: l? x1
[12] __primitive.sub 1 13 :: i x1
[13] val 1 :: i x1
[14] __primitive.ap 3 -> 15 :: l? x2
[15] __primitive.dep 14 :: a x1
[16] __primitive.ap 15 2 :: l x1
[17] list.split_at_r0 14 16 12 -> 18 :: l x2
[18] __primitive.dep 17 :: l x1
[19] __primitive.assert 18 10 :: l x1
[20] return [11 19]

___ list.top (1 -> 2) ___
[1] var :: ?l x2
[2] __primitive.ap &1 -> 3 :: v? x1
[3] __primitive.dep 2 :: a x1
[4] return [1 3]

___ logic.valid (1 -> 1) x2 ___
[1] var :: ?a x2
[2] __primitive.seq 3 1 :: y x1
[3] val True :: y x1
[4] return [2] -> 7
[5] __primitive.otherwise 1 6 :: y x1
[6] val False :: y x1
[7] return [5]

___ logic.and (2 -> 1) x2 ___
[1] var :: ?y x2
[2] var :: ?a x1
[3] __primitive.assert 2 &1 :: a? x1
[4] return [3] -> 8
[5] __primitive.not 1 :: y x1
[6] __primitive.assert 7 5 :: y? x1
[7] val False :: y x1
[8] return [6]

___ logic.default (2 -> 1) x2 ___
[1] var :: ?a x1
[2] var :: ?a x2
[3] return [2] -> 5
[4] __primitive.otherwise 2 1 :: a x1
[5] return [4]

___ logic.implies (2 -> 1) x2 ___
[1] var :: ?a x1
[2] var :: ?y x1
[3] __primitive.not 2 :: y x2
[4] __primitive.not &3 :: y x1
[5] __primitive.assert 1 4 :: a? x1
[6] return [5] -> 9
[7] __primitive.assert 8 3 :: y? x1
[8] val True :: y x1
[9] return [7]

___ logic.or (2 -> 1) x2 ___
[1] var :: ?y x2
[2] var :: ?a x1
[3] __primitive.not &1 :: y x1
[4] __primitive.assert 2 3 :: a? x1
[5] return [4] -> 8
[6] __primitive.assert 7 1 :: y? x1
[7] val True :: y x1
[8] return [6]

___ logic.otherwise2 (4 -> 2) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x2
[5] __primitive.otherwise &4 6 :: l x1
[6] __primitive.otherwise 3 1 :: l x1
[7] __primitive.otherwise 4 2 :: a x1
[8] return [7 5]

___ logic.valid (1 -> 1) x2 ___
[1] var :: ?a x2
[2] __primitive.seq 3 1 :: y x1
[3] val True :: y x1
[4] return [2] -> 7
[5] __primitive.otherwise 1 6 :: y x1
[6] val False :: y x1
[7] return [5]

___ logic.vifte (3 -> 1) x2 ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x2
[4] __primitive.seq 2 3 :: a x1
[5] return [4] -> 7
[6] __primitive.otherwise 3 1 :: a x1
[7] return [6]

___ num.even (1 -> 1) ___
[1] var :: ?i x1
[2] __primitive.bitand 1 3 :: i x1
[3] val 1 :: i x1
[4] __primitive.eq 2 5 :: y x1
[5] val 0 :: i x1
[6] return [4]

___ num.max (2 -> 1) x2 ___
[1] var :: ?i x3
[2] var :: ?i x3
[3] __primitive.lte &2 &1 :: y x1
[4] __primitive.assert &1 3 :: i? x1
[5] return [4] -> 8
[6] __primitive.lte 1 &2 :: y x1
[7] __primitive.assert 2 6 :: i? x1
[8] return [7]

___ num.min (2 -> 1) x2 ___
[1] var :: ?i x3
[2] var :: ?i x3
[3] __primitive.gt &2 &1 :: y x1
[4] __primitive.assert &1 3 :: i? x1
[5] return [4] -> 8
[6] __primitive.gt 1 &2 :: y x1
[7] __primitive.assert 2 6 :: i? x1
[8] return [7]

___ num.odd (1 -> 1) ___
[1] var :: ?i x1
[2] __primitive.bitand 1 &3 :: i x1
[3] val 1 :: i x2
[4] __primitive.eq 2 3 :: y x1
[5] return [4]

___ stack.-swap2 (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] return [1 3 2]

___ stack.-swap3 (4 -> 4) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] return [1 4 3 2]

___ stack.-swap4 (5 -> 5) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] return [1 5 4 3 2]

___ stack.-swap5 (6 -> 6) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] return [1 6 5 4 3 2]

___ stack.-swap6 (7 -> 7) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] return [1 7 6 5 4 3 2]

___ control.dip44 (6 -> 5) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] __primitive.ap 6 5 4 3 1 -> 12 11 10 9 :: v x4
[9] __primitive.dep 7 :: a x1
[10] __primitive.dep 7 :: a x1
[11] __primitive.dep 7 :: a x1
[12] __primitive.dep 7 :: a x1
[13] return [12 11 10 9 2]

___ stack.dup2 (2 -> 4) ___
[1] var :: ?a x2
[2] var :: ?a x2
[3] return [&2 &1 2 1]

___ stack.get2 (1 -> 2) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 3 :: v? x2
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] return [4 3]

___ stack.nip (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?v x0
[3] return [1]

___ stack.over (2 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x2
[3] return [&2 1 2]

___ stack.over2 (3 -> 4) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x2
[4] return [&3 2 1 3]

___ stack.over3 (4 -> 5) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x2
[5] return [&4 3 2 1 4]

___ stack.over4 (5 -> 6) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x2
[6] return [&5 4 3 2 1 5]

___ stack.pull (1 -> 2) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: a x1
[4] return [3 2]

___ stack.pull2 (1 -> 3) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 :: l? x3
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] return [4 3 2]

___ stack.pull3 (1 -> 4) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 5 :: l? x4
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] return [5 4 3 2]

___ stack.pull4 (1 -> 5) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 5 6 :: l? x5
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] return [6 5 4 3 2]

___ stack.pull5 (1 -> 6) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 5 6 7 8 :: l? x6
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] __primitive.dep 2 :: a x1
[8] __primitive.dep 2 :: a x1
[9] return [8 7 6 5 4 2]

___ stack.pull6 (1 -> 7) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 5 6 7 8 9 :: l? x7
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] __primitive.dep 2 :: a x1
[8] __primitive.dep 2 :: a x1
[9] __primitive.dep 2 :: a x1
[10] return [9 8 7 6 5 4 2]

___ stack.pull7 (1 -> 8) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 5 6 7 8 9 10 :: l? x8
[4] __primitive.dep 2 :: a x1
[5] __primitive.dep 2 :: a x1
[6] __primitive.dep 2 :: a x1
[7] __primitive.dep 2 :: a x1
[8] __primitive.dep 2 :: a x1
[9] __primitive.dep 2 :: a x1
[10] __primitive.dep 2 :: a x1
[11] return [10 9 8 7 6 5 4 2]

___ stack.rev3 (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] return [1 2 3]

___ stack.swap2 (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] return [2 1 3]

___ stack.swap3 (4 -> 4) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] return [3 2 1 4]

___ stack.swap4 (5 -> 5) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] return [4 3 2 1 5]

___ stack.swap5 (6 -> 6) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] return [5 4 3 2 1 6]

___ stack.swap6 (7 -> 7) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] var :: ?a x1
[6] var :: ?a x1
[7] var :: ?a x1
[8] return [6 5 4 3 2 1 7]

___ stack.tail (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> X :: l? x1
[3] return [2]

___ stack.tail2 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> X X :: l? x1
[3] return [2]

___ stack.tuck (2 -> 3) ___
[1] var :: ?a x2
[2] var :: ?a x1
[3] return [&1 2 1]

___ tests.after0 (1 -> 1) ___
[1] var :: ?l x1
[2] tests.after0_r0 1 :: l x1
[3] return [2]

___ tests.after0_r0 (1 -> 1) x2 rec ___
[1] var :: ?*l x2
[2] __primitive.ap &1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x2
[4] __primitive.neq &3 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert 9 6 :: l? x1
[8] __primitive.ap 1 -> 9 X :: v? x1
[9] __primitive.dep 8 :: a x1
[10] return [7] -> 14
[11] __primitive.neq 3 5 :: y x1
[12] __primitive.assert 13 11 :: l? x1
[13] tests.after0_r0 2 :: l x1
[14] return [12]

___ tests.alt_list (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] tests.alt_list_q0 1 2 :: l x1
[4] return [3]

___ tests.alt_list_q0 (2 -> 1) x2 ___
[1] var :: ?a x2
[2] var :: ?a x2
[3] __primitive.ap &1 1 4 :: l x1
[4] [] :: l x2
[5] return [3] -> 7
[6] __primitive.ap &2 2 4 :: l x1
[7] return [6]

___ tests.alt_seq (1 -> 1) x2 ___
[1] var :: ?y x2
[2] __primitive.assert 3 &1 :: i? x1
[3] val 1 :: i x1
[4] return [2] -> 8
[5] __primitive.not 1 :: y x1
[6] __primitive.assert 7 5 :: i? x1
[7] val 2 :: i x1
[8] return [6]

___ tests.altf_loop (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] tests.altf_loop_r0 2 1 :: l x1
[4] return [3]

___ tests.altf_loop_r0 (2 -> 1) x3 rec ___
[1] var :: ?*i x4
[2] var :: ?a x3
[3] __primitive.gt &1 &4 :: y x1
[4] val 1 :: i x4
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &2 5 :: l? x1
[7] return [6] -> 12
[8] __primitive.gt &1 &4 :: y x2
[9] __primitive.assert 11 &8 :: l? x1
[10] __primitive.sub 1 4 :: i x1
[11] tests.altf_loop_r0 2 10 :: l x1
[12] return [9] -> 16
[13] __primitive.sub 1 4 :: i x1
[14] tests.altf_loop_r0 2 13 :: l x1
[15] __primitive.assert 14 8 :: l x1
[16] return [15]

___ tests.ap_loop (2 -> 1) rec ___
[1] var :: ?l x2
[2] var :: ?*a x1
[3] __primitive.ap 2 &1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] tests.ap_loop 4 1 :: v x1
[6] return [5]

___ tests.ap_loop1 (1 -> 1) ___
[1] var :: ?i x1
[2] tests.ap_loop1_r0 1 :: v x1
[3] return [2]

___ tests.ap_loop1_r0 (1 -> 1) rec ___
[1] var :: ?*i x1
[2] __primitive.add 1 3 :: i x1
[3] val 1 :: i x1
[4] tests.ap_loop1_r0 2 :: v x1
[5] return [4]

___ tests.ap_loop2 (1 -> 1) ___
[1] var :: ?l x1
[2] tests.ap_loop2_r0 1 :: v x1
[3] return [2]

___ tests.ap_loop2_r0 (1 -> 1) rec ___
[1] var :: ?*l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x1
[4] __primitive.add 3 5 :: i x1
[5] val 1 :: i x1
[6] __primitive.pushr 2 4 :: l x1
[7] tests.ap_loop2_r0 6 :: v x1
[8] return [7]

___ tests.ap_loop3 (1 -> 1) ___
[1] var :: ?i x1
[2] tests.ap_loop3_r0 1 :: v x1
[3] return [2]

___ tests.ap_loop3_r0 (1 -> 1) rec ___
[1] var :: ?*i x1
[2] __primitive.add 1 3 :: i x1
[3] val 1 :: i x1
[4] tests.ap_loop3_r0 2 :: v x1
[5] return [4]

___ tests.ap_loop4 (1 -> 1) ___
[1] var :: ?a x1
[2] [] :: l x1
[3] tests.ap_loop4_r0 2 1 :: v x1
[4] return [3]

___ tests.ap_loop4_r0 (2 -> 1) rec ___
[1] var :: ?*a x1
[2] var :: ?l x2
[3] __primitive.ap 4 &2 -> 5 :: v? x1
[4] __primitive.quote 1 :: a x1
[5] __primitive.dep 3 :: l x1
[6] __primitive.ap 5 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] tests.ap_loop4_r0 2 7 :: v x1
[9] return [8]

___ tests.assert_nready (2 -> 1) ___
[1] var :: ?y x1
[2] var :: ?i x1
[3] __primitive.assert 4 1 :: i? x1
[4] __primitive.add 2 5 :: i x1
[5] val 1 :: i x1
[6] return [3]

___ tests.assert_otherwise_quote (2 -> 1) ___
[1] var :: ?y x1
[2] var :: ?a x1
[3] __primitive.assert 4 1 :: l? x1
[4] val Something :: y x1
[5] __primitive.otherwise 3 2 :: a x1
[6] return [5]

___ tests.assert_seq (2 -> 1) ___
[1] var :: ?y x1
[2] var :: ?a x1
[3] __primitive.assert 2 1 :: i? x1
[4] return [3]

___ tests.binrec (4 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] control.iterate 4 3 2 :: a x1
[6] __primitive.ap 5 1 -> 7 :: v? x1
[7] __primitive.dep 6 :: a x1
[8] return [7]

___ tests.box (0 -> 1) ___
[1] tests.box_q0 :: l x1
[2] return [1]

___ tests.box_q0 (0 -> 1) ___
[1] tests.box :: v x1
[2] __primitive.ap 1 3 :: l x1
[3] [] :: l x1
[4] return [2]

___ tests.br10 (1 -> 1) ___
[1] var :: ?i x1
[2] tests.br10_r0 1 :: i x1
[3] return [2]

___ tests.br10_r0 (1 -> 1) x2 rec ___
[1] var :: ?*i x4
[2] __primitive.lt &1 &3 :: y x1
[3] val 10 :: i x2
[4] __primitive.not 2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 12
[7] __primitive.lt &1 3 :: y x1
[8] __primitive.assert 11 7 :: i? x1
[9] __primitive.add 1 10 :: i x1
[10] val 1 :: i x1
[11] tests.br10_r0 9 :: i x1
[12] return [8]

___ tests.calc (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.quote 3 :: l x1
[3] val 0 :: i x1
[4] tests.calc_loop 1 2 :: y x1
[5] return [4]

___ tests.calc_loop (2 -> 1) x15 rec ___
[1] var :: ?*l x13
[2] var :: ?*y x1
[3] __primitive.ap &1 -> 4 :: l? x4
[4] __primitive.dep 3 :: i x6
[5] __primitive.to_string &4 :: s x1
[6] __primitive.strcat 5 7 :: s x1
[7] val "\n" :: s x1
[8] __primitive.write 2 6 :: y x1
[9] io.getline_loop 8 10 -> 11 :: y x16
[10] val "" :: s x1
[11] __primitive.dep 9 :: s x1
[12] __primitive.strtrim 11 :: s x14
[13] __primitive.from_string &12 :: i? x3
[14] __primitive.seq 16 &13 :: v x1
[15] __primitive.pushr 1 13 :: l x1
[16] tests.calc_loop 9 15 :: v x1
[17] return [14] -> 28
[18] __primitive.eq_str &12 19 :: y x1
[19] val "+" :: s x1
[20] __primitive.assert &24 18 :: i? x2
[21] __primitive.ap &1 -> 22 23 :: l? x3
[22] __primitive.dep 21 :: i x1
[23] __primitive.dep 21 :: i x1
[24] __primitive.add 22 23 :: i x2
[25] __primitive.seq 27 20 :: v x1
[26] __primitive.pushr 21 24 :: l x1
[27] tests.calc_loop 9 26 :: v x1
[28] return [25] -> 39
[29] __primitive.eq_str &12 30 :: y x1
[30] val "-" :: s x1
[31] __primitive.assert &35 29 :: i? x2
[32] __primitive.ap &1 -> 33 34 :: l? x3
[33] __primitive.dep 32 :: i x1
[34] __primitive.dep 32 :: i x1
[35] __primitive.sub 33 34 :: i x2
[36] __primitive.seq 38 31 :: v x1
[37] __primitive.pushr 32 35 :: l x1
[38] tests.calc_loop 9 37 :: v x1
[39] return [36] -> 50
[40] __primitive.eq_str &12 41 :: y x1
[41] val "*" :: s x1
[42] __primitive.assert &46 40 :: i? x2
[43] __primitive.ap &1 -> 44 45 :: l? x3
[44] __primitive.dep 43 :: i x1
[45] __primitive.dep 43 :: i x1
[46] __primitive.mul 44 45 :: i x2
[47] __primitive.seq 49 42 :: v x1
[48] __primitive.pushr 43 46 :: l x1
[49] tests.calc_loop 9 48 :: v x1
[50] return [47] -> 61
[51] __primitive.eq_str &12 52 :: y x1
[52] val "/" :: s x1
[53] __primitive.assert &57 51 :: i? x2
[54] __primitive.ap &1 -> 55 56 :: l? x3
[55] __primitive.dep 54 :: i x1
[56] __primitive.dep 54 :: i x1
[57] __primitive.div 55 56 :: i? x2
[58] __primitive.seq 60 53 :: v x1
[59] __primitive.pushr 54 57 :: l x1
[60] tests.calc_loop 9 59 :: v x1
[61] return [58] -> 72
[62] __primitive.eq_str &12 63 :: y x1
[63] val "gcd" :: s x1
[64] __primitive.assert &68 62 :: i? x2
[65] __primitive.ap &1 -> 67 66 :: l? x3
[66] __primitive.dep 65 :: i x1
[67] __primitive.dep 65 :: i x1
[68] algorithm.gcd_r0 67 66 :: i x2
[69] __primitive.seq 71 64 :: v x1
[70] __primitive.pushr 65 68 :: l x1
[71] tests.calc_loop 9 70 :: v x1
[72] return [69] -> 84
[73] __primitive.eq_str &12 74 :: y x1
[74] val "^" :: s x1
[75] __primitive.assert &79 73 :: i? x2
[76] __primitive.ap &1 -> 78 77 :: l? x3
[77] __primitive.dep 76 :: i x1
[78] __primitive.dep 76 :: i x1
[79] algorithm.__caret___r0 80 78 77 :: i x2
[80] val 1 :: i x1
[81] __primitive.seq 83 75 :: v x1
[82] __primitive.pushr 76 79 :: l x1
[83] tests.calc_loop 9 82 :: v x1
[84] return [81] -> 92
[85] __primitive.eq_str &12 86 :: y x1
[86] val "fib" :: s x1
[87] __primitive.assert &88 85 :: i? x2
[88] tests.fib 4 :: i x2
[89] __primitive.seq 91 87 :: v x1
[90] __primitive.pushr 3 88 :: l x1
[91] tests.calc_loop 9 90 :: v x1
[92] return [89] -> 100
[93] __primitive.eq_str &12 94 :: y x1
[94] val "fact" :: s x1
[95] __primitive.assert &96 93 :: i? x2
[96] tests.fact 4 :: i x2
[97] __primitive.seq 99 95 :: v x1
[98] __primitive.pushr 3 96 :: l x1
[99] tests.calc_loop 9 98 :: v x1
[100] return [97] -> 109
[101] __primitive.eq_str &12 102 :: y x1
[102] val "len" :: s x1
[103] __primitive.assert &104 101 :: i? x2
[104] list.length_r0 105 &1 :: i x2
[105] val 0 :: i x2
[106] __primitive.seq 108 103 :: v x1
[107] __primitive.pushr 1 104 :: l x1
[108] tests.calc_loop 9 107 :: v x1
[109] return [106] -> 117
[110] __primitive.eq_str &12 111 :: y x1
[111] val "sum" :: s x1
[112] __primitive.assert &113 110 :: i? x2
[113] algorithm.sum_r0 105 1 :: i x2
[114] __primitive.seq 116 112 :: v x1
[115] __primitive.quote 113 :: l x1
[116] tests.calc_loop 9 115 :: v x1
[117] return [114] -> 127
[118] __primitive.eq_str &12 119 :: y x1
[119] val "swap" :: s x1
[120] __primitive.assert &122 118 :: l? x2
[121] __primitive.ap &1 -> 122 124 :: l? x3
[122] __primitive.dep 121 :: a x2
[123] __primitive.seq 126 120 :: v x1
[124] __primitive.dep 121 :: a x1
[125] __primitive.pushr 121 124 122 :: l x1
[126] tests.calc_loop 9 125 :: v x1
[127] return [123] -> 134
[128] __primitive.eq_str &12 129 :: y x1
[129] val "dup" :: s x1
[130] __primitive.assert &4 128 :: i? x2
[131] __primitive.seq 133 130 :: v x1
[132] __primitive.pushr 3 &4 4 :: l x1
[133] tests.calc_loop 9 132 :: v x1
[134] return [131] -> 143
[135] __primitive.eq_str 12 136 :: y x1
[136] val "drop" :: s x1
[137] __primitive.assert &139 135 :: l? x2
[138] __primitive.ap 1 -> 139 X :: l? x2
[139] __primitive.dep 138 :: a x2
[140] __primitive.seq 142 137 :: v x1
[141] __primitive.pushr 138 139 :: l x1
[142] tests.calc_loop 9 141 :: v x1
[143] return [140] -> 158
[144] __primitive.otherwise 13 9 :: y x1
[145] __primitive.otherwise 20 144 :: y x1
[146] __primitive.otherwise 31 145 :: y x1
[147] __primitive.otherwise 42 146 :: y x1
[148] __primitive.otherwise 53 147 :: y x1
[149] __primitive.otherwise 64 148 :: y x1
[150] __primitive.otherwise 75 149 :: y x1
[151] __primitive.otherwise 87 150 :: y x1
[152] __primitive.otherwise 95 151 :: y x1
[153] __primitive.otherwise 103 152 :: y x1
[154] __primitive.otherwise 112 153 :: y x1
[155] __primitive.otherwise 120 154 :: y x1
[156] __primitive.otherwise 130 155 :: y x1
[157] __primitive.otherwise 137 156 :: y x1
[158] return [157]

___ tests.calc_step (2 -> 1) x14 ___
[1] var :: ?s x1
[2] var :: ?l x14
[3] __primitive.strtrim 1 :: s x14
[4] __primitive.from_string &3 :: i? x1
[5] tests.calc_step_q0 4 2 :: l x1
[6] return [5] -> 11
[7] __primitive.eq_str &3 8 :: y x1
[8] val "+" :: s x1
[9] __primitive.assert 10 7 :: l? x1
[10] tests.calc_step_q1 2 :: l x1
[11] return [9] -> 16
[12] __primitive.eq_str &3 13 :: y x1
[13] val "-" :: s x1
[14] __primitive.assert 15 12 :: l? x1
[15] tests.calc_step_q2 2 :: l x1
[16] return [14] -> 21
[17] __primitive.eq_str &3 18 :: y x1
[18] val "*" :: s x1
[19] __primitive.assert 20 17 :: l? x1
[20] tests.calc_step_q3 2 :: l x1
[21] return [19] -> 26
[22] __primitive.eq_str &3 23 :: y x1
[23] val "/" :: s x1
[24] __primitive.assert 25 22 :: l? x1
[25] tests.calc_step_q4 2 :: l x1
[26] return [24] -> 31
[27] __primitive.eq_str &3 28 :: y x1
[28] val "gcd" :: s x1
[29] __primitive.assert 30 27 :: l? x1
[30] tests.calc_step_q5 2 :: l x1
[31] return [29] -> 36
[32] __primitive.eq_str &3 33 :: y x1
[33] val "^" :: s x1
[34] __primitive.assert 35 32 :: l? x1
[35] tests.calc_step_q6 2 :: l x1
[36] return [34] -> 41
[37] __primitive.eq_str &3 38 :: y x1
[38] val "fib" :: s x1
[39] __primitive.assert 40 37 :: l? x1
[40] tests.calc_step_q7 2 :: l x1
[41] return [39] -> 46
[42] __primitive.eq_str &3 43 :: y x1
[43] val "fact" :: s x1
[44] __primitive.assert 45 42 :: l? x1
[45] tests.calc_step_q8 2 :: l x1
[46] return [44] -> 51
[47] __primitive.eq_str &3 48 :: y x1
[48] val "len" :: s x1
[49] __primitive.assert 50 47 :: l? x1
[50] tests.calc_step_q9 2 :: l x1
[51] return [49] -> 56
[52] __primitive.eq_str &3 53 :: y x1
[53] val "sum" :: s x1
[54] __primitive.assert 55 52 :: l? x1
[55] tests.calc_step_q10 2 :: l x1
[56] return [54] -> 61
[57] __primitive.eq_str &3 58 :: y x1
[58] val "swap" :: s x1
[59] __primitive.assert 60 57 :: l? x1
[60] tests.calc_step_q11 2 :: l x1
[61] return [59] -> 66
[62] __primitive.eq_str &3 63 :: y x1
[63] val "dup" :: s x1
[64] __primitive.assert 65 62 :: l? x1
[65] tests.calc_step_q12 2 :: l x1
[66] return [64] -> 71
[67] __primitive.eq_str 3 68 :: y x1
[68] val "drop" :: s x1
[69] __primitive.assert 70 67 :: l? x1
[70] tests.calc_step_q13 2 :: l x1
[71] return [69]

___ tests.calc_step_q0 (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?i x1
[3] __primitive.compose 1 2 4 :: l x1
[4] [] :: l x1
[5] return [3]

___ tests.calc_step_q1 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 :: l? x3
[3] __primitive.dep 2 :: i x1
[4] __primitive.dep 2 :: i x1
[5] __primitive.add 3 4 :: i x1
[6] __primitive.compose 2 5 7 :: l x1
[7] [] :: l x1
[8] return [6]

___ tests.calc_step_q2 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 :: l? x3
[3] __primitive.dep 2 :: i x1
[4] __primitive.dep 2 :: i x1
[5] __primitive.sub 3 4 :: i x1
[6] __primitive.compose 2 5 7 :: l x1
[7] [] :: l x1
[8] return [6]

___ tests.calc_step_q3 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 :: l? x3
[3] __primitive.dep 2 :: i x1
[4] __primitive.dep 2 :: i x1
[5] __primitive.mul 3 4 :: i x1
[6] __primitive.compose 2 5 7 :: l x1
[7] [] :: l x1
[8] return [6]

___ tests.calc_step_q4 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 :: l? x3
[3] __primitive.dep 2 :: i x1
[4] __primitive.dep 2 :: i x1
[5] __primitive.div 3 4 :: i? x1
[6] __primitive.compose 2 5 7 :: l x1
[7] [] :: l x1
[8] return [6]

___ tests.calc_step_q5 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 3 :: l? x3
[3] __primitive.dep 2 :: i x1
[4] __primitive.dep 2 :: i x1
[5] algorithm.gcd_r0 4 3 :: i x1
[6] __primitive.compose 2 5 7 :: l x1
[7] [] :: l x1
[8] return [6]

___ tests.calc_step_q6 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 3 :: l? x3
[3] __primitive.dep 2 :: i x1
[4] __primitive.dep 2 :: i x1
[5] algorithm.__caret___r0 6 4 3 :: i x1
[6] val 1 :: i x1
[7] __primitive.compose 2 5 8 :: l x1
[8] [] :: l x1
[9] return [7]

___ tests.calc_step_q7 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x1
[4] tests.fib 3 :: i x1
[5] __primitive.compose 2 4 6 :: l x1
[6] [] :: l x1
[7] return [5]

___ tests.calc_step_q8 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x1
[4] tests.fact 3 :: i x1
[5] __primitive.compose 2 4 6 :: l x1
[6] [] :: l x1
[7] return [5]

___ tests.calc_step_q9 (1 -> 1) ___
[1] var :: ?l x2
[2] list.length_r0 3 &1 :: i x1
[3] val 0 :: i x1
[4] __primitive.compose 1 2 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.calc_step_q10 (1 -> 1) ___
[1] var :: ?l x1
[2] algorithm.sum_r0 3 1 :: i x1
[3] val 0 :: i x1
[4] __primitive.ap 2 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.calc_step_q11 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 4 3 :: l? x3
[3] __primitive.dep 2 :: a x1
[4] __primitive.dep 2 :: a x1
[5] __primitive.compose 2 3 4 6 :: l x1
[6] [] :: l x1
[7] return [5]

___ tests.calc_step_q12 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: a x2
[4] __primitive.compose 2 &3 3 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.calc_step_q13 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 X :: l? x2
[3] __primitive.dep 2 :: a x1
[4] __primitive.compose 2 3 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.calc_step_dummy (2 -> 1) ___
[1] var :: ?s x1
[2] var :: ?l x1
[3] __primitive.ap 2 -> 4 :: l? x2
[4] __primitive.dep 3 :: i x1
[5] __primitive.strtrim 1 :: s x1
[6] __primitive.from_string 5 :: i? x1
[7] __primitive.add 4 6 :: i x1
[8] tests.calc_step_dummy_q0 7 3 :: l x1
[9] return [8]

___ tests.calc_step_dummy_q0 (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?i x1
[3] __primitive.compose 1 2 4 :: l x1
[4] [] :: l x1
[5] return [3]

___ tests.calc_step_push (2 -> 1) x2 ___
[1] var :: ?s x1
[2] var :: ?l x2
[3] __primitive.strtrim 1 :: s x1
[4] __primitive.pushr 2 5 :: a x1
[5] val 1 :: i x1
[6] return [4] -> 15
[7] __primitive.eq_str 3 8 :: y x1
[8] val "+" :: s x1
[9] __primitive.assert 14 7 :: l? x1
[10] __primitive.ap 2 -> 11 12 :: l? x3
[11] __primitive.dep 10 :: i x1
[12] __primitive.dep 10 :: i x1
[13] __primitive.add 11 12 :: i x1
[14] tests.calc_step_push_q0 13 10 :: l x1
[15] return [9]

___ tests.calc_step_push_q0 (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?i x1
[3] __primitive.compose 1 2 4 :: l x1
[4] [] :: l x1
[5] return [3]

___ tests.calc_step_simple (2 -> 1) x2 ___
[1] var :: ?s x1
[2] var :: ?l x2
[3] __primitive.strtrim 1 :: s x2
[4] __primitive.from_string &3 :: i? x1
[5] tests.calc_step_simple_q0 4 2 :: l x1
[6] return [5] -> 11
[7] __primitive.eq_str 3 8 :: y x1
[8] val "+" :: s x1
[9] __primitive.assert 10 7 :: l? x1
[10] tests.calc_step_simple_q1 2 :: l x1
[11] return [9]

___ tests.calc_step_simple_q0 (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?i x1
[3] __primitive.compose 1 2 4 :: l x1
[4] [] :: l x1
[5] return [3]

___ tests.calc_step_simple_q1 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 4 :: l? x3
[3] __primitive.dep 2 :: i x1
[4] __primitive.dep 2 :: i x1
[5] __primitive.add 3 4 :: i x1
[6] __primitive.compose 2 5 7 :: l x1
[7] [] :: l x1
[8] return [6]

___ tests.collatz (1 -> 1) ___
[1] var :: ?i x1
[2] val 0 :: i x1
[3] tests.collatz_r0 2 1 :: i x1
[4] return [3]

___ tests.collatz_r0 (2 -> 1) x2 rec ___
[1] var :: ?*i x3
[2] var :: ?*i x2
[3] __primitive.gt &1 &4 :: y x1
[4] val 1 :: i x3
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &2 5 :: i? x1
[7] return [6] -> 13
[8] __primitive.gt &1 &4 :: y x1
[9] __primitive.assert 12 8 :: i? x1
[10] tests.collatz_step 1 :: i x1
[11] __primitive.add 2 4 :: i x1
[12] tests.collatz_r0 11 10 :: i x1
[13] return [9]

___ tests.collatz_step (1 -> 1) x2 ___
[1] var :: ?i x4
[2] __primitive.bitand &1 &3 :: i x1
[3] val 1 :: i x4
[4] __primitive.eq 2 5 :: y x1
[5] val 0 :: i x1
[6] __primitive.assert 7 4 :: i? x1
[7] __primitive.div &1 8 :: i? x1
[8] val 2 :: i x1
[9] return [6] -> 16
[10] __primitive.mul &1 11 :: i x1
[11] val 3 :: i x1
[12] __primitive.add 10 &3 :: i x1
[13] __primitive.bitand 1 &3 :: i x1
[14] __primitive.eq 13 3 :: y x1
[15] __primitive.assert 12 14 :: i? x1
[16] return [15]

___ tests.compose_alt (1 -> 1) x2 ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: v? x1
[3] __primitive.dep 2 :: i x2
[4] __primitive.add 3 5 :: i x1
[5] val 1 :: i x1
[6] return [4] -> 7
[7] return [3]

___ tests.count (1 -> 1) x2 rec ___
[1] var :: ?*i x3
[2] __primitive.eq &1 &3 :: y x1
[3] val 0 :: i x3
[4] __primitive.assert &3 2 :: i? x1
[5] return [4] -> 12
[6] __primitive.gt &1 3 :: y x1
[7] __primitive.assert 11 6 :: i? x1
[8] __primitive.sub 1 &9 :: i x1
[9] val 1 :: i x2
[10] tests.count 8 :: i x1
[11] __primitive.add 10 9 :: i x1
[12] return [7]

___ tests.dec (1 -> 1) x2 rec ___
[1] var :: ?*i x4
[2] __primitive.lte &1 &3 :: y x1
[3] val 5 :: i x2
[4] __primitive.assert &1 2 :: i? x1
[5] return [4] -> 11
[6] __primitive.gt &1 3 :: y x1
[7] __primitive.assert 10 6 :: i? x1
[8] __primitive.sub 1 9 :: i x1
[9] val 1 :: i x1
[10] tests.dec 8 :: i x1
[11] return [7]

___ tests.decel (1 -> 1) ___
[1] var :: ?i x1
[2] val 0 :: i x1
[3] tests.decel_r0 2 1 :: i x1
[4] return [3]

___ tests.decel_r0 (2 -> 1) x2 rec ___
[1] var :: ?*i x3
[2] var :: ?*i x2
[3] __primitive.gt &1 &4 :: y x1
[4] val 1 :: i x3
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &2 5 :: i? x1
[7] return [6] -> 13
[8] __primitive.gt &1 &4 :: y x1
[9] __primitive.assert 12 8 :: i? x1
[10] tests.decel_step 1 :: i x1
[11] __primitive.add 2 4 :: i x1
[12] tests.decel_r0 11 10 :: i x1
[13] return [9]

___ tests.decel_step (1 -> 1) x2 ___
[1] var :: ?i x4
[2] __primitive.lte &1 &3 :: y x1
[3] val 5 :: i x3
[4] __primitive.assert 5 2 :: i? x1
[5] __primitive.sub 1 6 :: i x1
[6] val 1 :: i x1
[7] return [4] -> 11
[8] __primitive.sub &1 &3 :: i x1
[9] __primitive.gt 1 3 :: y x1
[10] __primitive.assert 8 9 :: i? x1
[11] return [10]

___ tests.default_max (2 -> 1) x2 ___
[1] var :: ?i x2
[2] var :: ?i x2
[3] __primitive.lt &2 &1 :: y x1
[4] __primitive.assert 1 3 :: i? x2
[5] return [4] -> 7
[6] __primitive.otherwise 4 2 :: i x1
[7] return [6]

___ tests.del (0 -> 1) x2 ___
[1] val 1 :: i x1
[2] return [1] -> 4
[3] val 2 :: i x1
[4] return [3]

___ tests.drop_loop (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] tests.drop_loop_r0 2 1 :: l x1
[4] return [3]

___ tests.drop_loop_r0 (2 -> 1) x2 rec ___
[1] var :: ?*i x3
[2] var :: ?a x2
[3] __primitive.gt &1 &4 :: y x1
[4] val 0 :: i x2
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &2 5 :: l? x1
[7] return [6] -> 13
[8] __primitive.gt &1 4 :: y x1
[9] __primitive.assert 12 8 :: l? x1
[10] __primitive.sub 1 11 :: i x1
[11] val 1 :: i x1
[12] tests.drop_loop_r0 2 10 :: l x1
[13] return [9]

___ tests.drop_loop1 (1 -> 1) ___
[1] var :: ?i x1
[2] tests.drop_loop1_r0 1 :: i x1
[3] return [2]

___ tests.drop_loop1_r0 (1 -> 1) x2 rec ___
[1] var :: ?*i x4
[2] __primitive.gt &1 &3 :: y x1
[3] val 0 :: i x2
[4] __primitive.not 2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 12
[7] __primitive.gt &1 3 :: y x1
[8] __primitive.assert 11 7 :: i? x1
[9] __primitive.sub 1 10 :: i x1
[10] val 1 :: i x1
[11] tests.drop_loop1_r0 9 :: i x1
[12] return [8]

___ tests.drop_loop2 (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] tests.drop_loop2_r0 2 1 :: a x1
[4] return [3]

___ tests.drop_loop2_r0 (2 -> 1) x2 rec ___
[1] var :: ?*i x3
[2] var :: ?a x2
[3] val 0 :: i x1
[4] __primitive.quote 2 1 :: a x1
[5] return [4] -> 11
[6] __primitive.gt &1 3 :: y x1
[7] __primitive.assert 10 6 :: a? x1
[8] __primitive.sub 1 9 :: i x1
[9] val 1 :: i x1
[10] tests.drop_loop2_r0 2 8 :: a x1
[11] return [7]

___ tests.drop_loop3 (3 -> 2) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] tests.drop_loop3_r0 3 2 1 -> 5 :: a x2
[5] __primitive.dep 4 :: a x1
[6] return [4 5]

___ tests.drop_loop3_r0 (3 -> 2) x2 rec ___
[1] var :: ?*i x3
[2] var :: ?a x2
[3] var :: ?a x2
[4] __primitive.gt &1 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x2
[7] __primitive.assert &2 &6 :: l? x1
[8] __primitive.assert 3 6 :: a x1
[9] return [8 7] -> 17
[10] __primitive.gt &1 5 :: y x2
[11] __primitive.assert 14 &10 :: l? x1
[12] __primitive.sub 1 13 :: i x1
[13] val 1 :: i x1
[14] tests.drop_loop3_r0 3 2 12 -> 15 :: a x2
[15] __primitive.dep 14 :: l x1
[16] __primitive.assert 15 10 :: l x1
[17] return [11 16]

___ tests.drop_loop4 (4 -> 3) ___
[1] var :: ?i x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] var :: ?a x1
[5] tests.drop_loop4_r0 4 3 2 1 -> 7 8 :: a x3
[7] __primitive.dep 5 :: a x1
[8] __primitive.dep 5 :: a x1
[9] return [8 7 5]

___ tests.drop_loop4_r0 (4 -> 3) x2 rec ___
[1] var :: ?*i x3
[2] var :: ?a x2
[3] var :: ?a x2
[4] var :: ?a x2
[5] __primitive.gt &1 &6 :: y x1
[6] val 0 :: i x2
[7] __primitive.not 5 :: y x3
[8] __primitive.assert &2 &7 :: l? x1
[9] __primitive.assert 3 &7 :: a x1
[10] __primitive.assert 4 7 :: a x1
[11] return [10 9 8] -> 22
[12] __primitive.gt &1 6 :: y x3
[13] __primitive.assert 16 &12 :: l? x1
[14] __primitive.sub 1 15 :: i x1
[15] val 1 :: i x1
[16] tests.drop_loop4_r0 4 3 2 14 -> 18 20 :: a x3
[18] __primitive.dep 16 :: a x1
[19] __primitive.assert 18 &12 :: a x1
[20] __primitive.dep 16 :: l x1
[21] __primitive.assert 20 12 :: l x1
[22] return [13 19 21]

___ tests.drop_loop5 (1 -> 1) ___
[1] var :: ?i x1
[2] tests.drop_loop5_r0 1 :: i x1
[3] return [2]

___ tests.drop_loop5_r0 (1 -> 1) x2 rec ___
[1] var :: ?*i x4
[2] __primitive.gt &1 &3 :: y x1
[3] val 0 :: i x2
[4] __primitive.not 2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 12
[7] __primitive.gt &1 3 :: y x1
[8] __primitive.assert 11 7 :: i? x1
[9] __primitive.sub 1 10 :: i x1
[10] val 1 :: i x1
[11] tests.drop_loop5_r0 9 :: i x1
[12] return [8]

___ tests.drop_loop6 (1 -> 1) ___
[1] var :: ?i x1
[2] val 7 :: i x1
[3] tests.drop_loop6_r0 1 2 :: i x1
[4] return [3]

___ tests.drop_loop6_r0 (2 -> 1) x2 rec ___
[1] var :: ?*i x4
[2] var :: ?i x2
[3] __primitive.gt &1 &4 :: y x1
[4] val 0 :: i x2
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &1 5 :: i? x1
[7] return [6] -> 12
[8] __primitive.gt &1 4 :: y x1
[9] __primitive.sub 1 &2 :: i x1
[10] tests.drop_loop6_r0 2 9 :: i x1
[11] __primitive.assert 10 8 :: i x1
[12] return [11]

___ tests.either_test (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?v x0
[3] __primitive.ap 1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [4]

___ tests.empty_assert (3 -> 1) ___
[1] var :: ?y x1
[2] var :: ?v x0
[3] var :: ?a x1
[4] __primitive.assert 3 1 :: l? x1
[5] return [4]

___ tests.ext_cos (1 -> 1) ___
[1] var :: ?d x1
[2] __primitive.external 1 3 :: d x1
[3] val "@math.h:cos" :: s x1
[4] return [2]

___ tests.f11 (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: l x1
[4] __primitive.compose 2 3 :: l x1
[5] return [4]

___ tests.f2 (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 2 1 -> 5 6 :: l? x3
[5] __primitive.dep 4 :: i x1
[6] __primitive.dep 4 :: i x1
[7] __primitive.add 6 8 :: i x1
[8] val 1 :: i x1
[9] __primitive.ap 7 4 -> 10 :: v x1
[10] __primitive.dep 9 :: i x1
[11] __primitive.add 5 10 :: i x1
[12] return [11]

___ tests.f6 (3 -> 3) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] return [2 1 3]

___ tests.f7c (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] tests.f7c_r0 1 2 :: i x1
[4] return [3]

___ tests.f7c_r0 (2 -> 1) x2 rec ___
[1] var :: ?*i x2
[2] var :: ?*i x3
[3] __primitive.gt &2 &4 :: y x1
[4] val 0 :: i x2
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &1 5 :: i? x1
[7] return [6] -> 14
[8] __primitive.gt &2 4 :: y x1
[9] __primitive.assert 13 8 :: i? x1
[10] __primitive.add 1 &11 :: i x1
[11] val 1 :: i x2
[12] __primitive.sub 2 11 :: i x1
[13] tests.f7c_r0 12 10 :: i x1
[14] return [9]

___ tests.f8 (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?v x0
[3] var :: ?v x0
[4] __primitive.ap 1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] return [5]

___ tests.f9 (2 -> 1) x3 ___
[1] var :: ?a x2
[2] var :: ?a x2
[3] return [2] -> 4
[4] return [1] -> 8
[5] __primitive.otherwise 2 7 :: a x1
[6] __primitive.otherwise 1 5 :: i x1
[7] val 3 :: i x1
[8] return [6]

___ tests.fact (1 -> 1) x2 rec ___
[1] var :: ?*i x4
[2] __primitive.eq &1 &3 :: y x1
[3] val 1 :: i x4
[4] __primitive.assert &3 2 :: i? x1
[5] return [4] -> 11
[6] __primitive.gt &1 &3 :: y x1
[7] __primitive.assert 10 6 :: i? x1
[8] __primitive.sub &1 3 :: i x1
[9] tests.fact 8 :: i x1
[10] __primitive.mul 1 9 :: i x1
[11] return [7]

___ tests.failthru (3 -> 2) x2 ___
[1] var :: ?l x1
[2] var :: ?a x3
[3] var :: ?a x2
[4] __primitive.ap &3 &2 1 -> 5 6 :: v? x2
[5] __primitive.dep 4 :: a x1
[6] __primitive.dep 4 :: a x1
[7] return [5 6] -> 9
[8] __primitive.otherwise &2 3 :: a x1
[9] return [8 2]

___ tests.fib (1 -> 1) x2 rec ___
[1] var :: ?*i x4
[2] __primitive.lte &1 &3 :: y x1
[3] val 1 :: i x4
[4] __primitive.assert &1 2 :: i? x1
[5] return [4] -> 13
[6] __primitive.gt &1 &3 :: y x1
[7] __primitive.assert 12 6 :: i? x1
[8] __primitive.sub 1 &3 :: i x2
[9] __primitive.sub &8 3 :: i x1
[10] tests.fib 9 :: i x1
[11] tests.fib 8 :: i x1
[12] __primitive.add 10 11 :: i x1
[13] return [7]

___ tests.fibl (1 -> 1) ___
[1] var :: ?i x1
[2] __primitive.sub 1 &3 :: i x1
[3] val 1 :: i x2
[4] val 0 :: i x1
[5] tests.fibl_r0 2 4 3 :: i x1
[6] return [5]

___ tests.fibl_r0 (3 -> 1) x2 rec ___
[1] var :: ?*i x3
[2] var :: ?*i x1
[3] var :: ?*i x3
[4] __primitive.gt &3 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert &1 6 :: i? x1
[8] return [7] -> 15
[9] __primitive.gt &3 5 :: y x1
[10] __primitive.assert 14 9 :: i? x1
[11] __primitive.sub 3 12 :: i x1
[12] val 1 :: i x1
[13] __primitive.add 2 &1 :: i x1
[14] tests.fibl_r0 11 1 13 :: i x1
[15] return [10]

___ tests.hello (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.write 1 3 :: y x1
[3] val "What's your name? " :: s x1
[4] io.getline_loop 2 5 -> 6 :: y x2
[5] val "" :: s x1
[6] __primitive.dep 4 :: s x1
[7] __primitive.strcat 8 6 :: s x1
[8] val "Hello " :: s x1
[9] __primitive.strcat 7 10 :: s x1
[10] val "!\n" :: s x1
[11] __primitive.write 4 9 :: y x1
[12] return [11]

___ tests.id_quote_compose (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: a x1
[4] tests.id_quote_compose_q0 3 2 :: l x1
[5] return [4]

___ tests.id_quote_compose_q0 (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] __primitive.compose 1 2 4 :: l x1
[4] [] :: l x1
[5] return [3]

___ tests.imbalanced_assert (2 -> 2) ___
[1] var :: ?y x1
[2] var :: ?y x2
[3] __primitive.assert 4 &2 :: i? x1
[4] __primitive.assert 5 1 :: i? x1
[5] val 3 :: i x1
[6] val 2 :: i x1
[7] __primitive.assert 6 2 :: i x1
[8] return [7 3]

___ tests.inl_loop (1 -> 1) ___
[1] var :: ?i x1
[2] tests.inl_loop_r0 1 :: i x1
[3] return [2]

___ tests.inl_loop_r0 (1 -> 1) x2 rec ___
[1] var :: ?*i x4
[2] __primitive.lt &1 &3 :: y x1
[3] val 10 :: i x2
[4] __primitive.not 2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 12
[7] __primitive.lt &1 3 :: y x1
[8] __primitive.assert 11 7 :: i? x1
[9] __primitive.add 1 10 :: i x1
[10] val 3 :: i x1
[11] tests.inl_loop_r0 9 :: i x1
[12] return [8]

___ tests.inl_loop2 (3 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] var :: ?i x1
[4] tests.inl_loop2_r0 1 2 3 :: i x1
[5] return [4]

___ tests.inl_loop2_r0 (3 -> 1) x2 rec ___
[1] var :: ?*i x4
[2] var :: ?i x2
[3] var :: ?i x3
[4] __primitive.lt &1 &3 :: y x1
[5] __primitive.not 4 :: y x1
[6] __primitive.assert &1 5 :: i? x1
[7] return [6] -> 12
[8] __primitive.lt &1 &3 :: y x1
[9] __primitive.assert 11 8 :: i? x1
[10] __primitive.add 1 &2 :: i x1
[11] tests.inl_loop2_r0 3 2 10 :: i x1
[12] return [9]

___ tests.inl_loop3 (1 -> 1) ___
[1] var :: ?i x1
[2] tests.inl_loop3_r0 1 :: i x1
[3] __primitive.mul 2 4 :: i x1
[4] val 8 :: i x1
[5] return [3]

___ tests.inl_loop3_r0 (1 -> 1) x2 rec ___
[1] var :: ?*i x4
[2] __primitive.lt &1 &3 :: y x1
[3] val 10 :: i x2
[4] __primitive.not 2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 12
[7] __primitive.lt &1 3 :: y x1
[8] __primitive.assert 11 7 :: i? x1
[9] __primitive.add 1 10 :: i x1
[10] val 3 :: i x1
[11] tests.inl_loop3_r0 9 :: i x1
[12] return [8]

___ tests.inl_loop4 (1 -> 1) ___
[1] var :: ?i x1
[2] __primitive.add 1 3 :: i x1
[3] val 4 :: i x1
[4] tests.inl_loop4_r0 2 :: i x1
[5] __primitive.mul 4 6 :: i x1
[6] val 2 :: i x1
[7] return [5]

___ tests.inl_loop4_r0 (1 -> 1) x2 rec ___
[1] var :: ?*i x4
[2] __primitive.lt &1 &3 :: y x1
[3] val 10 :: i x2
[4] __primitive.not 2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 12
[7] __primitive.lt &1 3 :: y x1
[8] __primitive.assert 11 7 :: i? x1
[9] __primitive.add 1 10 :: i x1
[10] val 3 :: i x1
[11] tests.inl_loop4_r0 9 :: i x1
[12] return [8]

___ tests.input_times (3 -> 1) ___
[1] var :: ?i x1
[2] var :: ?l x1
[3] var :: ?y x1
[4] tests.input_times_r0 1 3 2 :: a x1
[5] return [4]

___ tests.input_times_r0 (3 -> 1) x2 rec ___
[1] var :: ?*l x2
[2] var :: ?*y x2
[3] var :: ?*i x2
[4] val 0 :: i x1
[5] __primitive.quote 2 1 :: a x1
[6] return [5] -> 16
[7] __primitive.gt &3 4 :: y x1
[8] __primitive.assert 15 7 :: a? x1
[9] io.getline_loop 2 10 -> 13 :: y x2
[10] val "" :: s x1
[11] __primitive.sub 3 12 :: i x1
[12] val 1 :: i x1
[13] __primitive.dep 9 :: s x1
[14] __primitive.ap 13 1 :: l x1
[15] tests.input_times_r0 11 9 14 :: a x1
[16] return [8]

___ tests.it10 (1 -> 1) ___
[1] var :: ?i x1
[2] tests.it10_r0 1 :: i x1
[3] return [2]

___ tests.it10_r0 (1 -> 1) x2 rec ___
[1] var :: ?*i x4
[2] __primitive.lt &1 &3 :: y x1
[3] val 10 :: i x2
[4] __primitive.not 2 :: y x1
[5] __primitive.assert &1 4 :: i? x1
[6] return [5] -> 12
[7] __primitive.lt &1 3 :: y x1
[8] __primitive.assert 11 7 :: i? x1
[9] __primitive.add 1 10 :: i x1
[10] val 1 :: i x1
[11] tests.it10_r0 9 :: i x1
[12] return [8]

___ tests.it10b (1 -> 1) ___
[1] var :: ?l x1
[2] tests.it10b_r0 1 :: i x1
[3] return [2]

___ tests.it10b_r0 (1 -> 1) x2 rec ___
[1] var :: ?*l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x4
[4] __primitive.lt &3 &5 :: y x1
[5] val 10 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert &3 6 :: i? x1
[8] return [7] -> 15
[9] __primitive.lt &3 5 :: y x1
[10] __primitive.assert 14 9 :: i? x1
[11] __primitive.add 3 12 :: i x1
[12] val 1 :: i x1
[13] __primitive.pushr 2 11 :: l x1
[14] tests.it10b_r0 13 :: i x1
[15] return [10]

___ tests.ldmult (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?i x1
[3] list.listdup_r0 2 1 4 :: l x1
[4] [] :: l x1
[5] algorithm.sum_r0 6 3 :: i x1
[6] val 0 :: i x1
[7] return [5]

___ tests.leak (1 -> 1) ___
[1] var :: ?i x1
[2] val 0 :: i x1
[3] tests.leak_r0 2 1 :: i x1
[4] return [3]

___ tests.leak_r0 (2 -> 1) x2 rec ___
[1] var :: ?i x3
[2] var :: ?*i x2
[3] __primitive.gt &1 &4 :: y x1
[4] val 1 :: i x2
[5] __primitive.not 3 :: y x1
[6] __primitive.assert &2 5 :: i? x1
[7] return [6] -> 13
[8] __primitive.gt &1 4 :: y x1
[9] __primitive.assert 12 8 :: i? x1
[10] __primitive.add 2 11 :: i x1
[11] val 3 :: i x1
[12] tests.leak_r0 10 1 :: i x1
[13] return [9]

___ tests.oseq (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] __primitive.seq 2 1 :: a x1
[4] return [3]

___ tests.ow_assert (1 -> 1) ___
[1] var :: ?a x1
[2] __primitive.otherwise 1 3 :: y x1
[3] val True :: y x1
[4] return [2]

___ tests.ow_assert2 (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] __primitive.otherwise 1 2 :: y x1
[4] return [3]

___ tests.ow_assert3 (2 -> 1) ___
[1] var :: ?a x1
[2] var :: ?a x1
[3] __primitive.otherwise 1 2 :: y x1
[4] return [3]

___ tests.ow_not (1 -> 1) ___
[1] var :: ?a x1
[2] __primitive.otherwise 1 3 :: y x1
[3] val True :: y x1
[4] return [2]

___ tests.pct (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?d x1
[3] __primitive.to_float 1 :: d x1
[4] __primitive.div_float 3 5 :: d? x1
[5] val 100 :: d x1
[6] __primitive.add_float 4 7 :: d x1
[7] val 1 :: d x1
[8] __primitive.mul_float 2 6 :: d x1
[9] return [8]

___ tests.popr_quote_compose (1 -> 1) ___
[1] var :: ?l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: l x1
[4] __primitive.ap 3 -> 5 :: l? x2
[5] __primitive.dep 4 :: a x1
[6] tests.popr_quote_compose_q0 5 4 2 :: l x1
[7] return [6]

___ tests.popr_quote_compose_q0 (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?l x1
[3] var :: ?a x1
[4] __primitive.compose 1 2 3 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.push_input (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?y x1
[3] io.getline_loop 2 4 -> 5 :: y x2
[4] val "" :: s x1
[5] __primitive.dep 3 :: s x1
[6] __primitive.ap 5 1 :: l x1
[7] return [3 6]

___ tests.pushl2 (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 2 1 :: l x1
[5] return [4]

___ tests.pushl_assert (2 -> 1) ___
[1] var :: ?a x1
[2] __primitive.quote 1 :: a x1
[3] return [2]

___ tests.pushl_swap_assert (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?y x1
[4] __primitive.assert 5 3 :: l? x1
[5] __primitive.ap 2 1 :: l x1
[6] return [4]

___ tests.qdec (1 -> 1) x2 rec ___
[1] var :: ?*l x2
[2] __primitive.ap &1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x3
[4] __primitive.lte &3 &5 :: y x1
[5] val 5 :: i x2
[6] __primitive.assert 1 4 :: l? x1
[7] return [6] -> 14
[8] __primitive.gt &3 5 :: y x1
[9] __primitive.assert 13 8 :: l? x1
[10] __primitive.sub 3 11 :: i x1
[11] val 1 :: i x1
[12] __primitive.pushr 2 10 :: l x1
[13] tests.qdec 12 :: l x1
[14] return [9]

___ tests.qtest (1 -> 1) rec ___
[1] var :: ?*l x1
[2] __primitive.ap 1 -> 3 :: l? x2
[3] __primitive.dep 2 :: i x1
[4] __primitive.add 3 5 :: i x1
[5] val 1 :: i x1
[6] __primitive.pushr 2 4 :: l x1
[7] tests.qtest 6 :: v x1
[8] return [7]

___ tests.quote_str (1 -> 1) ___
[1] var :: ?s x1
[2] __primitive.strcat &3 1 :: s x1
[3] val "'" :: s x2
[4] __primitive.strcat 2 3 :: s x1
[5] return [4]

___ tests.spaces (1 -> 1) x2 ___
[1] var :: ?s x1
[2] tests.spaces_r0 1 :: s x1
[3] __primitive.eq_str 2 4 :: y x2
[4] val "" :: s x1
[5] __primitive.assert 6 &3 :: y? x1
[6] val True :: y x1
[7] return [5] -> 12
[8] val Something :: y x1
[9] __primitive.assert 8 3 :: y x1
[10] __primitive.otherwise 9 11 :: y x1
[11] val False :: y x1
[12] return [10]

___ tests.spaces_r0 (1 -> 1) x2 rec ___
[1] var :: ?*s x4
[2] __primitive.eq_str &1 &3 :: y x1
[3] val "" :: s x3
[4] __primitive.not 2 :: y x1
[5] __primitive.not 4 :: y x1
[6] __primitive.assert &1 5 :: s? x1
[7] return [6] -> 17
[8] __primitive.eq_str &1 &3 :: y x1
[9] __primitive.not 8 :: y x1
[10] __primitive.assert 16 9 :: s? x1
[11] __primitive.strsplit 1 12 -> 15 :: s? x2
[12] val " " :: s x1
[13] __primitive.eq_str 11 3 :: y x1
[14] __primitive.assert 15 13 :: s? x1
[15] __primitive.dep 11 :: s x1
[16] tests.spaces_r0 14 :: s x1
[17] return [10]

___ tests.spilling (1 -> 2) ___
[1] var :: ?y x1
[2] __primitive.not 1 :: y x2
[3] tests.spilling_q0 &2 :: l x1
[4] return [2 3]

___ tests.spilling_q0 (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.not 1 :: y x1
[3] __primitive.ap 2 4 :: l x1
[4] [] :: l x1
[5] return [3]

___ tests.spilling2 (1 -> 2) ___
[1] var :: ?y x1
[2] __primitive.not 1 :: y x2
[3] tests.spilling2_q0 &2 :: l x1
[4] tests.spilling2_q1 2 :: l x1
[5] return [4 3]

___ tests.spilling2_q0 (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.ap 1 3 :: l x1
[3] [] :: l x1
[4] return [2]

___ tests.spilling2_q1 (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.not 1 :: y x1
[3] __primitive.ap 2 4 :: l x1
[4] [] :: l x1
[5] return [3]

___ tests.spilling3 (1 -> 3) ___
[1] var :: ?y x1
[2] __primitive.not 1 :: y x2
[3] __primitive.not &2 :: y x2
[4] tests.spilling3_q0 &3 :: l x1
[5] tests.spilling3_q0 3 :: l x1
[6] __primitive.not 2 :: y x1
[7] tests.spilling3_q0 6 :: l x1
[8] return [7 5 4]

___ tests.spilling3_q0 (1 -> 1) ___
[1] var :: ?y x1
[2] __primitive.ap 1 3 :: l x1
[3] [] :: l x1
[4] return [2]

___ tests.stream (1 -> 2) ___
[1] var :: ?a x2
[2] tests.stream_q0 &1 :: l x1
[3] return [2 1]

___ tests.stream_q0 (1 -> 1) ___
[1] var :: ?a x1
[2] tests.stream 1 -> 3 :: v x2
[3] __primitive.dep 2 :: v x1
[4] __primitive.ap 2 3 5 :: l x1
[5] [] :: l x1
[6] return [4]

___ tests.sum_times2 (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?y x1
[3] val 0 :: i x1
[4] tests.sum_times2_r0 1 2 3 :: i x1
[5] return [4]

___ tests.sum_times2_r0 (3 -> 1) x2 rec ___
[1] var :: ?*i x2
[2] var :: ?*y x1
[3] var :: ?*i x3
[4] __primitive.gt &3 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert &1 6 :: i? x1
[8] return [7] -> 19
[9] __primitive.gt &3 5 :: y x1
[10] __primitive.assert 18 9 :: i? x1
[11] __primitive.sub 3 12 :: i x1
[12] val 1 :: i x1
[13] io.getline_loop 2 14 -> 15 :: y x2
[14] val "" :: s x1
[15] __primitive.dep 13 :: s x1
[16] __primitive.from_string 15 :: i? x1
[17] __primitive.add 16 1 :: i x1
[18] tests.sum_times2_r0 11 13 17 :: i x1
[19] return [10]

___ tests.sum_times2v (2 -> 1) ___
[1] var :: ?i x1
[2] var :: ?y x1
[3] val 0 :: i x1
[4] tests.sum_times2v_r0 1 2 3 :: i x1
[5] return [4]

___ tests.sum_times2v_r0 (3 -> 1) x2 rec ___
[1] var :: ?*i x2
[2] var :: ?*y x1
[3] var :: ?*i x3
[4] __primitive.gt &3 &5 :: y x1
[5] val 0 :: i x2
[6] __primitive.not 4 :: y x1
[7] __primitive.assert &1 6 :: i? x1
[8] return [7] -> 23
[9] __primitive.gt &3 5 :: y x1
[10] __primitive.assert 22 9 :: i? x1
[11] __primitive.sub 3 12 :: i x1
[12] val 1 :: i x1
[13] io.getline_loop 2 14 -> 15 :: y x2
[14] val "" :: s x1
[15] __primitive.dep 13 :: s x2
[16] __primitive.from_string &15 :: i? x1
[17] __primitive.add 16 1 :: i x1
[18] __primitive.strcat &19 15 :: s x1
[19] val "'" :: s x2
[20] __primitive.strcat 18 19 :: s x1
[21] __primitive.write 13 20 :: y x1
[22] tests.sum_times2v_r0 11 21 17 :: i x1
[23] return [10]

___ tests.test_ap11 (2 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] __primitive.ap 2 1 -> 4 :: v? x1
[4] __primitive.dep 3 :: a x1
[5] return [4]

___ tests.test_ap12 (2 -> 2) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] __primitive.ap 2 1 -> 5 4 :: v? x2
[4] __primitive.dep 3 :: a x1
[5] __primitive.dep 3 :: a x1
[6] return [5 4]

___ tests.test_ap21 (3 -> 1) ___
[1] var :: ?l x1
[2] var :: ?a x1
[3] var :: ?a x1
[4] __primitive.ap 3 2 1 -> 5 :: v? x1
[5] __primitive.dep 4 :: a x1
[6] return [5]

___ tests.vifte_collatz (1 -> 1) x2 rec ___
[1] var :: ?*i x2
[2] tests.vifte_collatz_step 1 :: i x3
[3] __primitive.seq 4 &2 :: v x1
[4] tests.vifte_collatz 2 :: v x1
[5] return [3] -> 7
[6] __primitive.otherwise 2 1 :: i x1
[7] return [6]

___ tests.vifte_collatz_step (1 -> 1) x2 ___
[1] var :: ?i x4
[2] __primitive.bitand &1 &3 :: i x1
[3] val 1 :: i x6
[4] __primitive.eq 2 &3 :: y x1
[5] __primitive.assert 8 4 :: i? x2
[6] __primitive.mul &1 7 :: i x1
[7] val 3 :: i x1
[8] __primitive.add 6 &3 :: i x1
[9] __primitive.gt &5 &3 :: y x1
[10] __primitive.assert 5 9 :: i? x1
[11] return [10] -> 20
[12] __primitive.bitand &1 &3 :: i x1
[13] __primitive.eq 12 14 :: y x1
[14] val 0 :: i x1
[15] __primitive.assert 16 13 :: i? x2
[16] __primitive.div 1 17 :: i? x1
[17] val 2 :: i x1
[18] __primitive.gt &15 3 :: y x1
[19] __primitive.assert 15 18 :: i? x1
[20] return [19]

___ tests.vifte_quote (1 -> 1) x2 ___
[1] var :: ?i x3
[2] __primitive.seq 3 &1 :: i x1
[3] __primitive.add 1 4 :: i x1
[4] val 1 :: i x1
[5] return [2] -> 8
[6] __primitive.otherwise 1 7 :: i x1
[7] val 0 :: i x1
[8] return [6]

___ tests.while_length (1 -> 1) ___
[1] var :: ?l x1
[2] val 0 :: i x1
[3] tests.while_length_r0 2 1 :: v x1
[4] return [3]

___ tests.while_length_r0 (2 -> 1) rec ___
[1] var :: ?*l x1
[2] var :: ?*i x1
[3] __primitive.add 2 4 :: i x1
[4] val 1 :: i x1
[5] __primitive.ap 1 -> X :: l? x1
[6] tests.while_length_r0 3 5 :: v x1
[7] return [6]

