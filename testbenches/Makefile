# functions generated by PoprC
# FUNCTIONS = \
#   tests.fibl/16 \
#   tests.collatz/27 \
#   algorithm.gcd/8 \
#   algorithm.sum/8 \
#   list.reverse/8 \
#   tests.repeat_int/8 \
#   tests.dup_map/8 \
#   tests.map_add1/8 \
#   tests.fact/16 \
#   tests.fib/16 \
#   tests.add_array_at/8 \
#   io.stream_read_array/8
FUNCTIONS = \
  tests.fibl/64 \
  tests.collatz/64 \
  algorithm.gcd/64 \
  algorithm.sum/64 \
  list.reverse/64 \
  tests.repeat_int/64 \
  tests.dup_map/64 \
  tests.map_add1/64 \
  tests.fact/64 \
  tests.fib/64 \
  tests.add_array_at/64 \
  io.stream_read_array/64
COMMON = ../vlgen/primitives.v ../vlgen/define.v

BUILD = build
INCLUDE = -I../vlgen -I$(BUILD)/gen -Iutil

.PHONY: all
all: test $(patsubst %, $(BUILD)/preprocessed/%, $(wildcard *_swbut.v))

.PHONY: sim
sim: $(patsubst %_tb.v, $(BUILD)/sim/%_tb.fst, $(wildcard *_tb.v))
sim: $(patsubst %_tb.v, $(BUILD)/sim/%_tb.log, $(wildcard *_tb.v))

.PHONY: test
test: sim
	diff -U 3 -r -x '*.fst' -x '*~' verified $(BUILD)/sim

.PHONY: verify
verify: sim
	@mkdir -p verified
	cp $(BUILD)/sim/*.log verified/

print-%:
	@echo $* = $($*)

# keep intermediate files
.SECONDARY:

$(BUILD)/sim/%_tb.fst $(BUILD)/sim/%_tb.log: $(BUILD)/vvp/%_tb.vvp
	@mkdir -p $(BUILD)/sim
	cd $(BUILD)/sim && vvp -l$*_tb.log $(abspath $<) -fst

# add generated files as prerequisites for *_tb.v and *_swbut.v
$(foreach suf, tb swbut swbut_tb, \
  $(foreach target, $(wildcard *_$(suf).v), \
    $(eval $(BUILD)/preprocessed/$(target): $(patsubst %_$(suf).v, $(BUILD)/gen/%.v, $(target)))))
$(BUILD)/preprocessed/%.v: %.v $(COMMON)
	@mkdir -p $(dir $@)
	iverilog -o - -E $(INCLUDE) -Ddumpfile="\"$*.fst\"" $< | sed 's/[[:space:]]*$$//' | cat -s > $@

$(BUILD)/vvp/%_tb.vvp: $(BUILD)/preprocessed/%_tb.v
	@mkdir -p $(dir $@)
	iverilog -o $@ $(INCLUDE) $<

$(BUILD)/gen/%.v: ../lib.ppr ../tests.ppr ../eval
        # set FUNCTION for each target in FUNCTION_SRCS
	$(foreach target, $(FUNCTIONS), \
	  $(eval $(BUILD)/gen/$(shell ../eval -ident $(firstword $(subst /, ,$(target)))).v:FUNCTION=$(target)))
	@mkdir -p $(dir $@)
	@if [ "$(FUNCTION)" ]; then \
	  echo "generating $(FUNCTION)"; \
          (cd ..; \
	   ./eval -lo lib.ppr tests.ppr \
	     -bound $(word 2,$(subst /, ,$(FUNCTION))) \
	     -cv $(firstword $(subst /, ,$(FUNCTION))) \
	  ) > $@; \
        fi

../eval:
	make -C ..

.PHONY: clean
clean:
	rm -rf $(BUILD)
