# functions generated by PoprC
FUNCTIONS = tests.fibl tests.collatz algorithm.gcd algorithm.sum list.reverse tests.cycle # tests.dup_map
COMMON = ../vlgen/primitives.v ../vlgen/define.v

BUILD = build
INCLUDE = -I../vlgen -I$(BUILD)/gen

.PHONY: all
all: $(patsubst %_tb.v, $(BUILD)/vcd/%_tb.vcd, $(wildcard *_tb.v))
all: $(patsubst %, $(BUILD)/preprocessed/%, $(wildcard *_swbut.v))

print-%:
	@echo $* = $($*)

# keep intermediate files
.SECONDARY:

$(BUILD)/vcd/%_tb.vcd: $(BUILD)/vvp/%_tb.vvp
	@mkdir -p $(dir $@)
	cd $(dir $@) && vvp $(abspath $<)

# add generated files as prerequisites for *_tb.v and *_swbut.v
$(foreach suf, tb swbut swbut_tb, \
  $(foreach target, $(wildcard *_$(suf).v), \
    $(eval $(BUILD)/preprocessed/$(target): $(patsubst %_$(suf).v, $(BUILD)/gen/%.v, $(target)))))
$(BUILD)/preprocessed/%.v: %.v $(COMMON)
	@mkdir -p $(dir $@)
	iverilog -o - -E $(INCLUDE) $< | sed '/^\s*$$/d' > $@

$(BUILD)/vvp/%_tb.vvp: $(BUILD)/preprocessed/%_tb.v
	@mkdir -p $(dir $@)
	iverilog -o $@ $(INCLUDE) $<

$(BUILD)/gen/%.v: ../lib.ppr ../tests.ppr ../eval
        # set FUNCTION for each target in FUNCTION_SRCS
	$(foreach target, $(FUNCTIONS), \
	  $(eval $(BUILD)/gen/$(shell ../eval -ident $(target)).v:FUNCTION=$(target)))
	@mkdir -p $(dir $@)
	@if [ "$(FUNCTION)" ]; then \
	  echo "generating $(FUNCTION)"; \
          (cd ..; ./eval -lo lib.ppr tests.ppr -cv $(FUNCTION)) > $@; \
        fi

../eval:
	make -C ..

.PHONY: clean
clean:
	rm -rf $(BUILD)
