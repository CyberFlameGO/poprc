module tests:

imports:
  module list
  module stack
  module control

__ f2b: | popr ! cut popr swap drop

__ f5: [] pushl rotl rotl | swap pushl popr swap popr swap drop dup rotl > ! cut

__ x y [z+] should be x + y + z + 1
f2: pushl pushl popr 1 + swap pushl popr swap popr swap drop +

__ f1: [] [] ifte pushl

f6: rotl

__ this expands forever because laziness expands backwards; assert must be *later* than recursive call
__ dec: [dup 5 <= !] [dup 5 > ! 1- dec] | pushl popr swap drop
dec: [dup 5 <= !] [dup 1- dec swap 5 > !] | pushl popr swap drop

fib: [dup 1 <= !] [dup 1- dup 1- fib swap fib + swap 1 > !] | pushl popr swap drop

fact: [1 == 1 swap !] [dup dup 1- fact * swap 1 > !] | pushl popr swap drop

___ these need fixed
___ from here

__ check: [|] control.dip21 [dup] swap . . popr !

__ fact2: [1 == 1 swap !] [dup 1- swap [*] pushl swap pushr pushl get2 fact2] | pushl pushl get2
get2: popr swap popr swap drop swap

___ to here

not: False =:=
__ len: dup is_nil [0 swap!] [swap popr drop len 1+ swap not!] | pushl pushl popr swap drop

__ iota: [0 == [] swap !] [dup [dup 1- iota swap] pushl swap 0 != !] | pushl popr swap drop
__ sum: [is_nil 0 swap !] [dup get2 swap sum + swap is_nil not!] | pushl popr swap drop

pushl2: pushl pushl

__[
range: __ with inputs i and n __
  __ return i or recursive call with i+1 __
  dup2 [drop] [swap 1+ swap range] | pushl2
    rotr <= ! __ make sure i <= n
    head __ get the value
]__

__[
nested: [[0 swap False =:= !]
           [1 swap True  =:= !] | swap False =:= !]
          [[2 swap False =:= !]
           [3 swap True  =:= !] | swap True  =:= !] |
           pushl popr swap drop __ first arg
           pushl popr swap drop __ second arg
]__
