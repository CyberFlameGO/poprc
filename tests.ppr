__, Copyright 2012-2018 Dustin DeWeese
  | This file is part of PoprC.
  |
  |  PoprC is free software: you can redistribute it and/or modify
  |  it under the terms of the GNU General Public License as published by
  |  the Free Software Foundation, either version 3 of the License, or
  |  (at your option) any later version.
  |
  |  PoprC is distributed in the hope that it will be useful,
  |  but WITHOUT ANY WARRANTY; without even the implied warranty of
  |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  |  GNU General Public License for more details.
  |
  |  You should have received a copy of the GNU General Public License
  |  along with PoprC.  If not, see <http://www.gnu.org/licenses/>.
  |______________________________________________________________________

module tests:

imports:
  module list
  module stack
  module control
  module num
  module logic
  module algorithm

__ f2b: | popr ! cut popr swap drop

__ f5: [] pushl swap2 swap2 | swap pushl popr swap popr swap drop dup swap2 > ! cut

__ x y [z+] should be x + y + z + 1
__ FIX: for some reason: pull2 != pull pull
f2: pushl pushl popr 1 + swap pushl pull pull drop +

__ f1: [] [] ifte pushl

f6: swap2

__ apply a quote to a single input yielding a single output
test_ap11: pushl head

__ apply a quote to two inputs yielding a single output
test_ap21: pushl pushl head

__ apply a quote to a single input yielding two outputs
test_ap12: pushl pull2 drop swap

__ this expands forever because laziness expands backwards; assert must be *later* than recursive call
__ dec: [dup 5 <= !] [dup 5 > ! 1- dec] | pushl popr swap drop
dec: [dup 5 <= !] [dup 1- dec swap 5 > !] | pushl head

fib: [dup 1 <= !] [dup 1- dup 1- fib swap fib + swap 1 > !] | pushl head

fact: [1 == 1 swap !] [dup dup 1- fact * swap 1 > !] | pushl head

count: [0 == 0 swap !] [dup 1- count 1+ swap 0 > !] | pushl head

qdec: [dup head 5 <= !] [dup [1-] . qdec swap head 5 > !] | pushl head

qtest: [1+] . qtest
__ qtest2: [1+] swap . qtest2

___ these need fixed
___ from here

__ fact2: [1 == 1 swap !] [dup 1- swap [*] pushl swap pushr pushl get2 fact2] | pushl pushl get2
get2: pull2 drop swap

___ to here

__ len: dup is_nil [0 swap!] [swap popr drop len 1+ swap not!] | pushl pushl popr swap drop

__ iota: [0 == [] swap !] [dup [dup 1- iota swap] pushl swap 0 != !] | pushl popr swap drop
__ sum: [is_nil 0 swap !] [dup get2 swap sum + swap is_nil not!] | pushl popr swap drop

pushl2: pushl pushl

__[
range: __ with inputs i and n __
  __ return i or recursive call with i+1 __
  dup2 [drop] [swap 1+ swap range] | pushl2
    -swap2 <= ! __ make sure i <= n
    head __ get the value
]__

__[
nested: [[0 swap False =:= !]
           [1 swap True  =:= !] | swap False =:= !]
          [[2 swap False =:= !]
           [3 swap True  =:= !] | swap True  =:= !] |
           pushl popr swap drop __ first arg
           pushl popr swap drop __ second arg
]__

inl_loop: [3+] [10<] iterate
inl_loop2: swap [+] pushl swap [<] pushl iterate
inl_loop3: [3+] [10<] iterate 8*
inl_loop4: 4+ [3+] [10<] iterate 2*

popr_quote_compose: [popr] .
id_quote_compose: [id] .

__ test, should return x2
compose_alt: [1+] [] | . head

__ initial step test base -> result
binrec: [iterate] dip31 $

__ it10 should optimize to the same code as br10
it10: [] pushl [[1+] .] [head 10 <] iterate head
br10: [] pushl [[1+] .] [head 10 <] [head] binrec
it10b: [[1+] .] [head 10 <] iterate head

ap_loop: dup [$] dip21 ap_loop
ap_loop1: [1+] ap_loop
ap_loop2: [[1+] .] ap_loop
ap_loop3: [1+] swap swap ap_loop

__ ERROR: user_func.c:185: unify_exec: Assertion `in == closure_in(pat)' failed.
__ alt_ap_loop: [dup | 1+] ap_loop

ap_loop4: [] pushl [] ap_loop head

__ dup_ap_alt: [2 |] dup 1 swap $

__ a needlessly expensive `drop`
drop_loop:
  [] ap20
    [[1-] .]
    [head 0 >]
    iterate tail head

drop_loop1:
  [] ap10
    [[1-] .]
    [head 0 >]
    iterate head

drop_loop2:
  [] ap20
    [[1-] .]
    [head 0 >]
    iterate

drop_loop3:
  [] ap30
    [[1-] .]
    [head 0 >]
    iterate tail pull2 drop swap

drop_loop4:
  [] ap40
    [[1-] .]
    [head 0 >]
    iterate tail pull3 drop

drop_loop5:
  [] ap10
    [[1-] .] swap swap
    [head 0 >]
    iterate head

drop_loop6:
  [-] pushl [.] pushl
    [7] swap
    [head 0 >]
    iterate head

collatz_step:
  [dup 2/ swap even]
    [dup 3* 1+ swap odd]
    | pushl pull2 drop swap!

collatz:
  0 swap [] ap20
    [[swap 1+ swap collatz_step] .]
    [head 1 >]
    iterate tail head

decel_step:
  [dup 1- swap 5<=]
    [dup 5- swap 5>]
    | pushl pull2 drop swap!

decel:
  0 swap [] ap20
    [[swap 1+ swap decel_step] .]
    [head 1 >]
    iterate tail head

leak:
  0 swap [] ap20
    [[swap 3+ swap] .]
    [head 1 >]
    iterate tail head

altf_loop:
  [] ap20
    [[dup | 1-] .]
    [head 1 >]
    iterate tail head

__ ERROR: user_func.c:702: func_exec: Assertion `parent_entry' failed: incomplete entry can't be unified without a parent entry
__ altf_loop2:
__   [] ap10
__     [[0 |] .]
__     [head 1 >]
__     iterate tail head

__ ERROR: trace.c:179: switch_entry: Assertion `is_ancestor_of(r->value.tc.entry, entry)' failed.
__ alt_ap_f: [dup 1+] [dup 2+] | pushl
__ alt_ap: alt_ap_f pull2 drop swap

__ rec_a: rec_b 1 +
__ rec_b: rec_a 1 -

__ using floats
pct: ->f 100 /f 1 +f *f

pushl_assert: [] pushl swap !

alt_list: | [dup] pushl

default_max: dup2 < ! swap default

assert_nready: [1+] swap ! $

__ comp_assert: [2] swap ! [1+] swap2 ! . head
empty_assert: [] swap ! ap22 drop swap drop

__ times_noop: [id] 1 times

after0:
  [tail]
    [head 0 !=]
    iterate tail head

__ bad_deps: [dup] popr swap 1 swap dup swap [ap21] dip32 2 swap ap11

vifte: swap2 valid -swap2 ifte

__ equivalent to `True otherwise`
ow_assert: True swap True otherwise !
ow_not: False otherwise not

__ both equivalent to `swap otherwise`
ow_assert2: True False | otherwise not !
ow_assert3: True otherwise !

imbalanced_assert: 1 swap ! swap 2 swap ! dup swap2 +
assert_seq: 1 swap ! seq

pushl_swap_assert: pushl swap!

alt_seq: dup [1] swap! swap [2 delay] swap not! | head
del: 1 2 delay |

__ f7a: [0>] iterate
__ f7b: [1+] . f7a
f7c: [1+] swap times

__ should `not` stay in the quote?
__ f7d: [not] .

ldmult: listdup sum

stream: dup [stream] pushl swap
box: [box]
__ cycle: cycle [1] .

__ should't just drop an arg
f8: . $

__ linear time version of `fib`
fibl: [0 1] [[tuck +] .] swap2 1- times head

push_input: [input] dip12 pushl

input_times: [] ap31 [[push_input] .] swap times

__ sum_times: [] swap input_times [<-str] map sum

__ maptest: [1] [] map head

quote_str: "'" swap ++ "'" ++
sum_times2: swap [0] pushl [[[input <-str] dip12 +] .] swap2 times head
sum_times2v: swap [0] pushl [[[input dup [quote_str print] dip21 <-str] dip12 +] .] swap2 times head

spaces: [" " strsplit swap "" =s !] ["" =s not] iterate True swap "" =s ! False default

__ TODO simplify each case
__ calc_func: [=s] dip21 [.] pushl dip11!
calc_step:
  strtrim
    [<-str int_t pushr]
    ["+"    =s [[+]    .] dip11 !] |
    ["-"    =s [[-]    .] dip11 !] |
    ["*"    =s [[*]    .] dip11 !] |
    ["/"    =s [[/]    .] dip11 !] |
    ["swap" =s [[swap] .] dip11 !] |
    ["dup"  =s [[dup]  .] dip11 !] |
    ["drop" =s [[drop] .] dip11 !] | ap21 nip

__ simplified versions of calc_step

calc_step_dummy: strtrim <-str int_t [+] pushl .

calc_step_simple:
  strtrim
    [<-str int_t pushr]
    ["+"    =s [[+]    .] dip11 !] | ap21 nip

calc_step_push:
  strtrim
    ["1"    =s [[1]    .] dip11 !]
    ["+"    =s [[+]    .] dip11 !] | ap21 nip

__ calc: [[0]] ap10 [[dup [head ->str print input] dip22 swap calc_step_push] .] [head valid] iterate

calc_loop: dup [head ->str print input] dip22 swap calc_step calc_loop
calc: [0] calc_loop Done default

__ compq: [.]
